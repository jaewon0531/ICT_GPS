
usart2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  08008f20  08008f20  00018f20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094bc  080094bc  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094c4  080094c4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094c8  080094c8  000194c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080094cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          0000019c  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000037c  2000037c  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a2e7  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb5  00000000  00000000  0002a4f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000800  00000000  00000000  0002c1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000738  00000000  00000000  0002c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023db3  00000000  00000000  0002d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a8dd  00000000  00000000  00050e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3568  00000000  00000000  0005b778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012ece0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003708  00000000  00000000  0012ed30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008f04 	.word	0x08008f04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08008f04 	.word	0x08008f04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08c      	sub	sp, #48	; 0x30
 800101c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	f107 031c 	add.w	r3, r7, #28
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
 8001032:	4b7c      	ldr	r3, [pc, #496]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a7b      	ldr	r2, [pc, #492]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001038:	f043 0304 	orr.w	r3, r3, #4
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b79      	ldr	r3, [pc, #484]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0304 	and.w	r3, r3, #4
 8001046:	61bb      	str	r3, [r7, #24]
 8001048:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	4b75      	ldr	r3, [pc, #468]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a74      	ldr	r2, [pc, #464]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b72      	ldr	r3, [pc, #456]	; (8001224 <MX_GPIO_Init+0x20c>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	613b      	str	r3, [r7, #16]
 800106a:	4b6e      	ldr	r3, [pc, #440]	; (8001224 <MX_GPIO_Init+0x20c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	4a6d      	ldr	r2, [pc, #436]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	6313      	str	r3, [r2, #48]	; 0x30
 8001076:	4b6b      	ldr	r3, [pc, #428]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	4b67      	ldr	r3, [pc, #412]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	4a66      	ldr	r2, [pc, #408]	; (8001224 <MX_GPIO_Init+0x20c>)
 800108c:	f043 0302 	orr.w	r3, r3, #2
 8001090:	6313      	str	r3, [r2, #48]	; 0x30
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <MX_GPIO_Init+0x20c>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	4b60      	ldr	r3, [pc, #384]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	4a5f      	ldr	r2, [pc, #380]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010a8:	f043 0308 	orr.w	r3, r3, #8
 80010ac:	6313      	str	r3, [r2, #48]	; 0x30
 80010ae:	4b5d      	ldr	r3, [pc, #372]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	f003 0308 	and.w	r3, r3, #8
 80010b6:	60bb      	str	r3, [r7, #8]
 80010b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b59      	ldr	r3, [pc, #356]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a58      	ldr	r2, [pc, #352]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b56      	ldr	r3, [pc, #344]	; (8001224 <MX_GPIO_Init+0x20c>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010dc:	4852      	ldr	r0, [pc, #328]	; (8001228 <MX_GPIO_Init+0x210>)
 80010de:	f001 f8f5 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80010e2:	2200      	movs	r2, #0
 80010e4:	2140      	movs	r1, #64	; 0x40
 80010e6:	4851      	ldr	r0, [pc, #324]	; (800122c <MX_GPIO_Init+0x214>)
 80010e8:	f001 f8f0 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	4619      	mov	r1, r3
 8001102:	484b      	ldr	r0, [pc, #300]	; (8001230 <MX_GPIO_Init+0x218>)
 8001104:	f000 ff36 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001108:	2332      	movs	r3, #50	; 0x32
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001118:	230b      	movs	r3, #11
 800111a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800111c:	f107 031c 	add.w	r3, r7, #28
 8001120:	4619      	mov	r1, r3
 8001122:	4843      	ldr	r0, [pc, #268]	; (8001230 <MX_GPIO_Init+0x218>)
 8001124:	f000 ff26 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001128:	2386      	movs	r3, #134	; 0x86
 800112a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001134:	2303      	movs	r3, #3
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001138:	230b      	movs	r3, #11
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800113c:	f107 031c 	add.w	r3, r7, #28
 8001140:	4619      	mov	r1, r3
 8001142:	483c      	ldr	r0, [pc, #240]	; (8001234 <MX_GPIO_Init+0x21c>)
 8001144:	f000 ff16 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001148:	f244 0381 	movw	r3, #16513	; 0x4081
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4831      	ldr	r0, [pc, #196]	; (8001228 <MX_GPIO_Init+0x210>)
 8001162:	f000 ff07 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001166:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800116a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001178:	230b      	movs	r3, #11
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	4619      	mov	r1, r3
 8001182:	4829      	ldr	r0, [pc, #164]	; (8001228 <MX_GPIO_Init+0x210>)
 8001184:	f000 fef6 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001188:	2340      	movs	r3, #64	; 0x40
 800118a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001198:	f107 031c 	add.w	r3, r7, #28
 800119c:	4619      	mov	r1, r3
 800119e:	4823      	ldr	r0, [pc, #140]	; (800122c <MX_GPIO_Init+0x214>)
 80011a0:	f000 fee8 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80011a4:	2380      	movs	r3, #128	; 0x80
 80011a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a8:	2300      	movs	r3, #0
 80011aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80011b0:	f107 031c 	add.w	r3, r7, #28
 80011b4:	4619      	mov	r1, r3
 80011b6:	481d      	ldr	r0, [pc, #116]	; (800122c <MX_GPIO_Init+0x214>)
 80011b8:	f000 fedc 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80011bc:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c2:	2302      	movs	r3, #2
 80011c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ca:	2303      	movs	r3, #3
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80011ce:	230a      	movs	r3, #10
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d2:	f107 031c 	add.w	r3, r7, #28
 80011d6:	4619      	mov	r1, r3
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <MX_GPIO_Init+0x21c>)
 80011da:	f000 fecb 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80011de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4810      	ldr	r0, [pc, #64]	; (8001234 <MX_GPIO_Init+0x21c>)
 80011f4:	f000 febe 	bl	8001f74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80011f8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80011fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800120a:	230b      	movs	r3, #11
 800120c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800120e:	f107 031c 	add.w	r3, r7, #28
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_GPIO_Init+0x214>)
 8001216:	f000 fead 	bl	8001f74 <HAL_GPIO_Init>

}
 800121a:	bf00      	nop
 800121c:	3730      	adds	r7, #48	; 0x30
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40020400 	.word	0x40020400
 800122c:	40021800 	.word	0x40021800
 8001230:	40020800 	.word	0x40020800
 8001234:	40020000 	.word	0x40020000

08001238 <GPS_Init>:
	CDC_Transmit_FS((unsigned char *) buf, (uint16_t) strlen(buf));
}
#endif

void GPS_Init()
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 800123c:	2201      	movs	r2, #1
 800123e:	4903      	ldr	r1, [pc, #12]	; (800124c <GPS_Init+0x14>)
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <GPS_Init+0x18>)
 8001242:	f001 fdd4 	bl	8002dee <HAL_UART_Receive_IT>
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200001fc 	.word	0x200001fc
 8001250:	200002e0 	.word	0x200002e0

08001254 <GPS_UART_CallBack>:


void GPS_UART_CallBack(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <GPS_UART_CallBack+0x54>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b0a      	cmp	r3, #10
 800125e:	d010      	beq.n	8001282 <GPS_UART_CallBack+0x2e>
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <GPS_UART_CallBack+0x58>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	b25b      	sxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	db0b      	blt.n	8001282 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <GPS_UART_CallBack+0x58>)
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	b2d1      	uxtb	r1, r2
 8001272:	4a0e      	ldr	r2, [pc, #56]	; (80012ac <GPS_UART_CallBack+0x58>)
 8001274:	7011      	strb	r1, [r2, #0]
 8001276:	461a      	mov	r2, r3
 8001278:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <GPS_UART_CallBack+0x54>)
 800127a:	7819      	ldrb	r1, [r3, #0]
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <GPS_UART_CallBack+0x5c>)
 800127e:	5499      	strb	r1, [r3, r2]
 8001280:	e00a      	b.n	8001298 <GPS_UART_CallBack+0x44>
		#if (GPS_DEBUG == 1)
		GPS_print((char*)rx_buffer);
		#endif

		//if(GPS_validate((char*) rx_buffer))
			GPS_parse((char*) rx_buffer);
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <GPS_UART_CallBack+0x5c>)
 8001284:	f000 f818 	bl	80012b8 <GPS_parse>
		rx_index = 0;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <GPS_UART_CallBack+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800128e:	2280      	movs	r2, #128	; 0x80
 8001290:	2100      	movs	r1, #0
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <GPS_UART_CallBack+0x5c>)
 8001294:	f002 fd6e 	bl	8003d74 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001298:	2201      	movs	r2, #1
 800129a:	4903      	ldr	r1, [pc, #12]	; (80012a8 <GPS_UART_CallBack+0x54>)
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <GPS_UART_CallBack+0x60>)
 800129e:	f001 fda6 	bl	8002dee <HAL_UART_Receive_IT>
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	200001fc 	.word	0x200001fc
 80012ac:	20000280 	.word	0x20000280
 80012b0:	20000200 	.word	0x20000200
 80012b4:	200002e0 	.word	0x200002e0

080012b8 <GPS_parse>:
    sprintf(checkcalcstr,"%02X",calculated_check);
    return((checkcalcstr[0] == check[0])
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
}

void GPS_parse(char *GPSstrParse){
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af08      	add	r7, sp, #32
 80012be:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 80012c0:	2206      	movs	r2, #6
 80012c2:	494a      	ldr	r1, [pc, #296]	; (80013ec <GPS_parse+0x134>)
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f003 fc86 	bl	8004bd6 <strncmp>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d137      	bne.n	8001340 <GPS_parse+0x88>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){ // @suppress("Float formatting support")
 80012d0:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <GPS_parse+0x138>)
 80012d2:	9307      	str	r3, [sp, #28]
 80012d4:	4b47      	ldr	r3, [pc, #284]	; (80013f4 <GPS_parse+0x13c>)
 80012d6:	9306      	str	r3, [sp, #24]
 80012d8:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <GPS_parse+0x140>)
 80012da:	9305      	str	r3, [sp, #20]
 80012dc:	4b47      	ldr	r3, [pc, #284]	; (80013fc <GPS_parse+0x144>)
 80012de:	9304      	str	r3, [sp, #16]
 80012e0:	4b47      	ldr	r3, [pc, #284]	; (8001400 <GPS_parse+0x148>)
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	4b47      	ldr	r3, [pc, #284]	; (8001404 <GPS_parse+0x14c>)
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <GPS_parse+0x150>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	4b47      	ldr	r3, [pc, #284]	; (800140c <GPS_parse+0x154>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	4b47      	ldr	r3, [pc, #284]	; (8001410 <GPS_parse+0x158>)
 80012f2:	4a48      	ldr	r2, [pc, #288]	; (8001414 <GPS_parse+0x15c>)
 80012f4:	4948      	ldr	r1, [pc, #288]	; (8001418 <GPS_parse+0x160>)
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f003 fbfc 	bl	8004af4 <siscanf>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	dd70      	ble.n	80013e4 <GPS_parse+0x12c>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001302:	4b46      	ldr	r3, [pc, #280]	; (800141c <GPS_parse+0x164>)
 8001304:	edd3 7a04 	vldr	s15, [r3, #16]
 8001308:	4b44      	ldr	r3, [pc, #272]	; (800141c <GPS_parse+0x164>)
 800130a:	7e1b      	ldrb	r3, [r3, #24]
 800130c:	4618      	mov	r0, r3
 800130e:	eeb0 0a67 	vmov.f32	s0, s15
 8001312:	f000 f8a7 	bl	8001464 <GPS_nmea_to_dec>
 8001316:	eef0 7a40 	vmov.f32	s15, s0
 800131a:	4b40      	ldr	r3, [pc, #256]	; (800141c <GPS_parse+0x164>)
 800131c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001320:	4b3e      	ldr	r3, [pc, #248]	; (800141c <GPS_parse+0x164>)
 8001322:	edd3 7a03 	vldr	s15, [r3, #12]
 8001326:	4b3d      	ldr	r3, [pc, #244]	; (800141c <GPS_parse+0x164>)
 8001328:	7e5b      	ldrb	r3, [r3, #25]
 800132a:	4618      	mov	r0, r3
 800132c:	eeb0 0a67 	vmov.f32	s0, s15
 8001330:	f000 f898 	bl	8001464 <GPS_nmea_to_dec>
 8001334:	eef0 7a40 	vmov.f32	s15, s0
 8001338:	4b38      	ldr	r3, [pc, #224]	; (800141c <GPS_parse+0x164>)
 800133a:	edc3 7a00 	vstr	s15, [r3]
    		return;
 800133e:	e051      	b.n	80013e4 <GPS_parse+0x12c>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 8001340:	2206      	movs	r2, #6
 8001342:	4937      	ldr	r1, [pc, #220]	; (8001420 <GPS_parse+0x168>)
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f003 fc46 	bl	8004bd6 <strncmp>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d114      	bne.n	800137a <GPS_parse+0xc2>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1) // @suppress("Float formatting support")
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <GPS_parse+0x16c>)
 8001352:	9305      	str	r3, [sp, #20]
 8001354:	4b34      	ldr	r3, [pc, #208]	; (8001428 <GPS_parse+0x170>)
 8001356:	9304      	str	r3, [sp, #16]
 8001358:	4b34      	ldr	r3, [pc, #208]	; (800142c <GPS_parse+0x174>)
 800135a:	9303      	str	r3, [sp, #12]
 800135c:	4b29      	ldr	r3, [pc, #164]	; (8001404 <GPS_parse+0x14c>)
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	4b29      	ldr	r3, [pc, #164]	; (8001408 <GPS_parse+0x150>)
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	4b29      	ldr	r3, [pc, #164]	; (800140c <GPS_parse+0x154>)
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	4b29      	ldr	r3, [pc, #164]	; (8001410 <GPS_parse+0x158>)
 800136a:	4a2a      	ldr	r2, [pc, #168]	; (8001414 <GPS_parse+0x15c>)
 800136c:	4930      	ldr	r1, [pc, #192]	; (8001430 <GPS_parse+0x178>)
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f003 fbc0 	bl	8004af4 <siscanf>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	e034      	b.n	80013e4 <GPS_parse+0x12c>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 800137a:	2206      	movs	r2, #6
 800137c:	492d      	ldr	r1, [pc, #180]	; (8001434 <GPS_parse+0x17c>)
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f003 fc29 	bl	8004bd6 <strncmp>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d110      	bne.n	80013ac <GPS_parse+0xf4>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1) // @suppress("Float formatting support")
 800138a:	4b2b      	ldr	r3, [pc, #172]	; (8001438 <GPS_parse+0x180>)
 800138c:	9303      	str	r3, [sp, #12]
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <GPS_parse+0x15c>)
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <GPS_parse+0x14c>)
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	4b1c      	ldr	r3, [pc, #112]	; (8001408 <GPS_parse+0x150>)
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	4b1c      	ldr	r3, [pc, #112]	; (800140c <GPS_parse+0x154>)
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <GPS_parse+0x158>)
 800139e:	4927      	ldr	r1, [pc, #156]	; (800143c <GPS_parse+0x184>)
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f003 fba7 	bl	8004af4 <siscanf>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	e01b      	b.n	80013e4 <GPS_parse+0x12c>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 80013ac:	2206      	movs	r2, #6
 80013ae:	4924      	ldr	r1, [pc, #144]	; (8001440 <GPS_parse+0x188>)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f003 fc10 	bl	8004bd6 <strncmp>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d113      	bne.n	80013e4 <GPS_parse+0x12c>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1) // @suppress("Float formatting support")
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <GPS_parse+0x18c>)
 80013be:	9305      	str	r3, [sp, #20]
 80013c0:	4b21      	ldr	r3, [pc, #132]	; (8001448 <GPS_parse+0x190>)
 80013c2:	9304      	str	r3, [sp, #16]
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <GPS_parse+0x194>)
 80013c6:	9303      	str	r3, [sp, #12]
 80013c8:	4b18      	ldr	r3, [pc, #96]	; (800142c <GPS_parse+0x174>)
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b20      	ldr	r3, [pc, #128]	; (8001450 <GPS_parse+0x198>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	4b20      	ldr	r3, [pc, #128]	; (8001454 <GPS_parse+0x19c>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <GPS_parse+0x1a0>)
 80013d6:	4a21      	ldr	r2, [pc, #132]	; (800145c <GPS_parse+0x1a4>)
 80013d8:	4921      	ldr	r1, [pc, #132]	; (8001460 <GPS_parse+0x1a8>)
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f003 fb8a 	bl	8004af4 <siscanf>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
            return;
    }
}
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	08008f28 	.word	0x08008f28
 80013f0:	200002b0 	.word	0x200002b0
 80013f4:	200002ac 	.word	0x200002ac
 80013f8:	200002a8 	.word	0x200002a8
 80013fc:	200002a4 	.word	0x200002a4
 8001400:	200002a0 	.word	0x200002a0
 8001404:	2000029d 	.word	0x2000029d
 8001408:	20000290 	.word	0x20000290
 800140c:	2000029c 	.word	0x2000029c
 8001410:	20000294 	.word	0x20000294
 8001414:	20000298 	.word	0x20000298
 8001418:	08008f30 	.word	0x08008f30
 800141c:	20000284 	.word	0x20000284
 8001420:	08008f58 	.word	0x08008f58
 8001424:	200002bc 	.word	0x200002bc
 8001428:	200002b8 	.word	0x200002b8
 800142c:	200002b4 	.word	0x200002b4
 8001430:	08008f60 	.word	0x08008f60
 8001434:	08008f80 	.word	0x08008f80
 8001438:	200002c0 	.word	0x200002c0
 800143c:	08008f88 	.word	0x08008f88
 8001440:	08008fa4 	.word	0x08008fa4
 8001444:	200002d8 	.word	0x200002d8
 8001448:	200002d4 	.word	0x200002d4
 800144c:	200002d1 	.word	0x200002d1
 8001450:	200002d0 	.word	0x200002d0
 8001454:	200002cc 	.word	0x200002cc
 8001458:	200002c8 	.word	0x200002c8
 800145c:	200002c4 	.word	0x200002c4
 8001460:	08008fac 	.word	0x08008fac

08001464 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 8001464:	b480      	push	{r7}
 8001466:	b087      	sub	sp, #28
 8001468:	af00      	add	r7, sp, #0
 800146a:	ed87 0a01 	vstr	s0, [r7, #4]
 800146e:	4603      	mov	r3, r0
 8001470:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001472:	ed97 7a01 	vldr	s14, [r7, #4]
 8001476:	eddf 6a20 	vldr	s13, [pc, #128]	; 80014f8 <GPS_nmea_to_dec+0x94>
 800147a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800147e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001482:	ee17 3a90 	vmov	r3, s15
 8001486:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	2264      	movs	r2, #100	; 0x64
 800148c:	fb02 f303 	mul.w	r3, r2, r3
 8001490:	ee07 3a90 	vmov	s15, r3
 8001494:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001498:	ed97 7a01 	vldr	s14, [r7, #4]
 800149c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014a0:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 80014a4:	ed97 7a03 	vldr	s14, [r7, #12]
 80014a8:	eddf 6a14 	vldr	s13, [pc, #80]	; 80014fc <GPS_nmea_to_dec+0x98>
 80014ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014b0:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	ee07 3a90 	vmov	s15, r3
 80014ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014be:	ed97 7a02 	vldr	s14, [r7, #8]
 80014c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014c6:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	2b53      	cmp	r3, #83	; 0x53
 80014ce:	d002      	beq.n	80014d6 <GPS_nmea_to_dec+0x72>
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	2b57      	cmp	r3, #87	; 0x57
 80014d4:	d105      	bne.n	80014e2 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 80014d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80014da:	eef1 7a67 	vneg.f32	s15, s15
 80014de:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	ee07 3a90 	vmov	s15, r3
}
 80014e8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	42c80000 	.word	0x42c80000
 80014fc:	42700000 	.word	0x42700000

08001500 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a04      	ldr	r2, [pc, #16]	; (800151c <HAL_UART_RxCpltCallback+0x1c>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d101      	bne.n	8001514 <HAL_UART_RxCpltCallback+0x14>
		GPS_UART_CallBack();
 8001510:	f7ff fea0 	bl	8001254 <GPS_UART_CallBack>
	}
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200002e0 	.word	0x200002e0

08001520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001520:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001524:	b084      	sub	sp, #16
 8001526:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001528:	f000 faea 	bl	8001b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800152c:	f000 f830 	bl	8001590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001530:	f7ff fd72 	bl	8001018 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001534:	f000 fa0c 	bl	8001950 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8001538:	f000 f9e0 	bl	80018fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init();
 800153c:	f7ff fe7c 	bl	8001238 <GPS_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_Delay(1000);
 8001540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001544:	f000 fb4e 	bl	8001be4 <HAL_Delay>
	  printf("%.f,%f,%f\r\n", GPS.utc_time, GPS.dec_latitude, GPS.dec_longitude);
 8001548:	4b0f      	ldr	r3, [pc, #60]	; (8001588 <main+0x68>)
 800154a:	695b      	ldr	r3, [r3, #20]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f80b 	bl	8000568 <__aeabi_f2d>
 8001552:	4680      	mov	r8, r0
 8001554:	4689      	mov	r9, r1
 8001556:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <main+0x68>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff f804 	bl	8000568 <__aeabi_f2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	4b08      	ldr	r3, [pc, #32]	; (8001588 <main+0x68>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe fffd 	bl	8000568 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001576:	e9cd 4500 	strd	r4, r5, [sp]
 800157a:	4642      	mov	r2, r8
 800157c:	464b      	mov	r3, r9
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <main+0x6c>)
 8001580:	f003 fa7a 	bl	8004a78 <iprintf>
  {
 8001584:	e7dc      	b.n	8001540 <main+0x20>
 8001586:	bf00      	nop
 8001588:	20000284 	.word	0x20000284
 800158c:	08008fcc 	.word	0x08008fcc

08001590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b094      	sub	sp, #80	; 0x50
 8001594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001596:	f107 0320 	add.w	r3, r7, #32
 800159a:	2230      	movs	r2, #48	; 0x30
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 fbe8 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a4:	f107 030c 	add.w	r3, r7, #12
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b4:	2300      	movs	r3, #0
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	4b28      	ldr	r3, [pc, #160]	; (800165c <SystemClock_Config+0xcc>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	4a27      	ldr	r2, [pc, #156]	; (800165c <SystemClock_Config+0xcc>)
 80015be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c2:	6413      	str	r3, [r2, #64]	; 0x40
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <SystemClock_Config+0xcc>)
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015d0:	2300      	movs	r3, #0
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	4b22      	ldr	r3, [pc, #136]	; (8001660 <SystemClock_Config+0xd0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a21      	ldr	r2, [pc, #132]	; (8001660 <SystemClock_Config+0xd0>)
 80015da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015de:	6013      	str	r3, [r2, #0]
 80015e0:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <SystemClock_Config+0xd0>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e8:	607b      	str	r3, [r7, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015f4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f6:	2302      	movs	r3, #2
 80015f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001600:	2304      	movs	r3, #4
 8001602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001604:	23a8      	movs	r3, #168	; 0xa8
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001608:	2302      	movs	r3, #2
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800160c:	2307      	movs	r3, #7
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 0320 	add.w	r3, r7, #32
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fe73 	bl	8002300 <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001620:	f000 f832 	bl	8001688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001624:	230f      	movs	r3, #15
 8001626:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001628:	2302      	movs	r3, #2
 800162a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001630:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001634:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800163a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	2105      	movs	r1, #5
 8001642:	4618      	mov	r0, r3
 8001644:	f001 f8d4 	bl	80027f0 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800164e:	f000 f81b 	bl	8001688 <Error_Handler>
  }
}
 8001652:	bf00      	nop
 8001654:	3750      	adds	r7, #80	; 0x50
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40023800 	.word	0x40023800
 8001660:	40007000 	.word	0x40007000

08001664 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800166c:	1d39      	adds	r1, r7, #4
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	2201      	movs	r2, #1
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <__io_putchar+0x20>)
 8001676:	f001 fb28 	bl	8002cca <HAL_UART_Transmit>

  return ch;
 800167a:	687b      	ldr	r3, [r7, #4]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3708      	adds	r7, #8
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000324 	.word	0x20000324

08001688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800168c:	b672      	cpsid	i
}
 800168e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001690:	e7fe      	b.n	8001690 <Error_Handler+0x8>
	...

08001694 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_MspInit+0x4c>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_MspInit+0x4c>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	607b      	str	r3, [r7, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	603b      	str	r3, [r7, #0]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_MspInit+0x4c>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ce:	603b      	str	r3, [r7, #0]
 80016d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	40023800 	.word	0x40023800

080016e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <NMI_Handler+0x4>

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 fa38 	bl	8001ba4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <USART2_IRQHandler+0x10>)
 800173e:	f001 fb87 	bl	8002e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200002e0 	.word	0x200002e0

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr

0800175c <_kill>:

int _kill(int pid, int sig)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001766:	f002 fadb 	bl	8003d20 <__errno>
 800176a:	4603      	mov	r3, r0
 800176c:	2216      	movs	r2, #22
 800176e:	601a      	str	r2, [r3, #0]
	return -1;
 8001770:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <_exit>:

void _exit (int status)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001784:	f04f 31ff 	mov.w	r1, #4294967295
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff ffe7 	bl	800175c <_kill>
	while (1) {}		/* Make sure we hang here */
 800178e:	e7fe      	b.n	800178e <_exit+0x12>

08001790 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b086      	sub	sp, #24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179c:	2300      	movs	r3, #0
 800179e:	617b      	str	r3, [r7, #20]
 80017a0:	e00a      	b.n	80017b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017a2:	f3af 8000 	nop.w
 80017a6:	4601      	mov	r1, r0
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	1c5a      	adds	r2, r3, #1
 80017ac:	60ba      	str	r2, [r7, #8]
 80017ae:	b2ca      	uxtb	r2, r1
 80017b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf0      	blt.n	80017a2 <_read+0x12>
	}

return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	60f8      	str	r0, [r7, #12]
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	617b      	str	r3, [r7, #20]
 80017da:	e009      	b.n	80017f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	1c5a      	adds	r2, r3, #1
 80017e0:	60ba      	str	r2, [r7, #8]
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff3d 	bl	8001664 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3301      	adds	r3, #1
 80017ee:	617b      	str	r3, [r7, #20]
 80017f0:	697a      	ldr	r2, [r7, #20]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	dbf1      	blt.n	80017dc <_write+0x12>
	}
	return len;
 80017f8:	687b      	ldr	r3, [r7, #4]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <_close>:

int _close(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	return -1;
 800180a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180e:	4618      	mov	r0, r3
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800181a:	b480      	push	{r7}
 800181c:	b083      	sub	sp, #12
 800181e:	af00      	add	r7, sp, #0
 8001820:	6078      	str	r0, [r7, #4]
 8001822:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800182a:	605a      	str	r2, [r3, #4]
	return 0;
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <_isatty>:

int _isatty(int file)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
	return 1;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
	return 0;
 800185c:	2300      	movs	r3, #0
}
 800185e:	4618      	mov	r0, r3
 8001860:	3714      	adds	r7, #20
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
	...

0800186c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b086      	sub	sp, #24
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <_sbrk+0x5c>)
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <_sbrk+0x60>)
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001880:	4b13      	ldr	r3, [pc, #76]	; (80018d0 <_sbrk+0x64>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d102      	bne.n	800188e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <_sbrk+0x64>)
 800188a:	4a12      	ldr	r2, [pc, #72]	; (80018d4 <_sbrk+0x68>)
 800188c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <_sbrk+0x64>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4413      	add	r3, r2
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	429a      	cmp	r2, r3
 800189a:	d207      	bcs.n	80018ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800189c:	f002 fa40 	bl	8003d20 <__errno>
 80018a0:	4603      	mov	r3, r0
 80018a2:	220c      	movs	r2, #12
 80018a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018a6:	f04f 33ff 	mov.w	r3, #4294967295
 80018aa:	e009      	b.n	80018c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b2:	4b07      	ldr	r3, [pc, #28]	; (80018d0 <_sbrk+0x64>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4413      	add	r3, r2
 80018ba:	4a05      	ldr	r2, [pc, #20]	; (80018d0 <_sbrk+0x64>)
 80018bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20030000 	.word	0x20030000
 80018cc:	00000400 	.word	0x00000400
 80018d0:	200002dc 	.word	0x200002dc
 80018d4:	20000380 	.word	0x20000380

080018d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <SystemInit+0x20>)
 80018de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018e2:	4a05      	ldr	r2, [pc, #20]	; (80018f8 <SystemInit+0x20>)
 80018e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	e000ed00 	.word	0xe000ed00

080018fc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001900:	4b11      	ldr	r3, [pc, #68]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001902:	4a12      	ldr	r2, [pc, #72]	; (800194c <MX_USART2_UART_Init+0x50>)
 8001904:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001906:	4b10      	ldr	r3, [pc, #64]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001908:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800190c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001910:	2200      	movs	r2, #0
 8001912:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001916:	2200      	movs	r2, #0
 8001918:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800191a:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001920:	4b09      	ldr	r3, [pc, #36]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001922:	220c      	movs	r2, #12
 8001924:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001926:	4b08      	ldr	r3, [pc, #32]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 800192e:	2200      	movs	r2, #0
 8001930:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001932:	4805      	ldr	r0, [pc, #20]	; (8001948 <MX_USART2_UART_Init+0x4c>)
 8001934:	f001 f97c 	bl	8002c30 <HAL_UART_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800193e:	f7ff fea3 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200002e0 	.word	0x200002e0
 800194c:	40004400 	.word	0x40004400

08001950 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_USART3_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_USART3_UART_Init+0x4c>)
 800195c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001960:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_USART3_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_USART3_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_USART3_UART_Init+0x4c>)
 8001988:	f001 f952 	bl	8002c30 <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001992:	f7ff fe79 	bl	8001688 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000324 	.word	0x20000324
 80019a0:	40004800 	.word	0x40004800

080019a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a36      	ldr	r2, [pc, #216]	; (8001a9c <HAL_UART_MspInit+0xf8>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d134      	bne.n	8001a30 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	4b35      	ldr	r3, [pc, #212]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a34      	ldr	r2, [pc, #208]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 80019d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b32      	ldr	r3, [pc, #200]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a2d      	ldr	r2, [pc, #180]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 80019ec:	f043 0308 	orr.w	r3, r3, #8
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019fe:	2360      	movs	r3, #96	; 0x60
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a0e:	2307      	movs	r3, #7
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	4822      	ldr	r0, [pc, #136]	; (8001aa4 <HAL_UART_MspInit+0x100>)
 8001a1a:	f000 faab 	bl	8001f74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	2026      	movs	r0, #38	; 0x26
 8001a24:	f000 f9dd 	bl	8001de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a28:	2026      	movs	r0, #38	; 0x26
 8001a2a:	f000 f9f6 	bl	8001e1a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a2e:	e031      	b.n	8001a94 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART3)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_UART_MspInit+0x104>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d12c      	bne.n	8001a94 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 8001a44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b11      	ldr	r3, [pc, #68]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 8001a60:	f043 0308 	orr.w	r3, r3, #8
 8001a64:	6313      	str	r3, [r2, #48]	; 0x30
 8001a66:	4b0e      	ldr	r3, [pc, #56]	; (8001aa0 <HAL_UART_MspInit+0xfc>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a80:	2303      	movs	r3, #3
 8001a82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a84:	2307      	movs	r3, #7
 8001a86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 031c 	add.w	r3, r7, #28
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <HAL_UART_MspInit+0x100>)
 8001a90:	f000 fa70 	bl	8001f74 <HAL_GPIO_Init>
}
 8001a94:	bf00      	nop
 8001a96:	3730      	adds	r7, #48	; 0x30
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40004400 	.word	0x40004400
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40020c00 	.word	0x40020c00
 8001aa8:	40004800 	.word	0x40004800

08001aac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ae4 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ab0:	480d      	ldr	r0, [pc, #52]	; (8001ae8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ab2:	490e      	ldr	r1, [pc, #56]	; (8001aec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	; (8001af0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ab8:	e002      	b.n	8001ac0 <LoopCopyDataInit>

08001aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001abe:	3304      	adds	r3, #4

08001ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ac4:	d3f9      	bcc.n	8001aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ac8:	4c0b      	ldr	r4, [pc, #44]	; (8001af8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001acc:	e001      	b.n	8001ad2 <LoopFillZerobss>

08001ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ad0:	3204      	adds	r2, #4

08001ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ad4:	d3fb      	bcc.n	8001ace <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad6:	f7ff feff 	bl	80018d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ada:	f002 f927 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ade:	f7ff fd1f 	bl	8001520 <main>
  bx  lr    
 8001ae2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ae4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aec:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001af0:	080094cc 	.word	0x080094cc
  ldr r2, =_sbss
 8001af4:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001af8:	2000037c 	.word	0x2000037c

08001afc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001afc:	e7fe      	b.n	8001afc <ADC_IRQHandler>
	...

08001b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_Init+0x40>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <HAL_Init+0x40>)
 8001b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <HAL_Init+0x40>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a0a      	ldr	r2, [pc, #40]	; (8001b40 <HAL_Init+0x40>)
 8001b16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b1c:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a07      	ldr	r2, [pc, #28]	; (8001b40 <HAL_Init+0x40>)
 8001b22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b28:	2003      	movs	r0, #3
 8001b2a:	f000 f94f 	bl	8001dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b2e:	2000      	movs	r0, #0
 8001b30:	f000 f808 	bl	8001b44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b34:	f7ff fdae 	bl	8001694 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023c00 	.word	0x40023c00

08001b44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b4c:	4b12      	ldr	r3, [pc, #72]	; (8001b98 <HAL_InitTick+0x54>)
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <HAL_InitTick+0x58>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f000 f967 	bl	8001e36 <HAL_SYSTICK_Config>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e00e      	b.n	8001b90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2b0f      	cmp	r3, #15
 8001b76:	d80a      	bhi.n	8001b8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	6879      	ldr	r1, [r7, #4]
 8001b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b80:	f000 f92f 	bl	8001de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b84:	4a06      	ldr	r2, [pc, #24]	; (8001ba0 <HAL_InitTick+0x5c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e000      	b.n	8001b90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3708      	adds	r7, #8
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20000000 	.word	0x20000000
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x20>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <HAL_IncTick+0x24>)
 8001bb6:	6013      	str	r3, [r2, #0]
}
 8001bb8:	bf00      	nop
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000008 	.word	0x20000008
 8001bc8:	20000368 	.word	0x20000368

08001bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return uwTick;
 8001bd0:	4b03      	ldr	r3, [pc, #12]	; (8001be0 <HAL_GetTick+0x14>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000368 	.word	0x20000368

08001be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001bec:	f7ff ffee 	bl	8001bcc <HAL_GetTick>
 8001bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bfc:	d005      	beq.n	8001c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001bfe:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_Delay+0x44>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	461a      	mov	r2, r3
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	4413      	add	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c0a:	bf00      	nop
 8001c0c:	f7ff ffde 	bl	8001bcc <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	68fa      	ldr	r2, [r7, #12]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d8f7      	bhi.n	8001c0c <HAL_Delay+0x28>
  {
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000008 	.word	0x20000008

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	db0b      	blt.n	8001cba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	f003 021f 	and.w	r2, r3, #31
 8001ca8:	4907      	ldr	r1, [pc, #28]	; (8001cc8 <__NVIC_EnableIRQ+0x38>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	095b      	lsrs	r3, r3, #5
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	e000e100 	.word	0xe000e100

08001ccc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	db0a      	blt.n	8001cf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	490c      	ldr	r1, [pc, #48]	; (8001d18 <__NVIC_SetPriority+0x4c>)
 8001ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cea:	0112      	lsls	r2, r2, #4
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	440b      	add	r3, r1
 8001cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cf4:	e00a      	b.n	8001d0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4908      	ldr	r1, [pc, #32]	; (8001d1c <__NVIC_SetPriority+0x50>)
 8001cfc:	79fb      	ldrb	r3, [r7, #7]
 8001cfe:	f003 030f 	and.w	r3, r3, #15
 8001d02:	3b04      	subs	r3, #4
 8001d04:	0112      	lsls	r2, r2, #4
 8001d06:	b2d2      	uxtb	r2, r2
 8001d08:	440b      	add	r3, r1
 8001d0a:	761a      	strb	r2, [r3, #24]
}
 8001d0c:	bf00      	nop
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b089      	sub	sp, #36	; 0x24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f1c3 0307 	rsb	r3, r3, #7
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	bf28      	it	cs
 8001d3e:	2304      	movcs	r3, #4
 8001d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	3304      	adds	r3, #4
 8001d46:	2b06      	cmp	r3, #6
 8001d48:	d902      	bls.n	8001d50 <NVIC_EncodePriority+0x30>
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3b03      	subs	r3, #3
 8001d4e:	e000      	b.n	8001d52 <NVIC_EncodePriority+0x32>
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d54:	f04f 32ff 	mov.w	r2, #4294967295
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43da      	mvns	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	401a      	ands	r2, r3
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	f04f 31ff 	mov.w	r1, #4294967295
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d72:	43d9      	mvns	r1, r3
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d78:	4313      	orrs	r3, r2
         );
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3724      	adds	r7, #36	; 0x24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d98:	d301      	bcc.n	8001d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e00f      	b.n	8001dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d9e:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <SysTick_Config+0x40>)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	3b01      	subs	r3, #1
 8001da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001da6:	210f      	movs	r1, #15
 8001da8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dac:	f7ff ff8e 	bl	8001ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <SysTick_Config+0x40>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001db6:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <SysTick_Config+0x40>)
 8001db8:	2207      	movs	r2, #7
 8001dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	e000e010 	.word	0xe000e010

08001dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff ff29 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001dda:	bf00      	nop
 8001ddc:	3708      	adds	r7, #8
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}

08001de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001de2:	b580      	push	{r7, lr}
 8001de4:	b086      	sub	sp, #24
 8001de6:	af00      	add	r7, sp, #0
 8001de8:	4603      	mov	r3, r0
 8001dea:	60b9      	str	r1, [r7, #8]
 8001dec:	607a      	str	r2, [r7, #4]
 8001dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001df4:	f7ff ff3e 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	6978      	ldr	r0, [r7, #20]
 8001e00:	f7ff ff8e 	bl	8001d20 <NVIC_EncodePriority>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e0a:	4611      	mov	r1, r2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff ff5d 	bl	8001ccc <__NVIC_SetPriority>
}
 8001e12:	bf00      	nop
 8001e14:	3718      	adds	r7, #24
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b082      	sub	sp, #8
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	4603      	mov	r3, r0
 8001e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff ff31 	bl	8001c90 <__NVIC_EnableIRQ>
}
 8001e2e:	bf00      	nop
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff ffa2 	bl	8001d88 <SysTick_Config>
 8001e44:	4603      	mov	r3, r0
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b084      	sub	sp, #16
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e5c:	f7ff feb6 	bl	8001bcc <HAL_GetTick>
 8001e60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d008      	beq.n	8001e80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2280      	movs	r2, #128	; 0x80
 8001e72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e052      	b.n	8001f26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f022 0216 	bic.w	r2, r2, #22
 8001e8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d103      	bne.n	8001eb0 <HAL_DMA_Abort+0x62>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f022 0208 	bic.w	r2, r2, #8
 8001ebe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ed0:	e013      	b.n	8001efa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ed2:	f7ff fe7b 	bl	8001bcc <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d90c      	bls.n	8001efa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2203      	movs	r2, #3
 8001eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e015      	b.n	8001f26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d1e4      	bne.n	8001ed2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	223f      	movs	r2, #63	; 0x3f
 8001f0e:	409a      	lsls	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3710      	adds	r7, #16
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f2e:	b480      	push	{r7}
 8001f30:	b083      	sub	sp, #12
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d004      	beq.n	8001f4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2280      	movs	r2, #128	; 0x80
 8001f46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e00c      	b.n	8001f66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2205      	movs	r2, #5
 8001f50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
	...

08001f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b089      	sub	sp, #36	; 0x24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61fb      	str	r3, [r7, #28]
 8001f8e:	e177      	b.n	8002280 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f90:	2201      	movs	r2, #1
 8001f92:	69fb      	ldr	r3, [r7, #28]
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	697a      	ldr	r2, [r7, #20]
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fa4:	693a      	ldr	r2, [r7, #16]
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	f040 8166 	bne.w	800227a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d005      	beq.n	8001fc6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d130      	bne.n	8002028 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68da      	ldr	r2, [r3, #12]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	fa02 f303 	lsl.w	r3, r2, r3
 8002004:	43db      	mvns	r3, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4013      	ands	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 0201 	and.w	r2, r3, #1
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	2b03      	cmp	r3, #3
 8002032:	d017      	beq.n	8002064 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	2203      	movs	r2, #3
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	005b      	lsls	r3, r3, #1
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0303 	and.w	r3, r3, #3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d123      	bne.n	80020b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	08da      	lsrs	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3208      	adds	r2, #8
 8002078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	220f      	movs	r2, #15
 8002088:	fa02 f303 	lsl.w	r3, r2, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4013      	ands	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f003 0307 	and.w	r3, r3, #7
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	69b9      	ldr	r1, [r7, #24]
 80020b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	2203      	movs	r2, #3
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 0203 	and.w	r2, r3, #3
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	f000 80c0 	beq.w	800227a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b66      	ldr	r3, [pc, #408]	; (8002298 <HAL_GPIO_Init+0x324>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	4a65      	ldr	r2, [pc, #404]	; (8002298 <HAL_GPIO_Init+0x324>)
 8002104:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002108:	6453      	str	r3, [r2, #68]	; 0x44
 800210a:	4b63      	ldr	r3, [pc, #396]	; (8002298 <HAL_GPIO_Init+0x324>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002116:	4a61      	ldr	r2, [pc, #388]	; (800229c <HAL_GPIO_Init+0x328>)
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002122:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	220f      	movs	r2, #15
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_GPIO_Init+0x32c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d037      	beq.n	80021b2 <HAL_GPIO_Init+0x23e>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a57      	ldr	r2, [pc, #348]	; (80022a4 <HAL_GPIO_Init+0x330>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d031      	beq.n	80021ae <HAL_GPIO_Init+0x23a>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a56      	ldr	r2, [pc, #344]	; (80022a8 <HAL_GPIO_Init+0x334>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d02b      	beq.n	80021aa <HAL_GPIO_Init+0x236>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a55      	ldr	r2, [pc, #340]	; (80022ac <HAL_GPIO_Init+0x338>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d025      	beq.n	80021a6 <HAL_GPIO_Init+0x232>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a54      	ldr	r2, [pc, #336]	; (80022b0 <HAL_GPIO_Init+0x33c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01f      	beq.n	80021a2 <HAL_GPIO_Init+0x22e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a53      	ldr	r2, [pc, #332]	; (80022b4 <HAL_GPIO_Init+0x340>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d019      	beq.n	800219e <HAL_GPIO_Init+0x22a>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a52      	ldr	r2, [pc, #328]	; (80022b8 <HAL_GPIO_Init+0x344>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d013      	beq.n	800219a <HAL_GPIO_Init+0x226>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a51      	ldr	r2, [pc, #324]	; (80022bc <HAL_GPIO_Init+0x348>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d00d      	beq.n	8002196 <HAL_GPIO_Init+0x222>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_GPIO_Init+0x34c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d007      	beq.n	8002192 <HAL_GPIO_Init+0x21e>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a4f      	ldr	r2, [pc, #316]	; (80022c4 <HAL_GPIO_Init+0x350>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d101      	bne.n	800218e <HAL_GPIO_Init+0x21a>
 800218a:	2309      	movs	r3, #9
 800218c:	e012      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 800218e:	230a      	movs	r3, #10
 8002190:	e010      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 8002192:	2308      	movs	r3, #8
 8002194:	e00e      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 8002196:	2307      	movs	r3, #7
 8002198:	e00c      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 800219a:	2306      	movs	r3, #6
 800219c:	e00a      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 800219e:	2305      	movs	r3, #5
 80021a0:	e008      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021a2:	2304      	movs	r3, #4
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021a6:	2303      	movs	r3, #3
 80021a8:	e004      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021aa:	2302      	movs	r3, #2
 80021ac:	e002      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <HAL_GPIO_Init+0x240>
 80021b2:	2300      	movs	r3, #0
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	f002 0203 	and.w	r2, r2, #3
 80021ba:	0092      	lsls	r2, r2, #2
 80021bc:	4093      	lsls	r3, r2
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021c4:	4935      	ldr	r1, [pc, #212]	; (800229c <HAL_GPIO_Init+0x328>)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	089b      	lsrs	r3, r3, #2
 80021ca:	3302      	adds	r3, #2
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021d2:	4b3d      	ldr	r3, [pc, #244]	; (80022c8 <HAL_GPIO_Init+0x354>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021f6:	4a34      	ldr	r2, [pc, #208]	; (80022c8 <HAL_GPIO_Init+0x354>)
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021fc:	4b32      	ldr	r3, [pc, #200]	; (80022c8 <HAL_GPIO_Init+0x354>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	4313      	orrs	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002220:	4a29      	ldr	r2, [pc, #164]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002226:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d003      	beq.n	800224a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	4313      	orrs	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800224a:	4a1f      	ldr	r2, [pc, #124]	; (80022c8 <HAL_GPIO_Init+0x354>)
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	43db      	mvns	r3, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4013      	ands	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d003      	beq.n	8002274 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002274:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <HAL_GPIO_Init+0x354>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3301      	adds	r3, #1
 800227e:	61fb      	str	r3, [r7, #28]
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	2b0f      	cmp	r3, #15
 8002284:	f67f ae84 	bls.w	8001f90 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002288:	bf00      	nop
 800228a:	bf00      	nop
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40023800 	.word	0x40023800
 800229c:	40013800 	.word	0x40013800
 80022a0:	40020000 	.word	0x40020000
 80022a4:	40020400 	.word	0x40020400
 80022a8:	40020800 	.word	0x40020800
 80022ac:	40020c00 	.word	0x40020c00
 80022b0:	40021000 	.word	0x40021000
 80022b4:	40021400 	.word	0x40021400
 80022b8:	40021800 	.word	0x40021800
 80022bc:	40021c00 	.word	0x40021c00
 80022c0:	40022000 	.word	0x40022000
 80022c4:	40022400 	.word	0x40022400
 80022c8:	40013c00 	.word	0x40013c00

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022e8:	e003      	b.n	80022f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	041a      	lsls	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	619a      	str	r2, [r3, #24]
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e267      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d075      	beq.n	800240a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d00c      	beq.n	8002344 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002332:	2b08      	cmp	r3, #8
 8002334:	d112      	bne.n	800235c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002336:	4b82      	ldr	r3, [pc, #520]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002342:	d10b      	bne.n	800235c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002344:	4b7e      	ldr	r3, [pc, #504]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d05b      	beq.n	8002408 <HAL_RCC_OscConfig+0x108>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d157      	bne.n	8002408 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e242      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002364:	d106      	bne.n	8002374 <HAL_RCC_OscConfig+0x74>
 8002366:	4b76      	ldr	r3, [pc, #472]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a75      	ldr	r2, [pc, #468]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	e01d      	b.n	80023b0 <HAL_RCC_OscConfig+0xb0>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800237c:	d10c      	bne.n	8002398 <HAL_RCC_OscConfig+0x98>
 800237e:	4b70      	ldr	r3, [pc, #448]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a6f      	ldr	r2, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002384:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	4b6d      	ldr	r3, [pc, #436]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6c      	ldr	r2, [pc, #432]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e00b      	b.n	80023b0 <HAL_RCC_OscConfig+0xb0>
 8002398:	4b69      	ldr	r3, [pc, #420]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a68      	ldr	r2, [pc, #416]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 800239e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	4b66      	ldr	r3, [pc, #408]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a65      	ldr	r2, [pc, #404]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 80023aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d013      	beq.n	80023e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023b8:	f7ff fc08 	bl	8001bcc <HAL_GetTick>
 80023bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	e008      	b.n	80023d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023c0:	f7ff fc04 	bl	8001bcc <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	2b64      	cmp	r3, #100	; 0x64
 80023cc:	d901      	bls.n	80023d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ce:	2303      	movs	r3, #3
 80023d0:	e207      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <HAL_RCC_OscConfig+0xc0>
 80023de:	e014      	b.n	800240a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff fbf4 	bl	8001bcc <HAL_GetTick>
 80023e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	e008      	b.n	80023fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e8:	f7ff fbf0 	bl	8001bcc <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	2b64      	cmp	r3, #100	; 0x64
 80023f4:	d901      	bls.n	80023fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023f6:	2303      	movs	r3, #3
 80023f8:	e1f3      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023fa:	4b51      	ldr	r3, [pc, #324]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d1f0      	bne.n	80023e8 <HAL_RCC_OscConfig+0xe8>
 8002406:	e000      	b.n	800240a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002408:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d063      	beq.n	80024de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	4b4a      	ldr	r3, [pc, #296]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00b      	beq.n	800243a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b47      	ldr	r3, [pc, #284]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800242a:	2b08      	cmp	r3, #8
 800242c:	d11c      	bne.n	8002468 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800242e:	4b44      	ldr	r3, [pc, #272]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d116      	bne.n	8002468 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800243a:	4b41      	ldr	r3, [pc, #260]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_RCC_OscConfig+0x152>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e1c7      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002452:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4937      	ldr	r1, [pc, #220]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002462:	4313      	orrs	r3, r2
 8002464:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002466:	e03a      	b.n	80024de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002470:	4b34      	ldr	r3, [pc, #208]	; (8002544 <HAL_RCC_OscConfig+0x244>)
 8002472:	2201      	movs	r2, #1
 8002474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7ff fba9 	bl	8001bcc <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	e008      	b.n	8002490 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800247e:	f7ff fba5 	bl	8001bcc <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e1a8      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002490:	4b2b      	ldr	r3, [pc, #172]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0f0      	beq.n	800247e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b28      	ldr	r3, [pc, #160]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	00db      	lsls	r3, r3, #3
 80024aa:	4925      	ldr	r1, [pc, #148]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	600b      	str	r3, [r1, #0]
 80024b0:	e015      	b.n	80024de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024b2:	4b24      	ldr	r3, [pc, #144]	; (8002544 <HAL_RCC_OscConfig+0x244>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b8:	f7ff fb88 	bl	8001bcc <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c0:	f7ff fb84 	bl	8001bcc <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e187      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d036      	beq.n	8002558 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024f2:	4b15      	ldr	r3, [pc, #84]	; (8002548 <HAL_RCC_OscConfig+0x248>)
 80024f4:	2201      	movs	r2, #1
 80024f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7ff fb68 	bl	8001bcc <HAL_GetTick>
 80024fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002500:	f7ff fb64 	bl	8001bcc <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e167      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002512:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HAL_RCC_OscConfig+0x240>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x200>
 800251e:	e01b      	b.n	8002558 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002520:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_RCC_OscConfig+0x248>)
 8002522:	2200      	movs	r2, #0
 8002524:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002526:	f7ff fb51 	bl	8001bcc <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	e00e      	b.n	800254c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800252e:	f7ff fb4d 	bl	8001bcc <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b02      	cmp	r3, #2
 800253a:	d907      	bls.n	800254c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e150      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
 8002540:	40023800 	.word	0x40023800
 8002544:	42470000 	.word	0x42470000
 8002548:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800254c:	4b88      	ldr	r3, [pc, #544]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800254e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002550:	f003 0302 	and.w	r3, r3, #2
 8002554:	2b00      	cmp	r3, #0
 8002556:	d1ea      	bne.n	800252e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 8097 	beq.w	8002694 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002566:	2300      	movs	r3, #0
 8002568:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800256a:	4b81      	ldr	r3, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10f      	bne.n	8002596 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002576:	2300      	movs	r3, #0
 8002578:	60bb      	str	r3, [r7, #8]
 800257a:	4b7d      	ldr	r3, [pc, #500]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	4a7c      	ldr	r2, [pc, #496]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002584:	6413      	str	r3, [r2, #64]	; 0x40
 8002586:	4b7a      	ldr	r3, [pc, #488]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002592:	2301      	movs	r3, #1
 8002594:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b77      	ldr	r3, [pc, #476]	; (8002774 <HAL_RCC_OscConfig+0x474>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d118      	bne.n	80025d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025a2:	4b74      	ldr	r3, [pc, #464]	; (8002774 <HAL_RCC_OscConfig+0x474>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a73      	ldr	r2, [pc, #460]	; (8002774 <HAL_RCC_OscConfig+0x474>)
 80025a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ae:	f7ff fb0d 	bl	8001bcc <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b6:	f7ff fb09 	bl	8001bcc <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e10c      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c8:	4b6a      	ldr	r3, [pc, #424]	; (8002774 <HAL_RCC_OscConfig+0x474>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d0f0      	beq.n	80025b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d106      	bne.n	80025ea <HAL_RCC_OscConfig+0x2ea>
 80025dc:	4b64      	ldr	r3, [pc, #400]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a63      	ldr	r2, [pc, #396]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 80025e2:	f043 0301 	orr.w	r3, r3, #1
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	e01c      	b.n	8002624 <HAL_RCC_OscConfig+0x324>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	2b05      	cmp	r3, #5
 80025f0:	d10c      	bne.n	800260c <HAL_RCC_OscConfig+0x30c>
 80025f2:	4b5f      	ldr	r3, [pc, #380]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 80025f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f6:	4a5e      	ldr	r2, [pc, #376]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 80025f8:	f043 0304 	orr.w	r3, r3, #4
 80025fc:	6713      	str	r3, [r2, #112]	; 0x70
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002602:	4a5b      	ldr	r2, [pc, #364]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6713      	str	r3, [r2, #112]	; 0x70
 800260a:	e00b      	b.n	8002624 <HAL_RCC_OscConfig+0x324>
 800260c:	4b58      	ldr	r3, [pc, #352]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a57      	ldr	r2, [pc, #348]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
 8002618:	4b55      	ldr	r3, [pc, #340]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	4a54      	ldr	r2, [pc, #336]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800261e:	f023 0304 	bic.w	r3, r3, #4
 8002622:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d015      	beq.n	8002658 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262c:	f7ff face 	bl	8001bcc <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	e00a      	b.n	800264a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002634:	f7ff faca 	bl	8001bcc <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002642:	4293      	cmp	r3, r2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e0cb      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800264a:	4b49      	ldr	r3, [pc, #292]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800264c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0ee      	beq.n	8002634 <HAL_RCC_OscConfig+0x334>
 8002656:	e014      	b.n	8002682 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002658:	f7ff fab8 	bl	8001bcc <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800265e:	e00a      	b.n	8002676 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002660:	f7ff fab4 	bl	8001bcc <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	f241 3288 	movw	r2, #5000	; 0x1388
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e0b5      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002676:	4b3e      	ldr	r3, [pc, #248]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1ee      	bne.n	8002660 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002682:	7dfb      	ldrb	r3, [r7, #23]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d105      	bne.n	8002694 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002688:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	4a38      	ldr	r2, [pc, #224]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800268e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002692:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a1 	beq.w	80027e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800269e:	4b34      	ldr	r3, [pc, #208]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d05c      	beq.n	8002764 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d141      	bne.n	8002736 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <HAL_RCC_OscConfig+0x478>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fa88 	bl	8001bcc <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026c0:	f7ff fa84 	bl	8001bcc <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e087      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69da      	ldr	r2, [r3, #28]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ec:	019b      	lsls	r3, r3, #6
 80026ee:	431a      	orrs	r2, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026f4:	085b      	lsrs	r3, r3, #1
 80026f6:	3b01      	subs	r3, #1
 80026f8:	041b      	lsls	r3, r3, #16
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	491b      	ldr	r1, [pc, #108]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002708:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x478>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7ff fa5d 	bl	8001bcc <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7ff fa59 	bl	8001bcc <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e05c      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002728:	4b11      	ldr	r3, [pc, #68]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x416>
 8002734:	e054      	b.n	80027e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002736:	4b10      	ldr	r3, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x478>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fa46 	bl	8001bcc <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002744:	f7ff fa42 	bl	8001bcc <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e045      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002756:	4b06      	ldr	r3, [pc, #24]	; (8002770 <HAL_RCC_OscConfig+0x470>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f0      	bne.n	8002744 <HAL_RCC_OscConfig+0x444>
 8002762:	e03d      	b.n	80027e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d107      	bne.n	800277c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e038      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
 8002770:	40023800 	.word	0x40023800
 8002774:	40007000 	.word	0x40007000
 8002778:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_OscConfig+0x4ec>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d028      	beq.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d121      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d11a      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ac:	4013      	ands	r3, r2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d111      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3718      	adds	r7, #24
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023800 	.word	0x40023800

080027f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e0cc      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002804:	4b68      	ldr	r3, [pc, #416]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 030f 	and.w	r3, r3, #15
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	429a      	cmp	r2, r3
 8002810:	d90c      	bls.n	800282c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002812:	4b65      	ldr	r3, [pc, #404]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	b2d2      	uxtb	r2, r2
 8002818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800284e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002866:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	4313      	orrs	r3, r2
 8002878:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d044      	beq.n	8002910 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d119      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d003      	beq.n	80028ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028aa:	2b03      	cmp	r3, #3
 80028ac:	d107      	bne.n	80028be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ae:	4b3f      	ldr	r3, [pc, #252]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d109      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e06f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028be:	4b3b      	ldr	r3, [pc, #236]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e067      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ce:	4b37      	ldr	r3, [pc, #220]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 0203 	bic.w	r2, r3, #3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	4934      	ldr	r1, [pc, #208]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e0:	f7ff f974 	bl	8001bcc <HAL_GetTick>
 80028e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e6:	e00a      	b.n	80028fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e8:	f7ff f970 	bl	8001bcc <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e04f      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fe:	4b2b      	ldr	r3, [pc, #172]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 020c 	and.w	r2, r3, #12
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	429a      	cmp	r2, r3
 800290e:	d1eb      	bne.n	80028e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 030f 	and.w	r3, r3, #15
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	429a      	cmp	r2, r3
 800291c:	d20c      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800291e:	4b22      	ldr	r3, [pc, #136]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	b2d2      	uxtb	r2, r2
 8002924:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002952:	4313      	orrs	r3, r2
 8002954:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f821 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f8d4 	bl	8001b44 <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40023c00 	.word	0x40023c00
 80029ac:	40023800 	.word	0x40023800
 80029b0:	08008fe4 	.word	0x08008fe4
 80029b4:	20000000 	.word	0x20000000
 80029b8:	20000004 	.word	0x20000004

080029bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c0:	b094      	sub	sp, #80	; 0x50
 80029c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	647b      	str	r3, [r7, #68]	; 0x44
 80029c8:	2300      	movs	r3, #0
 80029ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029cc:	2300      	movs	r3, #0
 80029ce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029d4:	4b79      	ldr	r3, [pc, #484]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 030c 	and.w	r3, r3, #12
 80029dc:	2b08      	cmp	r3, #8
 80029de:	d00d      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x40>
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	f200 80e1 	bhi.w	8002ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <HAL_RCC_GetSysClockFreq+0x34>
 80029ea:	2b04      	cmp	r3, #4
 80029ec:	d003      	beq.n	80029f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80029ee:	e0db      	b.n	8002ba8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029f2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80029f4:	e0db      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029f6:	4b73      	ldr	r3, [pc, #460]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x208>)
 80029f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029fa:	e0d8      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029fc:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x200>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a06:	4b6d      	ldr	r3, [pc, #436]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d063      	beq.n	8002ada <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a12:	4b6a      	ldr	r3, [pc, #424]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	2200      	movs	r2, #0
 8002a1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a24:	633b      	str	r3, [r7, #48]	; 0x30
 8002a26:	2300      	movs	r3, #0
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
 8002a2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a2e:	4622      	mov	r2, r4
 8002a30:	462b      	mov	r3, r5
 8002a32:	f04f 0000 	mov.w	r0, #0
 8002a36:	f04f 0100 	mov.w	r1, #0
 8002a3a:	0159      	lsls	r1, r3, #5
 8002a3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a40:	0150      	lsls	r0, r2, #5
 8002a42:	4602      	mov	r2, r0
 8002a44:	460b      	mov	r3, r1
 8002a46:	4621      	mov	r1, r4
 8002a48:	1a51      	subs	r1, r2, r1
 8002a4a:	6139      	str	r1, [r7, #16]
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 0300 	mov.w	r3, #0
 8002a5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a60:	4659      	mov	r1, fp
 8002a62:	018b      	lsls	r3, r1, #6
 8002a64:	4651      	mov	r1, sl
 8002a66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	018a      	lsls	r2, r1, #6
 8002a6e:	4651      	mov	r1, sl
 8002a70:	ebb2 0801 	subs.w	r8, r2, r1
 8002a74:	4659      	mov	r1, fp
 8002a76:	eb63 0901 	sbc.w	r9, r3, r1
 8002a7a:	f04f 0200 	mov.w	r2, #0
 8002a7e:	f04f 0300 	mov.w	r3, #0
 8002a82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a8e:	4690      	mov	r8, r2
 8002a90:	4699      	mov	r9, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	eb18 0303 	adds.w	r3, r8, r3
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	462b      	mov	r3, r5
 8002a9c:	eb49 0303 	adc.w	r3, r9, r3
 8002aa0:	60fb      	str	r3, [r7, #12]
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002aae:	4629      	mov	r1, r5
 8002ab0:	024b      	lsls	r3, r1, #9
 8002ab2:	4621      	mov	r1, r4
 8002ab4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ab8:	4621      	mov	r1, r4
 8002aba:	024a      	lsls	r2, r1, #9
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ac8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002acc:	f7fe f8ec 	bl	8000ca8 <__aeabi_uldivmod>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ad8:	e058      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ada:	4b38      	ldr	r3, [pc, #224]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aea:	623b      	str	r3, [r7, #32]
 8002aec:	2300      	movs	r3, #0
 8002aee:	627b      	str	r3, [r7, #36]	; 0x24
 8002af0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002af4:	4642      	mov	r2, r8
 8002af6:	464b      	mov	r3, r9
 8002af8:	f04f 0000 	mov.w	r0, #0
 8002afc:	f04f 0100 	mov.w	r1, #0
 8002b00:	0159      	lsls	r1, r3, #5
 8002b02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b06:	0150      	lsls	r0, r2, #5
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b12:	4649      	mov	r1, r9
 8002b14:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b18:	f04f 0200 	mov.w	r2, #0
 8002b1c:	f04f 0300 	mov.w	r3, #0
 8002b20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b2c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b30:	eb63 050b 	sbc.w	r5, r3, fp
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	00eb      	lsls	r3, r5, #3
 8002b3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b42:	00e2      	lsls	r2, r4, #3
 8002b44:	4614      	mov	r4, r2
 8002b46:	461d      	mov	r5, r3
 8002b48:	4643      	mov	r3, r8
 8002b4a:	18e3      	adds	r3, r4, r3
 8002b4c:	603b      	str	r3, [r7, #0]
 8002b4e:	464b      	mov	r3, r9
 8002b50:	eb45 0303 	adc.w	r3, r5, r3
 8002b54:	607b      	str	r3, [r7, #4]
 8002b56:	f04f 0200 	mov.w	r2, #0
 8002b5a:	f04f 0300 	mov.w	r3, #0
 8002b5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b62:	4629      	mov	r1, r5
 8002b64:	028b      	lsls	r3, r1, #10
 8002b66:	4621      	mov	r1, r4
 8002b68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	028a      	lsls	r2, r1, #10
 8002b70:	4610      	mov	r0, r2
 8002b72:	4619      	mov	r1, r3
 8002b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b76:	2200      	movs	r2, #0
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	61fa      	str	r2, [r7, #28]
 8002b7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b80:	f7fe f892 	bl	8000ca8 <__aeabi_uldivmod>
 8002b84:	4602      	mov	r2, r0
 8002b86:	460b      	mov	r3, r1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	3301      	adds	r3, #1
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002b9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ba6:	e002      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002baa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3750      	adds	r7, #80	; 0x50
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bba:	bf00      	nop
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	00f42400 	.word	0x00f42400
 8002bc4:	007a1200 	.word	0x007a1200

08002bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bcc:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <HAL_RCC_GetHCLKFreq+0x14>)
 8002bce:	681b      	ldr	r3, [r3, #0]
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	20000000 	.word	0x20000000

08002be0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002be4:	f7ff fff0 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002be8:	4602      	mov	r2, r0
 8002bea:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	0a9b      	lsrs	r3, r3, #10
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	4903      	ldr	r1, [pc, #12]	; (8002c04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bf6:	5ccb      	ldrb	r3, [r1, r3]
 8002bf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	bd80      	pop	{r7, pc}
 8002c00:	40023800 	.word	0x40023800
 8002c04:	08008ff4 	.word	0x08008ff4

08002c08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c0c:	f7ff ffdc 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c10:	4602      	mov	r2, r0
 8002c12:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	0b5b      	lsrs	r3, r3, #13
 8002c18:	f003 0307 	and.w	r3, r3, #7
 8002c1c:	4903      	ldr	r1, [pc, #12]	; (8002c2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c1e:	5ccb      	ldrb	r3, [r1, r3]
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	08008ff4 	.word	0x08008ff4

08002c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e03f      	b.n	8002cc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fe fea4 	bl	80019a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2224      	movs	r2, #36	; 0x24
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68da      	ldr	r2, [r3, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f000 fddf 	bl	8003838 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	691a      	ldr	r2, [r3, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	695a      	ldr	r2, [r3, #20]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2220      	movs	r2, #32
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b08a      	sub	sp, #40	; 0x28
 8002cce:	af02      	add	r7, sp, #8
 8002cd0:	60f8      	str	r0, [r7, #12]
 8002cd2:	60b9      	str	r1, [r7, #8]
 8002cd4:	603b      	str	r3, [r7, #0]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b20      	cmp	r3, #32
 8002ce8:	d17c      	bne.n	8002de4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_UART_Transmit+0x2c>
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e075      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Transmit+0x3e>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e06e      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2221      	movs	r2, #33	; 0x21
 8002d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d1e:	f7fe ff55 	bl	8001bcc <HAL_GetTick>
 8002d22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d38:	d108      	bne.n	8002d4c <HAL_UART_Transmit+0x82>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d104      	bne.n	8002d4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	61bb      	str	r3, [r7, #24]
 8002d4a:	e003      	b.n	8002d54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002d5c:	e02a      	b.n	8002db4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	9300      	str	r3, [sp, #0]
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	2200      	movs	r2, #0
 8002d66:	2180      	movs	r1, #128	; 0x80
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f000 fb1f 	bl	80033ac <UART_WaitOnFlagUntilTimeout>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e036      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10b      	bne.n	8002d96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	461a      	mov	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	3302      	adds	r3, #2
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	e007      	b.n	8002da6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	781a      	ldrb	r2, [r3, #0]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	3301      	adds	r3, #1
 8002da4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	3b01      	subs	r3, #1
 8002dae:	b29a      	uxth	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d1cf      	bne.n	8002d5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	2140      	movs	r1, #64	; 0x40
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f000 faef 	bl	80033ac <UART_WaitOnFlagUntilTimeout>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e006      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002de0:	2300      	movs	r3, #0
 8002de2:	e000      	b.n	8002de6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002de4:	2302      	movs	r3, #2
  }
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b084      	sub	sp, #16
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2b20      	cmp	r3, #32
 8002e06:	d11d      	bne.n	8002e44 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <HAL_UART_Receive_IT+0x26>
 8002e0e:	88fb      	ldrh	r3, [r7, #6]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d101      	bne.n	8002e18 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	e016      	b.n	8002e46 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_UART_Receive_IT+0x38>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e00f      	b.n	8002e46 <HAL_UART_Receive_IT+0x58>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002e34:	88fb      	ldrh	r3, [r7, #6]
 8002e36:	461a      	mov	r2, r3
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	68f8      	ldr	r0, [r7, #12]
 8002e3c:	f000 fb24 	bl	8003488 <UART_Start_Receive_IT>
 8002e40:	4603      	mov	r3, r0
 8002e42:	e000      	b.n	8002e46 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e44:	2302      	movs	r3, #2
  }
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
	...

08002e50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b0ba      	sub	sp, #232	; 0xe8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002e8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10f      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d009      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x66>
 8002ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fc07 	bl	80036c2 <UART_Receive_IT>
      return;
 8002eb4:	e256      	b.n	8003364 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	f000 80de 	beq.w	800307c <HAL_UART_IRQHandler+0x22c>
 8002ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ed0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80d1 	beq.w	800307c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ede:	f003 0301 	and.w	r3, r3, #1
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d00b      	beq.n	8002efe <HAL_UART_IRQHandler+0xae>
 8002ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d005      	beq.n	8002efe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f043 0201 	orr.w	r2, r3, #1
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f003 0304 	and.w	r3, r3, #4
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_UART_IRQHandler+0xd2>
 8002f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1a:	f043 0202 	orr.w	r2, r3, #2
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002f22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00b      	beq.n	8002f46 <HAL_UART_IRQHandler+0xf6>
 8002f2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d005      	beq.n	8002f46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	f043 0204 	orr.w	r2, r3, #4
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002f46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f4a:	f003 0308 	and.w	r3, r3, #8
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d011      	beq.n	8002f76 <HAL_UART_IRQHandler+0x126>
 8002f52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f56:	f003 0320 	and.w	r3, r3, #32
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d105      	bne.n	8002f6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f043 0208 	orr.w	r2, r3, #8
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 81ed 	beq.w	800335a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f84:	f003 0320 	and.w	r3, r3, #32
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_UART_IRQHandler+0x14e>
 8002f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f90:	f003 0320 	and.w	r3, r3, #32
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d002      	beq.n	8002f9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fb92 	bl	80036c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa8:	2b40      	cmp	r3, #64	; 0x40
 8002faa:	bf0c      	ite	eq
 8002fac:	2301      	moveq	r3, #1
 8002fae:	2300      	movne	r3, #0
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fba:	f003 0308 	and.w	r3, r3, #8
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d103      	bne.n	8002fca <HAL_UART_IRQHandler+0x17a>
 8002fc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d04f      	beq.n	800306a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fa9a 	bl	8003504 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d141      	bne.n	8003062 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	3314      	adds	r3, #20
 8002fe4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fe8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002ff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ffc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3314      	adds	r3, #20
 8003006:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800300a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800300e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003012:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003016:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800301a:	e841 2300 	strex	r3, r2, [r1]
 800301e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003022:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1d9      	bne.n	8002fde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	2b00      	cmp	r3, #0
 8003030:	d013      	beq.n	800305a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	4a7d      	ldr	r2, [pc, #500]	; (800322c <HAL_UART_IRQHandler+0x3dc>)
 8003038:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe ff75 	bl	8001f2e <HAL_DMA_Abort_IT>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d016      	beq.n	8003078 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003054:	4610      	mov	r0, r2
 8003056:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003058:	e00e      	b.n	8003078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f990 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003060:	e00a      	b.n	8003078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f98c 	bl	8003380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	e006      	b.n	8003078 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f988 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003076:	e170      	b.n	800335a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	bf00      	nop
    return;
 800307a:	e16e      	b.n	800335a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003080:	2b01      	cmp	r3, #1
 8003082:	f040 814a 	bne.w	800331a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0310 	and.w	r3, r3, #16
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 8143 	beq.w	800331a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003098:	f003 0310 	and.w	r3, r3, #16
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 813c 	beq.w	800331a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030a2:	2300      	movs	r3, #0
 80030a4:	60bb      	str	r3, [r7, #8]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c2:	2b40      	cmp	r3, #64	; 0x40
 80030c4:	f040 80b4 	bne.w	8003230 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80030d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 8140 	beq.w	800335e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80030e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030e6:	429a      	cmp	r2, r3
 80030e8:	f080 8139 	bcs.w	800335e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80030f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f8:	69db      	ldr	r3, [r3, #28]
 80030fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030fe:	f000 8088 	beq.w	8003212 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	330c      	adds	r3, #12
 8003108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800310c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003110:	e853 3f00 	ldrex	r3, [r3]
 8003114:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800311c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003120:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	330c      	adds	r3, #12
 800312a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800312e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003136:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800313a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800313e:	e841 2300 	strex	r3, r2, [r1]
 8003142:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003146:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1d9      	bne.n	8003102 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	3314      	adds	r3, #20
 8003154:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003158:	e853 3f00 	ldrex	r3, [r3]
 800315c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800315e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003160:	f023 0301 	bic.w	r3, r3, #1
 8003164:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	3314      	adds	r3, #20
 800316e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003172:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003176:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003178:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800317a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800317e:	e841 2300 	strex	r3, r2, [r1]
 8003182:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003184:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1e1      	bne.n	800314e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003192:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003194:	e853 3f00 	ldrex	r3, [r3]
 8003198:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800319a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800319c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3314      	adds	r3, #20
 80031aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80031ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80031b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80031b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80031b6:	e841 2300 	strex	r3, r2, [r1]
 80031ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80031bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1e3      	bne.n	800318a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	330c      	adds	r3, #12
 80031d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031da:	e853 3f00 	ldrex	r3, [r3]
 80031de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80031e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031e2:	f023 0310 	bic.w	r3, r3, #16
 80031e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	330c      	adds	r3, #12
 80031f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80031f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80031f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80031fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031fc:	e841 2300 	strex	r3, r2, [r1]
 8003200:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1e3      	bne.n	80031d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320c:	4618      	mov	r0, r3
 800320e:	f7fe fe1e 	bl	8001e4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800321a:	b29b      	uxth	r3, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	b29b      	uxth	r3, r3
 8003220:	4619      	mov	r1, r3
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f8b6 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003228:	e099      	b.n	800335e <HAL_UART_IRQHandler+0x50e>
 800322a:	bf00      	nop
 800322c:	080035cb 	.word	0x080035cb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003238:	b29b      	uxth	r3, r3
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003244:	b29b      	uxth	r3, r3
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 808b 	beq.w	8003362 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800324c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8086 	beq.w	8003362 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003260:	e853 3f00 	ldrex	r3, [r3]
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800326c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	330c      	adds	r3, #12
 8003276:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800327a:	647a      	str	r2, [r7, #68]	; 0x44
 800327c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e3      	bne.n	8003256 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3314      	adds	r3, #20
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	623b      	str	r3, [r7, #32]
   return(result);
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3314      	adds	r3, #20
 80032ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80032b2:	633a      	str	r2, [r7, #48]	; 0x30
 80032b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e3      	bne.n	800328e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	330c      	adds	r3, #12
 80032da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0310 	bic.w	r3, r3, #16
 80032ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	330c      	adds	r3, #12
 80032f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80032f8:	61fa      	str	r2, [r7, #28]
 80032fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	69b9      	ldr	r1, [r7, #24]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	e841 2300 	strex	r3, r2, [r1]
 8003304:	617b      	str	r3, [r7, #20]
   return(result);
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d1e3      	bne.n	80032d4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800330c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003310:	4619      	mov	r1, r3
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f83e 	bl	8003394 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003318:	e023      	b.n	8003362 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800331a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800331e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <HAL_UART_IRQHandler+0x4ea>
 8003326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	d003      	beq.n	800333a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f95d 	bl	80035f2 <UART_Transmit_IT>
    return;
 8003338:	e014      	b.n	8003364 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800333a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00e      	beq.n	8003364 <HAL_UART_IRQHandler+0x514>
 8003346:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800334a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d008      	beq.n	8003364 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f000 f99d 	bl	8003692 <UART_EndTransmit_IT>
    return;
 8003358:	e004      	b.n	8003364 <HAL_UART_IRQHandler+0x514>
    return;
 800335a:	bf00      	nop
 800335c:	e002      	b.n	8003364 <HAL_UART_IRQHandler+0x514>
      return;
 800335e:	bf00      	nop
 8003360:	e000      	b.n	8003364 <HAL_UART_IRQHandler+0x514>
      return;
 8003362:	bf00      	nop
  }
}
 8003364:	37e8      	adds	r7, #232	; 0xe8
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop

0800336c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	460b      	mov	r3, r1
 800339e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b090      	sub	sp, #64	; 0x40
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	603b      	str	r3, [r7, #0]
 80033b8:	4613      	mov	r3, r2
 80033ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033bc:	e050      	b.n	8003460 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d04c      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80033c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d007      	beq.n	80033dc <UART_WaitOnFlagUntilTimeout+0x30>
 80033cc:	f7fe fbfe 	bl	8001bcc <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033d8:	429a      	cmp	r2, r3
 80033da:	d241      	bcs.n	8003460 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80033fc:	637a      	str	r2, [r7, #52]	; 0x34
 80033fe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e5      	bne.n	80033dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	613b      	str	r3, [r7, #16]
   return(result);
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	63bb      	str	r3, [r7, #56]	; 0x38
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003430:	623a      	str	r2, [r7, #32]
 8003432:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	69f9      	ldr	r1, [r7, #28]
 8003436:	6a3a      	ldr	r2, [r7, #32]
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	61bb      	str	r3, [r7, #24]
   return(result);
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2220      	movs	r2, #32
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e00f      	b.n	8003480 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	4013      	ands	r3, r2
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	429a      	cmp	r2, r3
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	461a      	mov	r2, r3
 8003478:	79fb      	ldrb	r3, [r7, #7]
 800347a:	429a      	cmp	r2, r3
 800347c:	d09f      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3740      	adds	r7, #64	; 0x40
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	4613      	mov	r3, r2
 8003494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	88fa      	ldrh	r2, [r7, #6]
 80034a6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2222      	movs	r2, #34	; 0x22
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d007      	beq.n	80034d6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68da      	ldr	r2, [r3, #12]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695a      	ldr	r2, [r3, #20]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	68da      	ldr	r2, [r3, #12]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f042 0220 	orr.w	r2, r2, #32
 80034f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003504:	b480      	push	{r7}
 8003506:	b095      	sub	sp, #84	; 0x54
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	330c      	adds	r3, #12
 8003512:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003516:	e853 3f00 	ldrex	r3, [r3]
 800351a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800351c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800351e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003522:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	330c      	adds	r3, #12
 800352a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800352c:	643a      	str	r2, [r7, #64]	; 0x40
 800352e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003530:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003532:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003534:	e841 2300 	strex	r3, r2, [r1]
 8003538:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800353a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1e5      	bne.n	800350c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3314      	adds	r3, #20
 8003546:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003548:	6a3b      	ldr	r3, [r7, #32]
 800354a:	e853 3f00 	ldrex	r3, [r3]
 800354e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f023 0301 	bic.w	r3, r3, #1
 8003556:	64bb      	str	r3, [r7, #72]	; 0x48
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3314      	adds	r3, #20
 800355e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003560:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003564:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003568:	e841 2300 	strex	r3, r2, [r1]
 800356c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	2b00      	cmp	r3, #0
 8003572:	d1e5      	bne.n	8003540 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003578:	2b01      	cmp	r3, #1
 800357a:	d119      	bne.n	80035b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	330c      	adds	r3, #12
 8003582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	e853 3f00 	ldrex	r3, [r3]
 800358a:	60bb      	str	r3, [r7, #8]
   return(result);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f023 0310 	bic.w	r3, r3, #16
 8003592:	647b      	str	r3, [r7, #68]	; 0x44
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	330c      	adds	r3, #12
 800359a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800359c:	61ba      	str	r2, [r7, #24]
 800359e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a0:	6979      	ldr	r1, [r7, #20]
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	e841 2300 	strex	r3, r2, [r1]
 80035a8:	613b      	str	r3, [r7, #16]
   return(result);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d1e5      	bne.n	800357c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2220      	movs	r2, #32
 80035b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80035be:	bf00      	nop
 80035c0:	3754      	adds	r7, #84	; 0x54
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b084      	sub	sp, #16
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035e4:	68f8      	ldr	r0, [r7, #12]
 80035e6:	f7ff fecb 	bl	8003380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035ea:	bf00      	nop
 80035ec:	3710      	adds	r7, #16
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}

080035f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80035f2:	b480      	push	{r7}
 80035f4:	b085      	sub	sp, #20
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b21      	cmp	r3, #33	; 0x21
 8003604:	d13e      	bne.n	8003684 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800360e:	d114      	bne.n	800363a <UART_Transmit_IT+0x48>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	691b      	ldr	r3, [r3, #16]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d110      	bne.n	800363a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	461a      	mov	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800362c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a1b      	ldr	r3, [r3, #32]
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	621a      	str	r2, [r3, #32]
 8003638:	e008      	b.n	800364c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	1c59      	adds	r1, r3, #1
 8003640:	687a      	ldr	r2, [r7, #4]
 8003642:	6211      	str	r1, [r2, #32]
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003650:	b29b      	uxth	r3, r3
 8003652:	3b01      	subs	r3, #1
 8003654:	b29b      	uxth	r3, r3
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4619      	mov	r1, r3
 800365a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10f      	bne.n	8003680 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	68da      	ldr	r2, [r3, #12]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800367e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003680:	2300      	movs	r3, #0
 8003682:	e000      	b.n	8003686 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003684:	2302      	movs	r3, #2
  }
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b082      	sub	sp, #8
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2220      	movs	r2, #32
 80036ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7ff fe5a 	bl	800336c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b08c      	sub	sp, #48	; 0x30
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b22      	cmp	r3, #34	; 0x22
 80036d4:	f040 80ab 	bne.w	800382e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036e0:	d117      	bne.n	8003712 <UART_Receive_IT+0x50>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d113      	bne.n	8003712 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80036ea:	2300      	movs	r3, #0
 80036ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003700:	b29a      	uxth	r2, r3
 8003702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003704:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370a:	1c9a      	adds	r2, r3, #2
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	629a      	str	r2, [r3, #40]	; 0x28
 8003710:	e026      	b.n	8003760 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003724:	d007      	beq.n	8003736 <UART_Receive_IT+0x74>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <UART_Receive_IT+0x82>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d106      	bne.n	8003744 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	b2da      	uxtb	r2, r3
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	701a      	strb	r2, [r3, #0]
 8003742:	e008      	b.n	8003756 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003750:	b2da      	uxtb	r2, r3
 8003752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003754:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800375a:	1c5a      	adds	r2, r3, #1
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003764:	b29b      	uxth	r3, r3
 8003766:	3b01      	subs	r3, #1
 8003768:	b29b      	uxth	r3, r3
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	4619      	mov	r1, r3
 800376e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003770:	2b00      	cmp	r3, #0
 8003772:	d15a      	bne.n	800382a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0220 	bic.w	r2, r2, #32
 8003782:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003792:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	695a      	ldr	r2, [r3, #20]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0201 	bic.w	r2, r2, #1
 80037a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d135      	bne.n	8003820 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	330c      	adds	r3, #12
 80037c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	697b      	ldr	r3, [r7, #20]
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	613b      	str	r3, [r7, #16]
   return(result);
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f023 0310 	bic.w	r3, r3, #16
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037da:	623a      	str	r2, [r7, #32]
 80037dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	69f9      	ldr	r1, [r7, #28]
 80037e0:	6a3a      	ldr	r2, [r7, #32]
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0310 	and.w	r3, r3, #16
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d10a      	bne.n	8003812 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037fc:	2300      	movs	r3, #0
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003816:	4619      	mov	r1, r3
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f7ff fdbb 	bl	8003394 <HAL_UARTEx_RxEventCallback>
 800381e:	e002      	b.n	8003826 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f7fd fe6d 	bl	8001500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003826:	2300      	movs	r3, #0
 8003828:	e002      	b.n	8003830 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800382a:	2300      	movs	r3, #0
 800382c:	e000      	b.n	8003830 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800382e:	2302      	movs	r3, #2
  }
}
 8003830:	4618      	mov	r0, r3
 8003832:	3730      	adds	r7, #48	; 0x30
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003838:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800383c:	b0c0      	sub	sp, #256	; 0x100
 800383e:	af00      	add	r7, sp, #0
 8003840:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003854:	68d9      	ldr	r1, [r3, #12]
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	ea40 0301 	orr.w	r3, r0, r1
 8003860:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	431a      	orrs	r2, r3
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	431a      	orrs	r2, r3
 8003878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	4313      	orrs	r3, r2
 8003880:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003890:	f021 010c 	bic.w	r1, r1, #12
 8003894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800389e:	430b      	orrs	r3, r1
 80038a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80038ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b2:	6999      	ldr	r1, [r3, #24]
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	ea40 0301 	orr.w	r3, r0, r1
 80038be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4b8f      	ldr	r3, [pc, #572]	; (8003b04 <UART_SetConfig+0x2cc>)
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d005      	beq.n	80038d8 <UART_SetConfig+0xa0>
 80038cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	4b8d      	ldr	r3, [pc, #564]	; (8003b08 <UART_SetConfig+0x2d0>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d104      	bne.n	80038e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038d8:	f7ff f996 	bl	8002c08 <HAL_RCC_GetPCLK2Freq>
 80038dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80038e0:	e003      	b.n	80038ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80038e2:	f7ff f97d 	bl	8002be0 <HAL_RCC_GetPCLK1Freq>
 80038e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038f4:	f040 810c 	bne.w	8003b10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003902:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003906:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800390a:	4622      	mov	r2, r4
 800390c:	462b      	mov	r3, r5
 800390e:	1891      	adds	r1, r2, r2
 8003910:	65b9      	str	r1, [r7, #88]	; 0x58
 8003912:	415b      	adcs	r3, r3
 8003914:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003916:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800391a:	4621      	mov	r1, r4
 800391c:	eb12 0801 	adds.w	r8, r2, r1
 8003920:	4629      	mov	r1, r5
 8003922:	eb43 0901 	adc.w	r9, r3, r1
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	f04f 0300 	mov.w	r3, #0
 800392e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003932:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003936:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800393a:	4690      	mov	r8, r2
 800393c:	4699      	mov	r9, r3
 800393e:	4623      	mov	r3, r4
 8003940:	eb18 0303 	adds.w	r3, r8, r3
 8003944:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003948:	462b      	mov	r3, r5
 800394a:	eb49 0303 	adc.w	r3, r9, r3
 800394e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800395e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003962:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003966:	460b      	mov	r3, r1
 8003968:	18db      	adds	r3, r3, r3
 800396a:	653b      	str	r3, [r7, #80]	; 0x50
 800396c:	4613      	mov	r3, r2
 800396e:	eb42 0303 	adc.w	r3, r2, r3
 8003972:	657b      	str	r3, [r7, #84]	; 0x54
 8003974:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003978:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800397c:	f7fd f994 	bl	8000ca8 <__aeabi_uldivmod>
 8003980:	4602      	mov	r2, r0
 8003982:	460b      	mov	r3, r1
 8003984:	4b61      	ldr	r3, [pc, #388]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003986:	fba3 2302 	umull	r2, r3, r3, r2
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	011c      	lsls	r4, r3, #4
 800398e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003992:	2200      	movs	r2, #0
 8003994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003998:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800399c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80039a0:	4642      	mov	r2, r8
 80039a2:	464b      	mov	r3, r9
 80039a4:	1891      	adds	r1, r2, r2
 80039a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80039a8:	415b      	adcs	r3, r3
 80039aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80039b0:	4641      	mov	r1, r8
 80039b2:	eb12 0a01 	adds.w	sl, r2, r1
 80039b6:	4649      	mov	r1, r9
 80039b8:	eb43 0b01 	adc.w	fp, r3, r1
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	f04f 0300 	mov.w	r3, #0
 80039c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80039c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80039cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039d0:	4692      	mov	sl, r2
 80039d2:	469b      	mov	fp, r3
 80039d4:	4643      	mov	r3, r8
 80039d6:	eb1a 0303 	adds.w	r3, sl, r3
 80039da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039de:	464b      	mov	r3, r9
 80039e0:	eb4b 0303 	adc.w	r3, fp, r3
 80039e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80039f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80039fc:	460b      	mov	r3, r1
 80039fe:	18db      	adds	r3, r3, r3
 8003a00:	643b      	str	r3, [r7, #64]	; 0x40
 8003a02:	4613      	mov	r3, r2
 8003a04:	eb42 0303 	adc.w	r3, r2, r3
 8003a08:	647b      	str	r3, [r7, #68]	; 0x44
 8003a0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003a0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003a12:	f7fd f949 	bl	8000ca8 <__aeabi_uldivmod>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003a1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2264      	movs	r2, #100	; 0x64
 8003a26:	fb02 f303 	mul.w	r3, r2, r3
 8003a2a:	1acb      	subs	r3, r1, r3
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003a32:	4b36      	ldr	r3, [pc, #216]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003a34:	fba3 2302 	umull	r2, r3, r3, r2
 8003a38:	095b      	lsrs	r3, r3, #5
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a40:	441c      	add	r4, r3
 8003a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a46:	2200      	movs	r2, #0
 8003a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003a50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003a54:	4642      	mov	r2, r8
 8003a56:	464b      	mov	r3, r9
 8003a58:	1891      	adds	r1, r2, r2
 8003a5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a5c:	415b      	adcs	r3, r3
 8003a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003a64:	4641      	mov	r1, r8
 8003a66:	1851      	adds	r1, r2, r1
 8003a68:	6339      	str	r1, [r7, #48]	; 0x30
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	414b      	adcs	r3, r1
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003a7c:	4659      	mov	r1, fp
 8003a7e:	00cb      	lsls	r3, r1, #3
 8003a80:	4651      	mov	r1, sl
 8003a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a86:	4651      	mov	r1, sl
 8003a88:	00ca      	lsls	r2, r1, #3
 8003a8a:	4610      	mov	r0, r2
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4603      	mov	r3, r0
 8003a90:	4642      	mov	r2, r8
 8003a92:	189b      	adds	r3, r3, r2
 8003a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a98:	464b      	mov	r3, r9
 8003a9a:	460a      	mov	r2, r1
 8003a9c:	eb42 0303 	adc.w	r3, r2, r3
 8003aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003ab0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ab4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ab8:	460b      	mov	r3, r1
 8003aba:	18db      	adds	r3, r3, r3
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003abe:	4613      	mov	r3, r2
 8003ac0:	eb42 0303 	adc.w	r3, r2, r3
 8003ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003aca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ace:	f7fd f8eb 	bl	8000ca8 <__aeabi_uldivmod>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003ad8:	fba3 1302 	umull	r1, r3, r3, r2
 8003adc:	095b      	lsrs	r3, r3, #5
 8003ade:	2164      	movs	r1, #100	; 0x64
 8003ae0:	fb01 f303 	mul.w	r3, r1, r3
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	00db      	lsls	r3, r3, #3
 8003ae8:	3332      	adds	r3, #50	; 0x32
 8003aea:	4a08      	ldr	r2, [pc, #32]	; (8003b0c <UART_SetConfig+0x2d4>)
 8003aec:	fba2 2303 	umull	r2, r3, r2, r3
 8003af0:	095b      	lsrs	r3, r3, #5
 8003af2:	f003 0207 	and.w	r2, r3, #7
 8003af6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4422      	add	r2, r4
 8003afe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003b00:	e105      	b.n	8003d0e <UART_SetConfig+0x4d6>
 8003b02:	bf00      	nop
 8003b04:	40011000 	.word	0x40011000
 8003b08:	40011400 	.word	0x40011400
 8003b0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b14:	2200      	movs	r2, #0
 8003b16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003b22:	4642      	mov	r2, r8
 8003b24:	464b      	mov	r3, r9
 8003b26:	1891      	adds	r1, r2, r2
 8003b28:	6239      	str	r1, [r7, #32]
 8003b2a:	415b      	adcs	r3, r3
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003b32:	4641      	mov	r1, r8
 8003b34:	1854      	adds	r4, r2, r1
 8003b36:	4649      	mov	r1, r9
 8003b38:	eb43 0501 	adc.w	r5, r3, r1
 8003b3c:	f04f 0200 	mov.w	r2, #0
 8003b40:	f04f 0300 	mov.w	r3, #0
 8003b44:	00eb      	lsls	r3, r5, #3
 8003b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b4a:	00e2      	lsls	r2, r4, #3
 8003b4c:	4614      	mov	r4, r2
 8003b4e:	461d      	mov	r5, r3
 8003b50:	4643      	mov	r3, r8
 8003b52:	18e3      	adds	r3, r4, r3
 8003b54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003b58:	464b      	mov	r3, r9
 8003b5a:	eb45 0303 	adc.w	r3, r5, r3
 8003b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003b6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003b7e:	4629      	mov	r1, r5
 8003b80:	008b      	lsls	r3, r1, #2
 8003b82:	4621      	mov	r1, r4
 8003b84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b88:	4621      	mov	r1, r4
 8003b8a:	008a      	lsls	r2, r1, #2
 8003b8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003b90:	f7fd f88a 	bl	8000ca8 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4b60      	ldr	r3, [pc, #384]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	011c      	lsls	r4, r3, #4
 8003ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003bac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003bb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	464b      	mov	r3, r9
 8003bb8:	1891      	adds	r1, r2, r2
 8003bba:	61b9      	str	r1, [r7, #24]
 8003bbc:	415b      	adcs	r3, r3
 8003bbe:	61fb      	str	r3, [r7, #28]
 8003bc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bc4:	4641      	mov	r1, r8
 8003bc6:	1851      	adds	r1, r2, r1
 8003bc8:	6139      	str	r1, [r7, #16]
 8003bca:	4649      	mov	r1, r9
 8003bcc:	414b      	adcs	r3, r1
 8003bce:	617b      	str	r3, [r7, #20]
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003bdc:	4659      	mov	r1, fp
 8003bde:	00cb      	lsls	r3, r1, #3
 8003be0:	4651      	mov	r1, sl
 8003be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003be6:	4651      	mov	r1, sl
 8003be8:	00ca      	lsls	r2, r1, #3
 8003bea:	4610      	mov	r0, r2
 8003bec:	4619      	mov	r1, r3
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4642      	mov	r2, r8
 8003bf2:	189b      	adds	r3, r3, r2
 8003bf4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003bf8:	464b      	mov	r3, r9
 8003bfa:	460a      	mov	r2, r1
 8003bfc:	eb42 0303 	adc.w	r3, r2, r3
 8003c00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003c1c:	4649      	mov	r1, r9
 8003c1e:	008b      	lsls	r3, r1, #2
 8003c20:	4641      	mov	r1, r8
 8003c22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c26:	4641      	mov	r1, r8
 8003c28:	008a      	lsls	r2, r1, #2
 8003c2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003c2e:	f7fd f83b 	bl	8000ca8 <__aeabi_uldivmod>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4b39      	ldr	r3, [pc, #228]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003c38:	fba3 1302 	umull	r1, r3, r3, r2
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	2164      	movs	r1, #100	; 0x64
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	3332      	adds	r3, #50	; 0x32
 8003c4a:	4a34      	ldr	r2, [pc, #208]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c50:	095b      	lsrs	r3, r3, #5
 8003c52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c56:	441c      	add	r4, r3
 8003c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003c60:	677a      	str	r2, [r7, #116]	; 0x74
 8003c62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c66:	4642      	mov	r2, r8
 8003c68:	464b      	mov	r3, r9
 8003c6a:	1891      	adds	r1, r2, r2
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	415b      	adcs	r3, r3
 8003c70:	60fb      	str	r3, [r7, #12]
 8003c72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c76:	4641      	mov	r1, r8
 8003c78:	1851      	adds	r1, r2, r1
 8003c7a:	6039      	str	r1, [r7, #0]
 8003c7c:	4649      	mov	r1, r9
 8003c7e:	414b      	adcs	r3, r1
 8003c80:	607b      	str	r3, [r7, #4]
 8003c82:	f04f 0200 	mov.w	r2, #0
 8003c86:	f04f 0300 	mov.w	r3, #0
 8003c8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003c8e:	4659      	mov	r1, fp
 8003c90:	00cb      	lsls	r3, r1, #3
 8003c92:	4651      	mov	r1, sl
 8003c94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c98:	4651      	mov	r1, sl
 8003c9a:	00ca      	lsls	r2, r1, #3
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	4642      	mov	r2, r8
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca8:	464b      	mov	r3, r9
 8003caa:	460a      	mov	r2, r1
 8003cac:	eb42 0303 	adc.w	r3, r2, r3
 8003cb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	663b      	str	r3, [r7, #96]	; 0x60
 8003cbc:	667a      	str	r2, [r7, #100]	; 0x64
 8003cbe:	f04f 0200 	mov.w	r2, #0
 8003cc2:	f04f 0300 	mov.w	r3, #0
 8003cc6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cca:	4649      	mov	r1, r9
 8003ccc:	008b      	lsls	r3, r1, #2
 8003cce:	4641      	mov	r1, r8
 8003cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cd4:	4641      	mov	r1, r8
 8003cd6:	008a      	lsls	r2, r1, #2
 8003cd8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003cdc:	f7fc ffe4 	bl	8000ca8 <__aeabi_uldivmod>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	460b      	mov	r3, r1
 8003ce4:	4b0d      	ldr	r3, [pc, #52]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003ce6:	fba3 1302 	umull	r1, r3, r3, r2
 8003cea:	095b      	lsrs	r3, r3, #5
 8003cec:	2164      	movs	r1, #100	; 0x64
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	011b      	lsls	r3, r3, #4
 8003cf6:	3332      	adds	r3, #50	; 0x32
 8003cf8:	4a08      	ldr	r2, [pc, #32]	; (8003d1c <UART_SetConfig+0x4e4>)
 8003cfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	f003 020f 	and.w	r2, r3, #15
 8003d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4422      	add	r2, r4
 8003d0c:	609a      	str	r2, [r3, #8]
}
 8003d0e:	bf00      	nop
 8003d10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003d14:	46bd      	mov	sp, r7
 8003d16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d1a:	bf00      	nop
 8003d1c:	51eb851f 	.word	0x51eb851f

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	4d0d      	ldr	r5, [pc, #52]	; (8003d64 <__libc_init_array+0x38>)
 8003d30:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d32:	1b64      	subs	r4, r4, r5
 8003d34:	10a4      	asrs	r4, r4, #2
 8003d36:	2600      	movs	r6, #0
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	4d0b      	ldr	r5, [pc, #44]	; (8003d6c <__libc_init_array+0x40>)
 8003d3e:	4c0c      	ldr	r4, [pc, #48]	; (8003d70 <__libc_init_array+0x44>)
 8003d40:	f005 f8e0 	bl	8008f04 <_init>
 8003d44:	1b64      	subs	r4, r4, r5
 8003d46:	10a4      	asrs	r4, r4, #2
 8003d48:	2600      	movs	r6, #0
 8003d4a:	42a6      	cmp	r6, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d54:	4798      	blx	r3
 8003d56:	3601      	adds	r6, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d5e:	4798      	blx	r3
 8003d60:	3601      	adds	r6, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	080094c4 	.word	0x080094c4
 8003d68:	080094c4 	.word	0x080094c4
 8003d6c:	080094c4 	.word	0x080094c4
 8003d70:	080094c8 	.word	0x080094c8

08003d74 <memset>:
 8003d74:	4402      	add	r2, r0
 8003d76:	4603      	mov	r3, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <__cvt>:
 8003d84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	ec55 4b10 	vmov	r4, r5, d0
 8003d8c:	2d00      	cmp	r5, #0
 8003d8e:	460e      	mov	r6, r1
 8003d90:	4619      	mov	r1, r3
 8003d92:	462b      	mov	r3, r5
 8003d94:	bfbb      	ittet	lt
 8003d96:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8003d9a:	461d      	movlt	r5, r3
 8003d9c:	2300      	movge	r3, #0
 8003d9e:	232d      	movlt	r3, #45	; 0x2d
 8003da0:	700b      	strb	r3, [r1, #0]
 8003da2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003da4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8003da8:	4691      	mov	r9, r2
 8003daa:	f023 0820 	bic.w	r8, r3, #32
 8003dae:	bfbc      	itt	lt
 8003db0:	4622      	movlt	r2, r4
 8003db2:	4614      	movlt	r4, r2
 8003db4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003db8:	d005      	beq.n	8003dc6 <__cvt+0x42>
 8003dba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003dbe:	d100      	bne.n	8003dc2 <__cvt+0x3e>
 8003dc0:	3601      	adds	r6, #1
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	e000      	b.n	8003dc8 <__cvt+0x44>
 8003dc6:	2103      	movs	r1, #3
 8003dc8:	ab03      	add	r3, sp, #12
 8003dca:	9301      	str	r3, [sp, #4]
 8003dcc:	ab02      	add	r3, sp, #8
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	ec45 4b10 	vmov	d0, r4, r5
 8003dd4:	4653      	mov	r3, sl
 8003dd6:	4632      	mov	r2, r6
 8003dd8:	f001 fe6e 	bl	8005ab8 <_dtoa_r>
 8003ddc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003de0:	4607      	mov	r7, r0
 8003de2:	d102      	bne.n	8003dea <__cvt+0x66>
 8003de4:	f019 0f01 	tst.w	r9, #1
 8003de8:	d022      	beq.n	8003e30 <__cvt+0xac>
 8003dea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003dee:	eb07 0906 	add.w	r9, r7, r6
 8003df2:	d110      	bne.n	8003e16 <__cvt+0x92>
 8003df4:	783b      	ldrb	r3, [r7, #0]
 8003df6:	2b30      	cmp	r3, #48	; 0x30
 8003df8:	d10a      	bne.n	8003e10 <__cvt+0x8c>
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4629      	mov	r1, r5
 8003e02:	f7fc fe71 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e06:	b918      	cbnz	r0, 8003e10 <__cvt+0x8c>
 8003e08:	f1c6 0601 	rsb	r6, r6, #1
 8003e0c:	f8ca 6000 	str.w	r6, [sl]
 8003e10:	f8da 3000 	ldr.w	r3, [sl]
 8003e14:	4499      	add	r9, r3
 8003e16:	2200      	movs	r2, #0
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4620      	mov	r0, r4
 8003e1c:	4629      	mov	r1, r5
 8003e1e:	f7fc fe63 	bl	8000ae8 <__aeabi_dcmpeq>
 8003e22:	b108      	cbz	r0, 8003e28 <__cvt+0xa4>
 8003e24:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e28:	2230      	movs	r2, #48	; 0x30
 8003e2a:	9b03      	ldr	r3, [sp, #12]
 8003e2c:	454b      	cmp	r3, r9
 8003e2e:	d307      	bcc.n	8003e40 <__cvt+0xbc>
 8003e30:	9b03      	ldr	r3, [sp, #12]
 8003e32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e34:	1bdb      	subs	r3, r3, r7
 8003e36:	4638      	mov	r0, r7
 8003e38:	6013      	str	r3, [r2, #0]
 8003e3a:	b004      	add	sp, #16
 8003e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e40:	1c59      	adds	r1, r3, #1
 8003e42:	9103      	str	r1, [sp, #12]
 8003e44:	701a      	strb	r2, [r3, #0]
 8003e46:	e7f0      	b.n	8003e2a <__cvt+0xa6>

08003e48 <__exponent>:
 8003e48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	2900      	cmp	r1, #0
 8003e4e:	bfb8      	it	lt
 8003e50:	4249      	neglt	r1, r1
 8003e52:	f803 2b02 	strb.w	r2, [r3], #2
 8003e56:	bfb4      	ite	lt
 8003e58:	222d      	movlt	r2, #45	; 0x2d
 8003e5a:	222b      	movge	r2, #43	; 0x2b
 8003e5c:	2909      	cmp	r1, #9
 8003e5e:	7042      	strb	r2, [r0, #1]
 8003e60:	dd2a      	ble.n	8003eb8 <__exponent+0x70>
 8003e62:	f10d 0407 	add.w	r4, sp, #7
 8003e66:	46a4      	mov	ip, r4
 8003e68:	270a      	movs	r7, #10
 8003e6a:	46a6      	mov	lr, r4
 8003e6c:	460a      	mov	r2, r1
 8003e6e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003e72:	fb07 1516 	mls	r5, r7, r6, r1
 8003e76:	3530      	adds	r5, #48	; 0x30
 8003e78:	2a63      	cmp	r2, #99	; 0x63
 8003e7a:	f104 34ff 	add.w	r4, r4, #4294967295
 8003e7e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003e82:	4631      	mov	r1, r6
 8003e84:	dcf1      	bgt.n	8003e6a <__exponent+0x22>
 8003e86:	3130      	adds	r1, #48	; 0x30
 8003e88:	f1ae 0502 	sub.w	r5, lr, #2
 8003e8c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003e90:	1c44      	adds	r4, r0, #1
 8003e92:	4629      	mov	r1, r5
 8003e94:	4561      	cmp	r1, ip
 8003e96:	d30a      	bcc.n	8003eae <__exponent+0x66>
 8003e98:	f10d 0209 	add.w	r2, sp, #9
 8003e9c:	eba2 020e 	sub.w	r2, r2, lr
 8003ea0:	4565      	cmp	r5, ip
 8003ea2:	bf88      	it	hi
 8003ea4:	2200      	movhi	r2, #0
 8003ea6:	4413      	add	r3, r2
 8003ea8:	1a18      	subs	r0, r3, r0
 8003eaa:	b003      	add	sp, #12
 8003eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003eb2:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003eb6:	e7ed      	b.n	8003e94 <__exponent+0x4c>
 8003eb8:	2330      	movs	r3, #48	; 0x30
 8003eba:	3130      	adds	r1, #48	; 0x30
 8003ebc:	7083      	strb	r3, [r0, #2]
 8003ebe:	70c1      	strb	r1, [r0, #3]
 8003ec0:	1d03      	adds	r3, r0, #4
 8003ec2:	e7f1      	b.n	8003ea8 <__exponent+0x60>

08003ec4 <_printf_float>:
 8003ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec8:	ed2d 8b02 	vpush	{d8}
 8003ecc:	b08d      	sub	sp, #52	; 0x34
 8003ece:	460c      	mov	r4, r1
 8003ed0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003ed4:	4616      	mov	r6, r2
 8003ed6:	461f      	mov	r7, r3
 8003ed8:	4605      	mov	r5, r0
 8003eda:	f003 f83f 	bl	8006f5c <_localeconv_r>
 8003ede:	f8d0 a000 	ldr.w	sl, [r0]
 8003ee2:	4650      	mov	r0, sl
 8003ee4:	f7fc f984 	bl	80001f0 <strlen>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	930a      	str	r3, [sp, #40]	; 0x28
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	9305      	str	r3, [sp, #20]
 8003ef0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ef4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003ef8:	3307      	adds	r3, #7
 8003efa:	f023 0307 	bic.w	r3, r3, #7
 8003efe:	f103 0208 	add.w	r2, r3, #8
 8003f02:	f8c8 2000 	str.w	r2, [r8]
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003f0e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8003f12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003f16:	9307      	str	r3, [sp, #28]
 8003f18:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f1c:	ee08 0a10 	vmov	s16, r0
 8003f20:	4b9f      	ldr	r3, [pc, #636]	; (80041a0 <_printf_float+0x2dc>)
 8003f22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f26:	f04f 32ff 	mov.w	r2, #4294967295
 8003f2a:	f7fc fe0f 	bl	8000b4c <__aeabi_dcmpun>
 8003f2e:	bb88      	cbnz	r0, 8003f94 <_printf_float+0xd0>
 8003f30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f34:	4b9a      	ldr	r3, [pc, #616]	; (80041a0 <_printf_float+0x2dc>)
 8003f36:	f04f 32ff 	mov.w	r2, #4294967295
 8003f3a:	f7fc fde9 	bl	8000b10 <__aeabi_dcmple>
 8003f3e:	bb48      	cbnz	r0, 8003f94 <_printf_float+0xd0>
 8003f40:	2200      	movs	r2, #0
 8003f42:	2300      	movs	r3, #0
 8003f44:	4640      	mov	r0, r8
 8003f46:	4649      	mov	r1, r9
 8003f48:	f7fc fdd8 	bl	8000afc <__aeabi_dcmplt>
 8003f4c:	b110      	cbz	r0, 8003f54 <_printf_float+0x90>
 8003f4e:	232d      	movs	r3, #45	; 0x2d
 8003f50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003f54:	4b93      	ldr	r3, [pc, #588]	; (80041a4 <_printf_float+0x2e0>)
 8003f56:	4894      	ldr	r0, [pc, #592]	; (80041a8 <_printf_float+0x2e4>)
 8003f58:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8003f5c:	bf94      	ite	ls
 8003f5e:	4698      	movls	r8, r3
 8003f60:	4680      	movhi	r8, r0
 8003f62:	2303      	movs	r3, #3
 8003f64:	6123      	str	r3, [r4, #16]
 8003f66:	9b05      	ldr	r3, [sp, #20]
 8003f68:	f023 0204 	bic.w	r2, r3, #4
 8003f6c:	6022      	str	r2, [r4, #0]
 8003f6e:	f04f 0900 	mov.w	r9, #0
 8003f72:	9700      	str	r7, [sp, #0]
 8003f74:	4633      	mov	r3, r6
 8003f76:	aa0b      	add	r2, sp, #44	; 0x2c
 8003f78:	4621      	mov	r1, r4
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 f9d8 	bl	8004330 <_printf_common>
 8003f80:	3001      	adds	r0, #1
 8003f82:	f040 8090 	bne.w	80040a6 <_printf_float+0x1e2>
 8003f86:	f04f 30ff 	mov.w	r0, #4294967295
 8003f8a:	b00d      	add	sp, #52	; 0x34
 8003f8c:	ecbd 8b02 	vpop	{d8}
 8003f90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f94:	4642      	mov	r2, r8
 8003f96:	464b      	mov	r3, r9
 8003f98:	4640      	mov	r0, r8
 8003f9a:	4649      	mov	r1, r9
 8003f9c:	f7fc fdd6 	bl	8000b4c <__aeabi_dcmpun>
 8003fa0:	b140      	cbz	r0, 8003fb4 <_printf_float+0xf0>
 8003fa2:	464b      	mov	r3, r9
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bfbc      	itt	lt
 8003fa8:	232d      	movlt	r3, #45	; 0x2d
 8003faa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003fae:	487f      	ldr	r0, [pc, #508]	; (80041ac <_printf_float+0x2e8>)
 8003fb0:	4b7f      	ldr	r3, [pc, #508]	; (80041b0 <_printf_float+0x2ec>)
 8003fb2:	e7d1      	b.n	8003f58 <_printf_float+0x94>
 8003fb4:	6863      	ldr	r3, [r4, #4]
 8003fb6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003fba:	9206      	str	r2, [sp, #24]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	d13f      	bne.n	8004040 <_printf_float+0x17c>
 8003fc0:	2306      	movs	r3, #6
 8003fc2:	6063      	str	r3, [r4, #4]
 8003fc4:	9b05      	ldr	r3, [sp, #20]
 8003fc6:	6861      	ldr	r1, [r4, #4]
 8003fc8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9303      	str	r3, [sp, #12]
 8003fd0:	ab0a      	add	r3, sp, #40	; 0x28
 8003fd2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003fd6:	ab09      	add	r3, sp, #36	; 0x24
 8003fd8:	ec49 8b10 	vmov	d0, r8, r9
 8003fdc:	9300      	str	r3, [sp, #0]
 8003fde:	6022      	str	r2, [r4, #0]
 8003fe0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003fe4:	4628      	mov	r0, r5
 8003fe6:	f7ff fecd 	bl	8003d84 <__cvt>
 8003fea:	9b06      	ldr	r3, [sp, #24]
 8003fec:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003fee:	2b47      	cmp	r3, #71	; 0x47
 8003ff0:	4680      	mov	r8, r0
 8003ff2:	d108      	bne.n	8004006 <_printf_float+0x142>
 8003ff4:	1cc8      	adds	r0, r1, #3
 8003ff6:	db02      	blt.n	8003ffe <_printf_float+0x13a>
 8003ff8:	6863      	ldr	r3, [r4, #4]
 8003ffa:	4299      	cmp	r1, r3
 8003ffc:	dd41      	ble.n	8004082 <_printf_float+0x1be>
 8003ffe:	f1ab 0b02 	sub.w	fp, fp, #2
 8004002:	fa5f fb8b 	uxtb.w	fp, fp
 8004006:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800400a:	d820      	bhi.n	800404e <_printf_float+0x18a>
 800400c:	3901      	subs	r1, #1
 800400e:	465a      	mov	r2, fp
 8004010:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004014:	9109      	str	r1, [sp, #36]	; 0x24
 8004016:	f7ff ff17 	bl	8003e48 <__exponent>
 800401a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800401c:	1813      	adds	r3, r2, r0
 800401e:	2a01      	cmp	r2, #1
 8004020:	4681      	mov	r9, r0
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	dc02      	bgt.n	800402c <_printf_float+0x168>
 8004026:	6822      	ldr	r2, [r4, #0]
 8004028:	07d2      	lsls	r2, r2, #31
 800402a:	d501      	bpl.n	8004030 <_printf_float+0x16c>
 800402c:	3301      	adds	r3, #1
 800402e:	6123      	str	r3, [r4, #16]
 8004030:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004034:	2b00      	cmp	r3, #0
 8004036:	d09c      	beq.n	8003f72 <_printf_float+0xae>
 8004038:	232d      	movs	r3, #45	; 0x2d
 800403a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800403e:	e798      	b.n	8003f72 <_printf_float+0xae>
 8004040:	9a06      	ldr	r2, [sp, #24]
 8004042:	2a47      	cmp	r2, #71	; 0x47
 8004044:	d1be      	bne.n	8003fc4 <_printf_float+0x100>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d1bc      	bne.n	8003fc4 <_printf_float+0x100>
 800404a:	2301      	movs	r3, #1
 800404c:	e7b9      	b.n	8003fc2 <_printf_float+0xfe>
 800404e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004052:	d118      	bne.n	8004086 <_printf_float+0x1c2>
 8004054:	2900      	cmp	r1, #0
 8004056:	6863      	ldr	r3, [r4, #4]
 8004058:	dd0b      	ble.n	8004072 <_printf_float+0x1ae>
 800405a:	6121      	str	r1, [r4, #16]
 800405c:	b913      	cbnz	r3, 8004064 <_printf_float+0x1a0>
 800405e:	6822      	ldr	r2, [r4, #0]
 8004060:	07d0      	lsls	r0, r2, #31
 8004062:	d502      	bpl.n	800406a <_printf_float+0x1a6>
 8004064:	3301      	adds	r3, #1
 8004066:	440b      	add	r3, r1
 8004068:	6123      	str	r3, [r4, #16]
 800406a:	65a1      	str	r1, [r4, #88]	; 0x58
 800406c:	f04f 0900 	mov.w	r9, #0
 8004070:	e7de      	b.n	8004030 <_printf_float+0x16c>
 8004072:	b913      	cbnz	r3, 800407a <_printf_float+0x1b6>
 8004074:	6822      	ldr	r2, [r4, #0]
 8004076:	07d2      	lsls	r2, r2, #31
 8004078:	d501      	bpl.n	800407e <_printf_float+0x1ba>
 800407a:	3302      	adds	r3, #2
 800407c:	e7f4      	b.n	8004068 <_printf_float+0x1a4>
 800407e:	2301      	movs	r3, #1
 8004080:	e7f2      	b.n	8004068 <_printf_float+0x1a4>
 8004082:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004088:	4299      	cmp	r1, r3
 800408a:	db05      	blt.n	8004098 <_printf_float+0x1d4>
 800408c:	6823      	ldr	r3, [r4, #0]
 800408e:	6121      	str	r1, [r4, #16]
 8004090:	07d8      	lsls	r0, r3, #31
 8004092:	d5ea      	bpl.n	800406a <_printf_float+0x1a6>
 8004094:	1c4b      	adds	r3, r1, #1
 8004096:	e7e7      	b.n	8004068 <_printf_float+0x1a4>
 8004098:	2900      	cmp	r1, #0
 800409a:	bfd4      	ite	le
 800409c:	f1c1 0202 	rsble	r2, r1, #2
 80040a0:	2201      	movgt	r2, #1
 80040a2:	4413      	add	r3, r2
 80040a4:	e7e0      	b.n	8004068 <_printf_float+0x1a4>
 80040a6:	6823      	ldr	r3, [r4, #0]
 80040a8:	055a      	lsls	r2, r3, #21
 80040aa:	d407      	bmi.n	80040bc <_printf_float+0x1f8>
 80040ac:	6923      	ldr	r3, [r4, #16]
 80040ae:	4642      	mov	r2, r8
 80040b0:	4631      	mov	r1, r6
 80040b2:	4628      	mov	r0, r5
 80040b4:	47b8      	blx	r7
 80040b6:	3001      	adds	r0, #1
 80040b8:	d12c      	bne.n	8004114 <_printf_float+0x250>
 80040ba:	e764      	b.n	8003f86 <_printf_float+0xc2>
 80040bc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80040c0:	f240 80e0 	bls.w	8004284 <_printf_float+0x3c0>
 80040c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80040c8:	2200      	movs	r2, #0
 80040ca:	2300      	movs	r3, #0
 80040cc:	f7fc fd0c 	bl	8000ae8 <__aeabi_dcmpeq>
 80040d0:	2800      	cmp	r0, #0
 80040d2:	d034      	beq.n	800413e <_printf_float+0x27a>
 80040d4:	4a37      	ldr	r2, [pc, #220]	; (80041b4 <_printf_float+0x2f0>)
 80040d6:	2301      	movs	r3, #1
 80040d8:	4631      	mov	r1, r6
 80040da:	4628      	mov	r0, r5
 80040dc:	47b8      	blx	r7
 80040de:	3001      	adds	r0, #1
 80040e0:	f43f af51 	beq.w	8003f86 <_printf_float+0xc2>
 80040e4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80040e8:	429a      	cmp	r2, r3
 80040ea:	db02      	blt.n	80040f2 <_printf_float+0x22e>
 80040ec:	6823      	ldr	r3, [r4, #0]
 80040ee:	07d8      	lsls	r0, r3, #31
 80040f0:	d510      	bpl.n	8004114 <_printf_float+0x250>
 80040f2:	ee18 3a10 	vmov	r3, s16
 80040f6:	4652      	mov	r2, sl
 80040f8:	4631      	mov	r1, r6
 80040fa:	4628      	mov	r0, r5
 80040fc:	47b8      	blx	r7
 80040fe:	3001      	adds	r0, #1
 8004100:	f43f af41 	beq.w	8003f86 <_printf_float+0xc2>
 8004104:	f04f 0800 	mov.w	r8, #0
 8004108:	f104 091a 	add.w	r9, r4, #26
 800410c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800410e:	3b01      	subs	r3, #1
 8004110:	4543      	cmp	r3, r8
 8004112:	dc09      	bgt.n	8004128 <_printf_float+0x264>
 8004114:	6823      	ldr	r3, [r4, #0]
 8004116:	079b      	lsls	r3, r3, #30
 8004118:	f100 8105 	bmi.w	8004326 <_printf_float+0x462>
 800411c:	68e0      	ldr	r0, [r4, #12]
 800411e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004120:	4298      	cmp	r0, r3
 8004122:	bfb8      	it	lt
 8004124:	4618      	movlt	r0, r3
 8004126:	e730      	b.n	8003f8a <_printf_float+0xc6>
 8004128:	2301      	movs	r3, #1
 800412a:	464a      	mov	r2, r9
 800412c:	4631      	mov	r1, r6
 800412e:	4628      	mov	r0, r5
 8004130:	47b8      	blx	r7
 8004132:	3001      	adds	r0, #1
 8004134:	f43f af27 	beq.w	8003f86 <_printf_float+0xc2>
 8004138:	f108 0801 	add.w	r8, r8, #1
 800413c:	e7e6      	b.n	800410c <_printf_float+0x248>
 800413e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	dc39      	bgt.n	80041b8 <_printf_float+0x2f4>
 8004144:	4a1b      	ldr	r2, [pc, #108]	; (80041b4 <_printf_float+0x2f0>)
 8004146:	2301      	movs	r3, #1
 8004148:	4631      	mov	r1, r6
 800414a:	4628      	mov	r0, r5
 800414c:	47b8      	blx	r7
 800414e:	3001      	adds	r0, #1
 8004150:	f43f af19 	beq.w	8003f86 <_printf_float+0xc2>
 8004154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004158:	4313      	orrs	r3, r2
 800415a:	d102      	bne.n	8004162 <_printf_float+0x29e>
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	07d9      	lsls	r1, r3, #31
 8004160:	d5d8      	bpl.n	8004114 <_printf_float+0x250>
 8004162:	ee18 3a10 	vmov	r3, s16
 8004166:	4652      	mov	r2, sl
 8004168:	4631      	mov	r1, r6
 800416a:	4628      	mov	r0, r5
 800416c:	47b8      	blx	r7
 800416e:	3001      	adds	r0, #1
 8004170:	f43f af09 	beq.w	8003f86 <_printf_float+0xc2>
 8004174:	f04f 0900 	mov.w	r9, #0
 8004178:	f104 0a1a 	add.w	sl, r4, #26
 800417c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417e:	425b      	negs	r3, r3
 8004180:	454b      	cmp	r3, r9
 8004182:	dc01      	bgt.n	8004188 <_printf_float+0x2c4>
 8004184:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004186:	e792      	b.n	80040ae <_printf_float+0x1ea>
 8004188:	2301      	movs	r3, #1
 800418a:	4652      	mov	r2, sl
 800418c:	4631      	mov	r1, r6
 800418e:	4628      	mov	r0, r5
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f aef7 	beq.w	8003f86 <_printf_float+0xc2>
 8004198:	f109 0901 	add.w	r9, r9, #1
 800419c:	e7ee      	b.n	800417c <_printf_float+0x2b8>
 800419e:	bf00      	nop
 80041a0:	7fefffff 	.word	0x7fefffff
 80041a4:	08009000 	.word	0x08009000
 80041a8:	08009004 	.word	0x08009004
 80041ac:	0800900c 	.word	0x0800900c
 80041b0:	08009008 	.word	0x08009008
 80041b4:	08009469 	.word	0x08009469
 80041b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80041ba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041bc:	429a      	cmp	r2, r3
 80041be:	bfa8      	it	ge
 80041c0:	461a      	movge	r2, r3
 80041c2:	2a00      	cmp	r2, #0
 80041c4:	4691      	mov	r9, r2
 80041c6:	dc37      	bgt.n	8004238 <_printf_float+0x374>
 80041c8:	f04f 0b00 	mov.w	fp, #0
 80041cc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80041d0:	f104 021a 	add.w	r2, r4, #26
 80041d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80041d6:	9305      	str	r3, [sp, #20]
 80041d8:	eba3 0309 	sub.w	r3, r3, r9
 80041dc:	455b      	cmp	r3, fp
 80041de:	dc33      	bgt.n	8004248 <_printf_float+0x384>
 80041e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041e4:	429a      	cmp	r2, r3
 80041e6:	db3b      	blt.n	8004260 <_printf_float+0x39c>
 80041e8:	6823      	ldr	r3, [r4, #0]
 80041ea:	07da      	lsls	r2, r3, #31
 80041ec:	d438      	bmi.n	8004260 <_printf_float+0x39c>
 80041ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041f0:	9a05      	ldr	r2, [sp, #20]
 80041f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80041f4:	1a9a      	subs	r2, r3, r2
 80041f6:	eba3 0901 	sub.w	r9, r3, r1
 80041fa:	4591      	cmp	r9, r2
 80041fc:	bfa8      	it	ge
 80041fe:	4691      	movge	r9, r2
 8004200:	f1b9 0f00 	cmp.w	r9, #0
 8004204:	dc35      	bgt.n	8004272 <_printf_float+0x3ae>
 8004206:	f04f 0800 	mov.w	r8, #0
 800420a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800420e:	f104 0a1a 	add.w	sl, r4, #26
 8004212:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004216:	1a9b      	subs	r3, r3, r2
 8004218:	eba3 0309 	sub.w	r3, r3, r9
 800421c:	4543      	cmp	r3, r8
 800421e:	f77f af79 	ble.w	8004114 <_printf_float+0x250>
 8004222:	2301      	movs	r3, #1
 8004224:	4652      	mov	r2, sl
 8004226:	4631      	mov	r1, r6
 8004228:	4628      	mov	r0, r5
 800422a:	47b8      	blx	r7
 800422c:	3001      	adds	r0, #1
 800422e:	f43f aeaa 	beq.w	8003f86 <_printf_float+0xc2>
 8004232:	f108 0801 	add.w	r8, r8, #1
 8004236:	e7ec      	b.n	8004212 <_printf_float+0x34e>
 8004238:	4613      	mov	r3, r2
 800423a:	4631      	mov	r1, r6
 800423c:	4642      	mov	r2, r8
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	d1c0      	bne.n	80041c8 <_printf_float+0x304>
 8004246:	e69e      	b.n	8003f86 <_printf_float+0xc2>
 8004248:	2301      	movs	r3, #1
 800424a:	4631      	mov	r1, r6
 800424c:	4628      	mov	r0, r5
 800424e:	9205      	str	r2, [sp, #20]
 8004250:	47b8      	blx	r7
 8004252:	3001      	adds	r0, #1
 8004254:	f43f ae97 	beq.w	8003f86 <_printf_float+0xc2>
 8004258:	9a05      	ldr	r2, [sp, #20]
 800425a:	f10b 0b01 	add.w	fp, fp, #1
 800425e:	e7b9      	b.n	80041d4 <_printf_float+0x310>
 8004260:	ee18 3a10 	vmov	r3, s16
 8004264:	4652      	mov	r2, sl
 8004266:	4631      	mov	r1, r6
 8004268:	4628      	mov	r0, r5
 800426a:	47b8      	blx	r7
 800426c:	3001      	adds	r0, #1
 800426e:	d1be      	bne.n	80041ee <_printf_float+0x32a>
 8004270:	e689      	b.n	8003f86 <_printf_float+0xc2>
 8004272:	9a05      	ldr	r2, [sp, #20]
 8004274:	464b      	mov	r3, r9
 8004276:	4442      	add	r2, r8
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	d1c1      	bne.n	8004206 <_printf_float+0x342>
 8004282:	e680      	b.n	8003f86 <_printf_float+0xc2>
 8004284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004286:	2a01      	cmp	r2, #1
 8004288:	dc01      	bgt.n	800428e <_printf_float+0x3ca>
 800428a:	07db      	lsls	r3, r3, #31
 800428c:	d538      	bpl.n	8004300 <_printf_float+0x43c>
 800428e:	2301      	movs	r3, #1
 8004290:	4642      	mov	r2, r8
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	47b8      	blx	r7
 8004298:	3001      	adds	r0, #1
 800429a:	f43f ae74 	beq.w	8003f86 <_printf_float+0xc2>
 800429e:	ee18 3a10 	vmov	r3, s16
 80042a2:	4652      	mov	r2, sl
 80042a4:	4631      	mov	r1, r6
 80042a6:	4628      	mov	r0, r5
 80042a8:	47b8      	blx	r7
 80042aa:	3001      	adds	r0, #1
 80042ac:	f43f ae6b 	beq.w	8003f86 <_printf_float+0xc2>
 80042b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80042b4:	2200      	movs	r2, #0
 80042b6:	2300      	movs	r3, #0
 80042b8:	f7fc fc16 	bl	8000ae8 <__aeabi_dcmpeq>
 80042bc:	b9d8      	cbnz	r0, 80042f6 <_printf_float+0x432>
 80042be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042c0:	f108 0201 	add.w	r2, r8, #1
 80042c4:	3b01      	subs	r3, #1
 80042c6:	4631      	mov	r1, r6
 80042c8:	4628      	mov	r0, r5
 80042ca:	47b8      	blx	r7
 80042cc:	3001      	adds	r0, #1
 80042ce:	d10e      	bne.n	80042ee <_printf_float+0x42a>
 80042d0:	e659      	b.n	8003f86 <_printf_float+0xc2>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4652      	mov	r2, sl
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	f43f ae52 	beq.w	8003f86 <_printf_float+0xc2>
 80042e2:	f108 0801 	add.w	r8, r8, #1
 80042e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042e8:	3b01      	subs	r3, #1
 80042ea:	4543      	cmp	r3, r8
 80042ec:	dcf1      	bgt.n	80042d2 <_printf_float+0x40e>
 80042ee:	464b      	mov	r3, r9
 80042f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80042f4:	e6dc      	b.n	80040b0 <_printf_float+0x1ec>
 80042f6:	f04f 0800 	mov.w	r8, #0
 80042fa:	f104 0a1a 	add.w	sl, r4, #26
 80042fe:	e7f2      	b.n	80042e6 <_printf_float+0x422>
 8004300:	2301      	movs	r3, #1
 8004302:	4642      	mov	r2, r8
 8004304:	e7df      	b.n	80042c6 <_printf_float+0x402>
 8004306:	2301      	movs	r3, #1
 8004308:	464a      	mov	r2, r9
 800430a:	4631      	mov	r1, r6
 800430c:	4628      	mov	r0, r5
 800430e:	47b8      	blx	r7
 8004310:	3001      	adds	r0, #1
 8004312:	f43f ae38 	beq.w	8003f86 <_printf_float+0xc2>
 8004316:	f108 0801 	add.w	r8, r8, #1
 800431a:	68e3      	ldr	r3, [r4, #12]
 800431c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800431e:	1a5b      	subs	r3, r3, r1
 8004320:	4543      	cmp	r3, r8
 8004322:	dcf0      	bgt.n	8004306 <_printf_float+0x442>
 8004324:	e6fa      	b.n	800411c <_printf_float+0x258>
 8004326:	f04f 0800 	mov.w	r8, #0
 800432a:	f104 0919 	add.w	r9, r4, #25
 800432e:	e7f4      	b.n	800431a <_printf_float+0x456>

08004330 <_printf_common>:
 8004330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004334:	4616      	mov	r6, r2
 8004336:	4699      	mov	r9, r3
 8004338:	688a      	ldr	r2, [r1, #8]
 800433a:	690b      	ldr	r3, [r1, #16]
 800433c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004340:	4293      	cmp	r3, r2
 8004342:	bfb8      	it	lt
 8004344:	4613      	movlt	r3, r2
 8004346:	6033      	str	r3, [r6, #0]
 8004348:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800434c:	4607      	mov	r7, r0
 800434e:	460c      	mov	r4, r1
 8004350:	b10a      	cbz	r2, 8004356 <_printf_common+0x26>
 8004352:	3301      	adds	r3, #1
 8004354:	6033      	str	r3, [r6, #0]
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	0699      	lsls	r1, r3, #26
 800435a:	bf42      	ittt	mi
 800435c:	6833      	ldrmi	r3, [r6, #0]
 800435e:	3302      	addmi	r3, #2
 8004360:	6033      	strmi	r3, [r6, #0]
 8004362:	6825      	ldr	r5, [r4, #0]
 8004364:	f015 0506 	ands.w	r5, r5, #6
 8004368:	d106      	bne.n	8004378 <_printf_common+0x48>
 800436a:	f104 0a19 	add.w	sl, r4, #25
 800436e:	68e3      	ldr	r3, [r4, #12]
 8004370:	6832      	ldr	r2, [r6, #0]
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	42ab      	cmp	r3, r5
 8004376:	dc26      	bgt.n	80043c6 <_printf_common+0x96>
 8004378:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800437c:	1e13      	subs	r3, r2, #0
 800437e:	6822      	ldr	r2, [r4, #0]
 8004380:	bf18      	it	ne
 8004382:	2301      	movne	r3, #1
 8004384:	0692      	lsls	r2, r2, #26
 8004386:	d42b      	bmi.n	80043e0 <_printf_common+0xb0>
 8004388:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800438c:	4649      	mov	r1, r9
 800438e:	4638      	mov	r0, r7
 8004390:	47c0      	blx	r8
 8004392:	3001      	adds	r0, #1
 8004394:	d01e      	beq.n	80043d4 <_printf_common+0xa4>
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	68e5      	ldr	r5, [r4, #12]
 800439a:	6832      	ldr	r2, [r6, #0]
 800439c:	f003 0306 	and.w	r3, r3, #6
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	bf08      	it	eq
 80043a4:	1aad      	subeq	r5, r5, r2
 80043a6:	68a3      	ldr	r3, [r4, #8]
 80043a8:	6922      	ldr	r2, [r4, #16]
 80043aa:	bf0c      	ite	eq
 80043ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043b0:	2500      	movne	r5, #0
 80043b2:	4293      	cmp	r3, r2
 80043b4:	bfc4      	itt	gt
 80043b6:	1a9b      	subgt	r3, r3, r2
 80043b8:	18ed      	addgt	r5, r5, r3
 80043ba:	2600      	movs	r6, #0
 80043bc:	341a      	adds	r4, #26
 80043be:	42b5      	cmp	r5, r6
 80043c0:	d11a      	bne.n	80043f8 <_printf_common+0xc8>
 80043c2:	2000      	movs	r0, #0
 80043c4:	e008      	b.n	80043d8 <_printf_common+0xa8>
 80043c6:	2301      	movs	r3, #1
 80043c8:	4652      	mov	r2, sl
 80043ca:	4649      	mov	r1, r9
 80043cc:	4638      	mov	r0, r7
 80043ce:	47c0      	blx	r8
 80043d0:	3001      	adds	r0, #1
 80043d2:	d103      	bne.n	80043dc <_printf_common+0xac>
 80043d4:	f04f 30ff 	mov.w	r0, #4294967295
 80043d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043dc:	3501      	adds	r5, #1
 80043de:	e7c6      	b.n	800436e <_printf_common+0x3e>
 80043e0:	18e1      	adds	r1, r4, r3
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	2030      	movs	r0, #48	; 0x30
 80043e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80043ea:	4422      	add	r2, r4
 80043ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80043f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80043f4:	3302      	adds	r3, #2
 80043f6:	e7c7      	b.n	8004388 <_printf_common+0x58>
 80043f8:	2301      	movs	r3, #1
 80043fa:	4622      	mov	r2, r4
 80043fc:	4649      	mov	r1, r9
 80043fe:	4638      	mov	r0, r7
 8004400:	47c0      	blx	r8
 8004402:	3001      	adds	r0, #1
 8004404:	d0e6      	beq.n	80043d4 <_printf_common+0xa4>
 8004406:	3601      	adds	r6, #1
 8004408:	e7d9      	b.n	80043be <_printf_common+0x8e>
	...

0800440c <_printf_i>:
 800440c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004410:	7e0f      	ldrb	r7, [r1, #24]
 8004412:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004414:	2f78      	cmp	r7, #120	; 0x78
 8004416:	4691      	mov	r9, r2
 8004418:	4680      	mov	r8, r0
 800441a:	460c      	mov	r4, r1
 800441c:	469a      	mov	sl, r3
 800441e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004422:	d807      	bhi.n	8004434 <_printf_i+0x28>
 8004424:	2f62      	cmp	r7, #98	; 0x62
 8004426:	d80a      	bhi.n	800443e <_printf_i+0x32>
 8004428:	2f00      	cmp	r7, #0
 800442a:	f000 80d8 	beq.w	80045de <_printf_i+0x1d2>
 800442e:	2f58      	cmp	r7, #88	; 0x58
 8004430:	f000 80a3 	beq.w	800457a <_printf_i+0x16e>
 8004434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004438:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800443c:	e03a      	b.n	80044b4 <_printf_i+0xa8>
 800443e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004442:	2b15      	cmp	r3, #21
 8004444:	d8f6      	bhi.n	8004434 <_printf_i+0x28>
 8004446:	a101      	add	r1, pc, #4	; (adr r1, 800444c <_printf_i+0x40>)
 8004448:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800444c:	080044a5 	.word	0x080044a5
 8004450:	080044b9 	.word	0x080044b9
 8004454:	08004435 	.word	0x08004435
 8004458:	08004435 	.word	0x08004435
 800445c:	08004435 	.word	0x08004435
 8004460:	08004435 	.word	0x08004435
 8004464:	080044b9 	.word	0x080044b9
 8004468:	08004435 	.word	0x08004435
 800446c:	08004435 	.word	0x08004435
 8004470:	08004435 	.word	0x08004435
 8004474:	08004435 	.word	0x08004435
 8004478:	080045c5 	.word	0x080045c5
 800447c:	080044e9 	.word	0x080044e9
 8004480:	080045a7 	.word	0x080045a7
 8004484:	08004435 	.word	0x08004435
 8004488:	08004435 	.word	0x08004435
 800448c:	080045e7 	.word	0x080045e7
 8004490:	08004435 	.word	0x08004435
 8004494:	080044e9 	.word	0x080044e9
 8004498:	08004435 	.word	0x08004435
 800449c:	08004435 	.word	0x08004435
 80044a0:	080045af 	.word	0x080045af
 80044a4:	682b      	ldr	r3, [r5, #0]
 80044a6:	1d1a      	adds	r2, r3, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	602a      	str	r2, [r5, #0]
 80044ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044b4:	2301      	movs	r3, #1
 80044b6:	e0a3      	b.n	8004600 <_printf_i+0x1f4>
 80044b8:	6820      	ldr	r0, [r4, #0]
 80044ba:	6829      	ldr	r1, [r5, #0]
 80044bc:	0606      	lsls	r6, r0, #24
 80044be:	f101 0304 	add.w	r3, r1, #4
 80044c2:	d50a      	bpl.n	80044da <_printf_i+0xce>
 80044c4:	680e      	ldr	r6, [r1, #0]
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	2e00      	cmp	r6, #0
 80044ca:	da03      	bge.n	80044d4 <_printf_i+0xc8>
 80044cc:	232d      	movs	r3, #45	; 0x2d
 80044ce:	4276      	negs	r6, r6
 80044d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044d4:	485e      	ldr	r0, [pc, #376]	; (8004650 <_printf_i+0x244>)
 80044d6:	230a      	movs	r3, #10
 80044d8:	e019      	b.n	800450e <_printf_i+0x102>
 80044da:	680e      	ldr	r6, [r1, #0]
 80044dc:	602b      	str	r3, [r5, #0]
 80044de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044e2:	bf18      	it	ne
 80044e4:	b236      	sxthne	r6, r6
 80044e6:	e7ef      	b.n	80044c8 <_printf_i+0xbc>
 80044e8:	682b      	ldr	r3, [r5, #0]
 80044ea:	6820      	ldr	r0, [r4, #0]
 80044ec:	1d19      	adds	r1, r3, #4
 80044ee:	6029      	str	r1, [r5, #0]
 80044f0:	0601      	lsls	r1, r0, #24
 80044f2:	d501      	bpl.n	80044f8 <_printf_i+0xec>
 80044f4:	681e      	ldr	r6, [r3, #0]
 80044f6:	e002      	b.n	80044fe <_printf_i+0xf2>
 80044f8:	0646      	lsls	r6, r0, #25
 80044fa:	d5fb      	bpl.n	80044f4 <_printf_i+0xe8>
 80044fc:	881e      	ldrh	r6, [r3, #0]
 80044fe:	4854      	ldr	r0, [pc, #336]	; (8004650 <_printf_i+0x244>)
 8004500:	2f6f      	cmp	r7, #111	; 0x6f
 8004502:	bf0c      	ite	eq
 8004504:	2308      	moveq	r3, #8
 8004506:	230a      	movne	r3, #10
 8004508:	2100      	movs	r1, #0
 800450a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800450e:	6865      	ldr	r5, [r4, #4]
 8004510:	60a5      	str	r5, [r4, #8]
 8004512:	2d00      	cmp	r5, #0
 8004514:	bfa2      	ittt	ge
 8004516:	6821      	ldrge	r1, [r4, #0]
 8004518:	f021 0104 	bicge.w	r1, r1, #4
 800451c:	6021      	strge	r1, [r4, #0]
 800451e:	b90e      	cbnz	r6, 8004524 <_printf_i+0x118>
 8004520:	2d00      	cmp	r5, #0
 8004522:	d04d      	beq.n	80045c0 <_printf_i+0x1b4>
 8004524:	4615      	mov	r5, r2
 8004526:	fbb6 f1f3 	udiv	r1, r6, r3
 800452a:	fb03 6711 	mls	r7, r3, r1, r6
 800452e:	5dc7      	ldrb	r7, [r0, r7]
 8004530:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004534:	4637      	mov	r7, r6
 8004536:	42bb      	cmp	r3, r7
 8004538:	460e      	mov	r6, r1
 800453a:	d9f4      	bls.n	8004526 <_printf_i+0x11a>
 800453c:	2b08      	cmp	r3, #8
 800453e:	d10b      	bne.n	8004558 <_printf_i+0x14c>
 8004540:	6823      	ldr	r3, [r4, #0]
 8004542:	07de      	lsls	r6, r3, #31
 8004544:	d508      	bpl.n	8004558 <_printf_i+0x14c>
 8004546:	6923      	ldr	r3, [r4, #16]
 8004548:	6861      	ldr	r1, [r4, #4]
 800454a:	4299      	cmp	r1, r3
 800454c:	bfde      	ittt	le
 800454e:	2330      	movle	r3, #48	; 0x30
 8004550:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004554:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004558:	1b52      	subs	r2, r2, r5
 800455a:	6122      	str	r2, [r4, #16]
 800455c:	f8cd a000 	str.w	sl, [sp]
 8004560:	464b      	mov	r3, r9
 8004562:	aa03      	add	r2, sp, #12
 8004564:	4621      	mov	r1, r4
 8004566:	4640      	mov	r0, r8
 8004568:	f7ff fee2 	bl	8004330 <_printf_common>
 800456c:	3001      	adds	r0, #1
 800456e:	d14c      	bne.n	800460a <_printf_i+0x1fe>
 8004570:	f04f 30ff 	mov.w	r0, #4294967295
 8004574:	b004      	add	sp, #16
 8004576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800457a:	4835      	ldr	r0, [pc, #212]	; (8004650 <_printf_i+0x244>)
 800457c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004580:	6829      	ldr	r1, [r5, #0]
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	f851 6b04 	ldr.w	r6, [r1], #4
 8004588:	6029      	str	r1, [r5, #0]
 800458a:	061d      	lsls	r5, r3, #24
 800458c:	d514      	bpl.n	80045b8 <_printf_i+0x1ac>
 800458e:	07df      	lsls	r7, r3, #31
 8004590:	bf44      	itt	mi
 8004592:	f043 0320 	orrmi.w	r3, r3, #32
 8004596:	6023      	strmi	r3, [r4, #0]
 8004598:	b91e      	cbnz	r6, 80045a2 <_printf_i+0x196>
 800459a:	6823      	ldr	r3, [r4, #0]
 800459c:	f023 0320 	bic.w	r3, r3, #32
 80045a0:	6023      	str	r3, [r4, #0]
 80045a2:	2310      	movs	r3, #16
 80045a4:	e7b0      	b.n	8004508 <_printf_i+0xfc>
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	f043 0320 	orr.w	r3, r3, #32
 80045ac:	6023      	str	r3, [r4, #0]
 80045ae:	2378      	movs	r3, #120	; 0x78
 80045b0:	4828      	ldr	r0, [pc, #160]	; (8004654 <_printf_i+0x248>)
 80045b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045b6:	e7e3      	b.n	8004580 <_printf_i+0x174>
 80045b8:	0659      	lsls	r1, r3, #25
 80045ba:	bf48      	it	mi
 80045bc:	b2b6      	uxthmi	r6, r6
 80045be:	e7e6      	b.n	800458e <_printf_i+0x182>
 80045c0:	4615      	mov	r5, r2
 80045c2:	e7bb      	b.n	800453c <_printf_i+0x130>
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	6826      	ldr	r6, [r4, #0]
 80045c8:	6961      	ldr	r1, [r4, #20]
 80045ca:	1d18      	adds	r0, r3, #4
 80045cc:	6028      	str	r0, [r5, #0]
 80045ce:	0635      	lsls	r5, r6, #24
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	d501      	bpl.n	80045d8 <_printf_i+0x1cc>
 80045d4:	6019      	str	r1, [r3, #0]
 80045d6:	e002      	b.n	80045de <_printf_i+0x1d2>
 80045d8:	0670      	lsls	r0, r6, #25
 80045da:	d5fb      	bpl.n	80045d4 <_printf_i+0x1c8>
 80045dc:	8019      	strh	r1, [r3, #0]
 80045de:	2300      	movs	r3, #0
 80045e0:	6123      	str	r3, [r4, #16]
 80045e2:	4615      	mov	r5, r2
 80045e4:	e7ba      	b.n	800455c <_printf_i+0x150>
 80045e6:	682b      	ldr	r3, [r5, #0]
 80045e8:	1d1a      	adds	r2, r3, #4
 80045ea:	602a      	str	r2, [r5, #0]
 80045ec:	681d      	ldr	r5, [r3, #0]
 80045ee:	6862      	ldr	r2, [r4, #4]
 80045f0:	2100      	movs	r1, #0
 80045f2:	4628      	mov	r0, r5
 80045f4:	f7fb fe04 	bl	8000200 <memchr>
 80045f8:	b108      	cbz	r0, 80045fe <_printf_i+0x1f2>
 80045fa:	1b40      	subs	r0, r0, r5
 80045fc:	6060      	str	r0, [r4, #4]
 80045fe:	6863      	ldr	r3, [r4, #4]
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	2300      	movs	r3, #0
 8004604:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004608:	e7a8      	b.n	800455c <_printf_i+0x150>
 800460a:	6923      	ldr	r3, [r4, #16]
 800460c:	462a      	mov	r2, r5
 800460e:	4649      	mov	r1, r9
 8004610:	4640      	mov	r0, r8
 8004612:	47d0      	blx	sl
 8004614:	3001      	adds	r0, #1
 8004616:	d0ab      	beq.n	8004570 <_printf_i+0x164>
 8004618:	6823      	ldr	r3, [r4, #0]
 800461a:	079b      	lsls	r3, r3, #30
 800461c:	d413      	bmi.n	8004646 <_printf_i+0x23a>
 800461e:	68e0      	ldr	r0, [r4, #12]
 8004620:	9b03      	ldr	r3, [sp, #12]
 8004622:	4298      	cmp	r0, r3
 8004624:	bfb8      	it	lt
 8004626:	4618      	movlt	r0, r3
 8004628:	e7a4      	b.n	8004574 <_printf_i+0x168>
 800462a:	2301      	movs	r3, #1
 800462c:	4632      	mov	r2, r6
 800462e:	4649      	mov	r1, r9
 8004630:	4640      	mov	r0, r8
 8004632:	47d0      	blx	sl
 8004634:	3001      	adds	r0, #1
 8004636:	d09b      	beq.n	8004570 <_printf_i+0x164>
 8004638:	3501      	adds	r5, #1
 800463a:	68e3      	ldr	r3, [r4, #12]
 800463c:	9903      	ldr	r1, [sp, #12]
 800463e:	1a5b      	subs	r3, r3, r1
 8004640:	42ab      	cmp	r3, r5
 8004642:	dcf2      	bgt.n	800462a <_printf_i+0x21e>
 8004644:	e7eb      	b.n	800461e <_printf_i+0x212>
 8004646:	2500      	movs	r5, #0
 8004648:	f104 0619 	add.w	r6, r4, #25
 800464c:	e7f5      	b.n	800463a <_printf_i+0x22e>
 800464e:	bf00      	nop
 8004650:	08009010 	.word	0x08009010
 8004654:	08009021 	.word	0x08009021

08004658 <_scanf_float>:
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	b087      	sub	sp, #28
 800465e:	4617      	mov	r7, r2
 8004660:	9303      	str	r3, [sp, #12]
 8004662:	688b      	ldr	r3, [r1, #8]
 8004664:	1e5a      	subs	r2, r3, #1
 8004666:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800466a:	bf83      	ittte	hi
 800466c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004670:	195b      	addhi	r3, r3, r5
 8004672:	9302      	strhi	r3, [sp, #8]
 8004674:	2300      	movls	r3, #0
 8004676:	bf86      	itte	hi
 8004678:	f240 135d 	movwhi	r3, #349	; 0x15d
 800467c:	608b      	strhi	r3, [r1, #8]
 800467e:	9302      	strls	r3, [sp, #8]
 8004680:	680b      	ldr	r3, [r1, #0]
 8004682:	468b      	mov	fp, r1
 8004684:	2500      	movs	r5, #0
 8004686:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800468a:	f84b 3b1c 	str.w	r3, [fp], #28
 800468e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004692:	4680      	mov	r8, r0
 8004694:	460c      	mov	r4, r1
 8004696:	465e      	mov	r6, fp
 8004698:	46aa      	mov	sl, r5
 800469a:	46a9      	mov	r9, r5
 800469c:	9501      	str	r5, [sp, #4]
 800469e:	68a2      	ldr	r2, [r4, #8]
 80046a0:	b152      	cbz	r2, 80046b8 <_scanf_float+0x60>
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b4e      	cmp	r3, #78	; 0x4e
 80046a8:	d864      	bhi.n	8004774 <_scanf_float+0x11c>
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d83c      	bhi.n	8004728 <_scanf_float+0xd0>
 80046ae:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80046b2:	b2c8      	uxtb	r0, r1
 80046b4:	280e      	cmp	r0, #14
 80046b6:	d93a      	bls.n	800472e <_scanf_float+0xd6>
 80046b8:	f1b9 0f00 	cmp.w	r9, #0
 80046bc:	d003      	beq.n	80046c6 <_scanf_float+0x6e>
 80046be:	6823      	ldr	r3, [r4, #0]
 80046c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c4:	6023      	str	r3, [r4, #0]
 80046c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80046ca:	f1ba 0f01 	cmp.w	sl, #1
 80046ce:	f200 8113 	bhi.w	80048f8 <_scanf_float+0x2a0>
 80046d2:	455e      	cmp	r6, fp
 80046d4:	f200 8105 	bhi.w	80048e2 <_scanf_float+0x28a>
 80046d8:	2501      	movs	r5, #1
 80046da:	4628      	mov	r0, r5
 80046dc:	b007      	add	sp, #28
 80046de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046e2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80046e6:	2a0d      	cmp	r2, #13
 80046e8:	d8e6      	bhi.n	80046b8 <_scanf_float+0x60>
 80046ea:	a101      	add	r1, pc, #4	; (adr r1, 80046f0 <_scanf_float+0x98>)
 80046ec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80046f0:	0800482f 	.word	0x0800482f
 80046f4:	080046b9 	.word	0x080046b9
 80046f8:	080046b9 	.word	0x080046b9
 80046fc:	080046b9 	.word	0x080046b9
 8004700:	0800488f 	.word	0x0800488f
 8004704:	08004867 	.word	0x08004867
 8004708:	080046b9 	.word	0x080046b9
 800470c:	080046b9 	.word	0x080046b9
 8004710:	0800483d 	.word	0x0800483d
 8004714:	080046b9 	.word	0x080046b9
 8004718:	080046b9 	.word	0x080046b9
 800471c:	080046b9 	.word	0x080046b9
 8004720:	080046b9 	.word	0x080046b9
 8004724:	080047f5 	.word	0x080047f5
 8004728:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800472c:	e7db      	b.n	80046e6 <_scanf_float+0x8e>
 800472e:	290e      	cmp	r1, #14
 8004730:	d8c2      	bhi.n	80046b8 <_scanf_float+0x60>
 8004732:	a001      	add	r0, pc, #4	; (adr r0, 8004738 <_scanf_float+0xe0>)
 8004734:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004738:	080047e7 	.word	0x080047e7
 800473c:	080046b9 	.word	0x080046b9
 8004740:	080047e7 	.word	0x080047e7
 8004744:	0800487b 	.word	0x0800487b
 8004748:	080046b9 	.word	0x080046b9
 800474c:	08004795 	.word	0x08004795
 8004750:	080047d1 	.word	0x080047d1
 8004754:	080047d1 	.word	0x080047d1
 8004758:	080047d1 	.word	0x080047d1
 800475c:	080047d1 	.word	0x080047d1
 8004760:	080047d1 	.word	0x080047d1
 8004764:	080047d1 	.word	0x080047d1
 8004768:	080047d1 	.word	0x080047d1
 800476c:	080047d1 	.word	0x080047d1
 8004770:	080047d1 	.word	0x080047d1
 8004774:	2b6e      	cmp	r3, #110	; 0x6e
 8004776:	d809      	bhi.n	800478c <_scanf_float+0x134>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d8b2      	bhi.n	80046e2 <_scanf_float+0x8a>
 800477c:	2b54      	cmp	r3, #84	; 0x54
 800477e:	d077      	beq.n	8004870 <_scanf_float+0x218>
 8004780:	2b59      	cmp	r3, #89	; 0x59
 8004782:	d199      	bne.n	80046b8 <_scanf_float+0x60>
 8004784:	2d07      	cmp	r5, #7
 8004786:	d197      	bne.n	80046b8 <_scanf_float+0x60>
 8004788:	2508      	movs	r5, #8
 800478a:	e029      	b.n	80047e0 <_scanf_float+0x188>
 800478c:	2b74      	cmp	r3, #116	; 0x74
 800478e:	d06f      	beq.n	8004870 <_scanf_float+0x218>
 8004790:	2b79      	cmp	r3, #121	; 0x79
 8004792:	e7f6      	b.n	8004782 <_scanf_float+0x12a>
 8004794:	6821      	ldr	r1, [r4, #0]
 8004796:	05c8      	lsls	r0, r1, #23
 8004798:	d51a      	bpl.n	80047d0 <_scanf_float+0x178>
 800479a:	9b02      	ldr	r3, [sp, #8]
 800479c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80047a0:	6021      	str	r1, [r4, #0]
 80047a2:	f109 0901 	add.w	r9, r9, #1
 80047a6:	b11b      	cbz	r3, 80047b0 <_scanf_float+0x158>
 80047a8:	3b01      	subs	r3, #1
 80047aa:	3201      	adds	r2, #1
 80047ac:	9302      	str	r3, [sp, #8]
 80047ae:	60a2      	str	r2, [r4, #8]
 80047b0:	68a3      	ldr	r3, [r4, #8]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	60a3      	str	r3, [r4, #8]
 80047b6:	6923      	ldr	r3, [r4, #16]
 80047b8:	3301      	adds	r3, #1
 80047ba:	6123      	str	r3, [r4, #16]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3b01      	subs	r3, #1
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	607b      	str	r3, [r7, #4]
 80047c4:	f340 8084 	ble.w	80048d0 <_scanf_float+0x278>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	3301      	adds	r3, #1
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	e766      	b.n	800469e <_scanf_float+0x46>
 80047d0:	eb1a 0f05 	cmn.w	sl, r5
 80047d4:	f47f af70 	bne.w	80046b8 <_scanf_float+0x60>
 80047d8:	6822      	ldr	r2, [r4, #0]
 80047da:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80047de:	6022      	str	r2, [r4, #0]
 80047e0:	f806 3b01 	strb.w	r3, [r6], #1
 80047e4:	e7e4      	b.n	80047b0 <_scanf_float+0x158>
 80047e6:	6822      	ldr	r2, [r4, #0]
 80047e8:	0610      	lsls	r0, r2, #24
 80047ea:	f57f af65 	bpl.w	80046b8 <_scanf_float+0x60>
 80047ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047f2:	e7f4      	b.n	80047de <_scanf_float+0x186>
 80047f4:	f1ba 0f00 	cmp.w	sl, #0
 80047f8:	d10e      	bne.n	8004818 <_scanf_float+0x1c0>
 80047fa:	f1b9 0f00 	cmp.w	r9, #0
 80047fe:	d10e      	bne.n	800481e <_scanf_float+0x1c6>
 8004800:	6822      	ldr	r2, [r4, #0]
 8004802:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8004806:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800480a:	d108      	bne.n	800481e <_scanf_float+0x1c6>
 800480c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004810:	6022      	str	r2, [r4, #0]
 8004812:	f04f 0a01 	mov.w	sl, #1
 8004816:	e7e3      	b.n	80047e0 <_scanf_float+0x188>
 8004818:	f1ba 0f02 	cmp.w	sl, #2
 800481c:	d055      	beq.n	80048ca <_scanf_float+0x272>
 800481e:	2d01      	cmp	r5, #1
 8004820:	d002      	beq.n	8004828 <_scanf_float+0x1d0>
 8004822:	2d04      	cmp	r5, #4
 8004824:	f47f af48 	bne.w	80046b8 <_scanf_float+0x60>
 8004828:	3501      	adds	r5, #1
 800482a:	b2ed      	uxtb	r5, r5
 800482c:	e7d8      	b.n	80047e0 <_scanf_float+0x188>
 800482e:	f1ba 0f01 	cmp.w	sl, #1
 8004832:	f47f af41 	bne.w	80046b8 <_scanf_float+0x60>
 8004836:	f04f 0a02 	mov.w	sl, #2
 800483a:	e7d1      	b.n	80047e0 <_scanf_float+0x188>
 800483c:	b97d      	cbnz	r5, 800485e <_scanf_float+0x206>
 800483e:	f1b9 0f00 	cmp.w	r9, #0
 8004842:	f47f af3c 	bne.w	80046be <_scanf_float+0x66>
 8004846:	6822      	ldr	r2, [r4, #0]
 8004848:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800484c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8004850:	f47f af39 	bne.w	80046c6 <_scanf_float+0x6e>
 8004854:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8004858:	6022      	str	r2, [r4, #0]
 800485a:	2501      	movs	r5, #1
 800485c:	e7c0      	b.n	80047e0 <_scanf_float+0x188>
 800485e:	2d03      	cmp	r5, #3
 8004860:	d0e2      	beq.n	8004828 <_scanf_float+0x1d0>
 8004862:	2d05      	cmp	r5, #5
 8004864:	e7de      	b.n	8004824 <_scanf_float+0x1cc>
 8004866:	2d02      	cmp	r5, #2
 8004868:	f47f af26 	bne.w	80046b8 <_scanf_float+0x60>
 800486c:	2503      	movs	r5, #3
 800486e:	e7b7      	b.n	80047e0 <_scanf_float+0x188>
 8004870:	2d06      	cmp	r5, #6
 8004872:	f47f af21 	bne.w	80046b8 <_scanf_float+0x60>
 8004876:	2507      	movs	r5, #7
 8004878:	e7b2      	b.n	80047e0 <_scanf_float+0x188>
 800487a:	6822      	ldr	r2, [r4, #0]
 800487c:	0591      	lsls	r1, r2, #22
 800487e:	f57f af1b 	bpl.w	80046b8 <_scanf_float+0x60>
 8004882:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	f8cd 9004 	str.w	r9, [sp, #4]
 800488c:	e7a8      	b.n	80047e0 <_scanf_float+0x188>
 800488e:	6822      	ldr	r2, [r4, #0]
 8004890:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8004894:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8004898:	d006      	beq.n	80048a8 <_scanf_float+0x250>
 800489a:	0550      	lsls	r0, r2, #21
 800489c:	f57f af0c 	bpl.w	80046b8 <_scanf_float+0x60>
 80048a0:	f1b9 0f00 	cmp.w	r9, #0
 80048a4:	f43f af0f 	beq.w	80046c6 <_scanf_float+0x6e>
 80048a8:	0591      	lsls	r1, r2, #22
 80048aa:	bf58      	it	pl
 80048ac:	9901      	ldrpl	r1, [sp, #4]
 80048ae:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80048b2:	bf58      	it	pl
 80048b4:	eba9 0101 	subpl.w	r1, r9, r1
 80048b8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80048bc:	bf58      	it	pl
 80048be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80048c2:	6022      	str	r2, [r4, #0]
 80048c4:	f04f 0900 	mov.w	r9, #0
 80048c8:	e78a      	b.n	80047e0 <_scanf_float+0x188>
 80048ca:	f04f 0a03 	mov.w	sl, #3
 80048ce:	e787      	b.n	80047e0 <_scanf_float+0x188>
 80048d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80048d4:	4639      	mov	r1, r7
 80048d6:	4640      	mov	r0, r8
 80048d8:	4798      	blx	r3
 80048da:	2800      	cmp	r0, #0
 80048dc:	f43f aedf 	beq.w	800469e <_scanf_float+0x46>
 80048e0:	e6ea      	b.n	80046b8 <_scanf_float+0x60>
 80048e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80048e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80048ea:	463a      	mov	r2, r7
 80048ec:	4640      	mov	r0, r8
 80048ee:	4798      	blx	r3
 80048f0:	6923      	ldr	r3, [r4, #16]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	6123      	str	r3, [r4, #16]
 80048f6:	e6ec      	b.n	80046d2 <_scanf_float+0x7a>
 80048f8:	1e6b      	subs	r3, r5, #1
 80048fa:	2b06      	cmp	r3, #6
 80048fc:	d825      	bhi.n	800494a <_scanf_float+0x2f2>
 80048fe:	2d02      	cmp	r5, #2
 8004900:	d836      	bhi.n	8004970 <_scanf_float+0x318>
 8004902:	455e      	cmp	r6, fp
 8004904:	f67f aee8 	bls.w	80046d8 <_scanf_float+0x80>
 8004908:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800490c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004910:	463a      	mov	r2, r7
 8004912:	4640      	mov	r0, r8
 8004914:	4798      	blx	r3
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	3b01      	subs	r3, #1
 800491a:	6123      	str	r3, [r4, #16]
 800491c:	e7f1      	b.n	8004902 <_scanf_float+0x2aa>
 800491e:	9802      	ldr	r0, [sp, #8]
 8004920:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004924:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004928:	9002      	str	r0, [sp, #8]
 800492a:	463a      	mov	r2, r7
 800492c:	4640      	mov	r0, r8
 800492e:	4798      	blx	r3
 8004930:	6923      	ldr	r3, [r4, #16]
 8004932:	3b01      	subs	r3, #1
 8004934:	6123      	str	r3, [r4, #16]
 8004936:	f10a 3aff 	add.w	sl, sl, #4294967295
 800493a:	fa5f fa8a 	uxtb.w	sl, sl
 800493e:	f1ba 0f02 	cmp.w	sl, #2
 8004942:	d1ec      	bne.n	800491e <_scanf_float+0x2c6>
 8004944:	3d03      	subs	r5, #3
 8004946:	b2ed      	uxtb	r5, r5
 8004948:	1b76      	subs	r6, r6, r5
 800494a:	6823      	ldr	r3, [r4, #0]
 800494c:	05da      	lsls	r2, r3, #23
 800494e:	d52f      	bpl.n	80049b0 <_scanf_float+0x358>
 8004950:	055b      	lsls	r3, r3, #21
 8004952:	d510      	bpl.n	8004976 <_scanf_float+0x31e>
 8004954:	455e      	cmp	r6, fp
 8004956:	f67f aebf 	bls.w	80046d8 <_scanf_float+0x80>
 800495a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800495e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004962:	463a      	mov	r2, r7
 8004964:	4640      	mov	r0, r8
 8004966:	4798      	blx	r3
 8004968:	6923      	ldr	r3, [r4, #16]
 800496a:	3b01      	subs	r3, #1
 800496c:	6123      	str	r3, [r4, #16]
 800496e:	e7f1      	b.n	8004954 <_scanf_float+0x2fc>
 8004970:	46aa      	mov	sl, r5
 8004972:	9602      	str	r6, [sp, #8]
 8004974:	e7df      	b.n	8004936 <_scanf_float+0x2de>
 8004976:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	2965      	cmp	r1, #101	; 0x65
 800497e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004982:	f106 35ff 	add.w	r5, r6, #4294967295
 8004986:	6123      	str	r3, [r4, #16]
 8004988:	d00c      	beq.n	80049a4 <_scanf_float+0x34c>
 800498a:	2945      	cmp	r1, #69	; 0x45
 800498c:	d00a      	beq.n	80049a4 <_scanf_float+0x34c>
 800498e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004992:	463a      	mov	r2, r7
 8004994:	4640      	mov	r0, r8
 8004996:	4798      	blx	r3
 8004998:	6923      	ldr	r3, [r4, #16]
 800499a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800499e:	3b01      	subs	r3, #1
 80049a0:	1eb5      	subs	r5, r6, #2
 80049a2:	6123      	str	r3, [r4, #16]
 80049a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80049a8:	463a      	mov	r2, r7
 80049aa:	4640      	mov	r0, r8
 80049ac:	4798      	blx	r3
 80049ae:	462e      	mov	r6, r5
 80049b0:	6825      	ldr	r5, [r4, #0]
 80049b2:	f015 0510 	ands.w	r5, r5, #16
 80049b6:	d159      	bne.n	8004a6c <_scanf_float+0x414>
 80049b8:	7035      	strb	r5, [r6, #0]
 80049ba:	6823      	ldr	r3, [r4, #0]
 80049bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80049c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049c4:	d11b      	bne.n	80049fe <_scanf_float+0x3a6>
 80049c6:	9b01      	ldr	r3, [sp, #4]
 80049c8:	454b      	cmp	r3, r9
 80049ca:	eba3 0209 	sub.w	r2, r3, r9
 80049ce:	d123      	bne.n	8004a18 <_scanf_float+0x3c0>
 80049d0:	2200      	movs	r2, #0
 80049d2:	4659      	mov	r1, fp
 80049d4:	4640      	mov	r0, r8
 80049d6:	f000 ff35 	bl	8005844 <_strtod_r>
 80049da:	6822      	ldr	r2, [r4, #0]
 80049dc:	9b03      	ldr	r3, [sp, #12]
 80049de:	f012 0f02 	tst.w	r2, #2
 80049e2:	ec57 6b10 	vmov	r6, r7, d0
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	d021      	beq.n	8004a2e <_scanf_float+0x3d6>
 80049ea:	9903      	ldr	r1, [sp, #12]
 80049ec:	1d1a      	adds	r2, r3, #4
 80049ee:	600a      	str	r2, [r1, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	e9c3 6700 	strd	r6, r7, [r3]
 80049f6:	68e3      	ldr	r3, [r4, #12]
 80049f8:	3301      	adds	r3, #1
 80049fa:	60e3      	str	r3, [r4, #12]
 80049fc:	e66d      	b.n	80046da <_scanf_float+0x82>
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d0e5      	beq.n	80049d0 <_scanf_float+0x378>
 8004a04:	9905      	ldr	r1, [sp, #20]
 8004a06:	230a      	movs	r3, #10
 8004a08:	462a      	mov	r2, r5
 8004a0a:	3101      	adds	r1, #1
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	f000 ffa1 	bl	8005954 <_strtol_r>
 8004a12:	9b04      	ldr	r3, [sp, #16]
 8004a14:	9e05      	ldr	r6, [sp, #20]
 8004a16:	1ac2      	subs	r2, r0, r3
 8004a18:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004a1c:	429e      	cmp	r6, r3
 8004a1e:	bf28      	it	cs
 8004a20:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8004a24:	4912      	ldr	r1, [pc, #72]	; (8004a70 <_scanf_float+0x418>)
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f844 	bl	8004ab4 <siprintf>
 8004a2c:	e7d0      	b.n	80049d0 <_scanf_float+0x378>
 8004a2e:	9903      	ldr	r1, [sp, #12]
 8004a30:	f012 0f04 	tst.w	r2, #4
 8004a34:	f103 0204 	add.w	r2, r3, #4
 8004a38:	600a      	str	r2, [r1, #0]
 8004a3a:	d1d9      	bne.n	80049f0 <_scanf_float+0x398>
 8004a3c:	f8d3 8000 	ldr.w	r8, [r3]
 8004a40:	ee10 2a10 	vmov	r2, s0
 8004a44:	ee10 0a10 	vmov	r0, s0
 8004a48:	463b      	mov	r3, r7
 8004a4a:	4639      	mov	r1, r7
 8004a4c:	f7fc f87e 	bl	8000b4c <__aeabi_dcmpun>
 8004a50:	b128      	cbz	r0, 8004a5e <_scanf_float+0x406>
 8004a52:	4808      	ldr	r0, [pc, #32]	; (8004a74 <_scanf_float+0x41c>)
 8004a54:	f000 f828 	bl	8004aa8 <nanf>
 8004a58:	ed88 0a00 	vstr	s0, [r8]
 8004a5c:	e7cb      	b.n	80049f6 <_scanf_float+0x39e>
 8004a5e:	4630      	mov	r0, r6
 8004a60:	4639      	mov	r1, r7
 8004a62:	f7fc f8d1 	bl	8000c08 <__aeabi_d2f>
 8004a66:	f8c8 0000 	str.w	r0, [r8]
 8004a6a:	e7c4      	b.n	80049f6 <_scanf_float+0x39e>
 8004a6c:	2500      	movs	r5, #0
 8004a6e:	e634      	b.n	80046da <_scanf_float+0x82>
 8004a70:	08009032 	.word	0x08009032
 8004a74:	080094bb 	.word	0x080094bb

08004a78 <iprintf>:
 8004a78:	b40f      	push	{r0, r1, r2, r3}
 8004a7a:	4b0a      	ldr	r3, [pc, #40]	; (8004aa4 <iprintf+0x2c>)
 8004a7c:	b513      	push	{r0, r1, r4, lr}
 8004a7e:	681c      	ldr	r4, [r3, #0]
 8004a80:	b124      	cbz	r4, 8004a8c <iprintf+0x14>
 8004a82:	69a3      	ldr	r3, [r4, #24]
 8004a84:	b913      	cbnz	r3, 8004a8c <iprintf+0x14>
 8004a86:	4620      	mov	r0, r4
 8004a88:	f001 fe5c 	bl	8006744 <__sinit>
 8004a8c:	ab05      	add	r3, sp, #20
 8004a8e:	9a04      	ldr	r2, [sp, #16]
 8004a90:	68a1      	ldr	r1, [r4, #8]
 8004a92:	9301      	str	r3, [sp, #4]
 8004a94:	4620      	mov	r0, r4
 8004a96:	f003 fbb3 	bl	8008200 <_vfiprintf_r>
 8004a9a:	b002      	add	sp, #8
 8004a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004aa0:	b004      	add	sp, #16
 8004aa2:	4770      	bx	lr
 8004aa4:	2000000c 	.word	0x2000000c

08004aa8 <nanf>:
 8004aa8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004ab0 <nanf+0x8>
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	7fc00000 	.word	0x7fc00000

08004ab4 <siprintf>:
 8004ab4:	b40e      	push	{r1, r2, r3}
 8004ab6:	b500      	push	{lr}
 8004ab8:	b09c      	sub	sp, #112	; 0x70
 8004aba:	ab1d      	add	r3, sp, #116	; 0x74
 8004abc:	9002      	str	r0, [sp, #8]
 8004abe:	9006      	str	r0, [sp, #24]
 8004ac0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004ac4:	4809      	ldr	r0, [pc, #36]	; (8004aec <siprintf+0x38>)
 8004ac6:	9107      	str	r1, [sp, #28]
 8004ac8:	9104      	str	r1, [sp, #16]
 8004aca:	4909      	ldr	r1, [pc, #36]	; (8004af0 <siprintf+0x3c>)
 8004acc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ad0:	9105      	str	r1, [sp, #20]
 8004ad2:	6800      	ldr	r0, [r0, #0]
 8004ad4:	9301      	str	r3, [sp, #4]
 8004ad6:	a902      	add	r1, sp, #8
 8004ad8:	f003 f896 	bl	8007c08 <_svfiprintf_r>
 8004adc:	9b02      	ldr	r3, [sp, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	b01c      	add	sp, #112	; 0x70
 8004ae4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ae8:	b003      	add	sp, #12
 8004aea:	4770      	bx	lr
 8004aec:	2000000c 	.word	0x2000000c
 8004af0:	ffff0208 	.word	0xffff0208

08004af4 <siscanf>:
 8004af4:	b40e      	push	{r1, r2, r3}
 8004af6:	b510      	push	{r4, lr}
 8004af8:	b09f      	sub	sp, #124	; 0x7c
 8004afa:	ac21      	add	r4, sp, #132	; 0x84
 8004afc:	f44f 7101 	mov.w	r1, #516	; 0x204
 8004b00:	f854 2b04 	ldr.w	r2, [r4], #4
 8004b04:	9201      	str	r2, [sp, #4]
 8004b06:	f8ad 101c 	strh.w	r1, [sp, #28]
 8004b0a:	9004      	str	r0, [sp, #16]
 8004b0c:	9008      	str	r0, [sp, #32]
 8004b0e:	f7fb fb6f 	bl	80001f0 <strlen>
 8004b12:	4b0c      	ldr	r3, [pc, #48]	; (8004b44 <siscanf+0x50>)
 8004b14:	9005      	str	r0, [sp, #20]
 8004b16:	9009      	str	r0, [sp, #36]	; 0x24
 8004b18:	930d      	str	r3, [sp, #52]	; 0x34
 8004b1a:	480b      	ldr	r0, [pc, #44]	; (8004b48 <siscanf+0x54>)
 8004b1c:	9a01      	ldr	r2, [sp, #4]
 8004b1e:	6800      	ldr	r0, [r0, #0]
 8004b20:	9403      	str	r4, [sp, #12]
 8004b22:	2300      	movs	r3, #0
 8004b24:	9311      	str	r3, [sp, #68]	; 0x44
 8004b26:	9316      	str	r3, [sp, #88]	; 0x58
 8004b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004b2c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8004b30:	a904      	add	r1, sp, #16
 8004b32:	4623      	mov	r3, r4
 8004b34:	f003 f9c2 	bl	8007ebc <__ssvfiscanf_r>
 8004b38:	b01f      	add	sp, #124	; 0x7c
 8004b3a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b3e:	b003      	add	sp, #12
 8004b40:	4770      	bx	lr
 8004b42:	bf00      	nop
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	2000000c 	.word	0x2000000c

08004b4c <__sread>:
 8004b4c:	b510      	push	{r4, lr}
 8004b4e:	460c      	mov	r4, r1
 8004b50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b54:	f003 fdd6 	bl	8008704 <_read_r>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	bfab      	itete	ge
 8004b5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b5e:	89a3      	ldrhlt	r3, [r4, #12]
 8004b60:	181b      	addge	r3, r3, r0
 8004b62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b66:	bfac      	ite	ge
 8004b68:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b6a:	81a3      	strhlt	r3, [r4, #12]
 8004b6c:	bd10      	pop	{r4, pc}

08004b6e <__seofread>:
 8004b6e:	2000      	movs	r0, #0
 8004b70:	4770      	bx	lr

08004b72 <__swrite>:
 8004b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b76:	461f      	mov	r7, r3
 8004b78:	898b      	ldrh	r3, [r1, #12]
 8004b7a:	05db      	lsls	r3, r3, #23
 8004b7c:	4605      	mov	r5, r0
 8004b7e:	460c      	mov	r4, r1
 8004b80:	4616      	mov	r6, r2
 8004b82:	d505      	bpl.n	8004b90 <__swrite+0x1e>
 8004b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b88:	2302      	movs	r3, #2
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f002 f9ee 	bl	8006f6c <_lseek_r>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b9a:	81a3      	strh	r3, [r4, #12]
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	463b      	mov	r3, r7
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ba6:	f000 bed7 	b.w	8005958 <_write_r>

08004baa <__sseek>:
 8004baa:	b510      	push	{r4, lr}
 8004bac:	460c      	mov	r4, r1
 8004bae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb2:	f002 f9db 	bl	8006f6c <_lseek_r>
 8004bb6:	1c43      	adds	r3, r0, #1
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	bf15      	itete	ne
 8004bbc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004bbe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004bc2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004bc6:	81a3      	strheq	r3, [r4, #12]
 8004bc8:	bf18      	it	ne
 8004bca:	81a3      	strhne	r3, [r4, #12]
 8004bcc:	bd10      	pop	{r4, pc}

08004bce <__sclose>:
 8004bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bd2:	f000 bed3 	b.w	800597c <_close_r>

08004bd6 <strncmp>:
 8004bd6:	b510      	push	{r4, lr}
 8004bd8:	b17a      	cbz	r2, 8004bfa <strncmp+0x24>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	3901      	subs	r1, #1
 8004bde:	1884      	adds	r4, r0, r2
 8004be0:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004be4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004be8:	4290      	cmp	r0, r2
 8004bea:	d101      	bne.n	8004bf0 <strncmp+0x1a>
 8004bec:	42a3      	cmp	r3, r4
 8004bee:	d101      	bne.n	8004bf4 <strncmp+0x1e>
 8004bf0:	1a80      	subs	r0, r0, r2
 8004bf2:	bd10      	pop	{r4, pc}
 8004bf4:	2800      	cmp	r0, #0
 8004bf6:	d1f3      	bne.n	8004be0 <strncmp+0xa>
 8004bf8:	e7fa      	b.n	8004bf0 <strncmp+0x1a>
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	e7f9      	b.n	8004bf2 <strncmp+0x1c>

08004bfe <sulp>:
 8004bfe:	b570      	push	{r4, r5, r6, lr}
 8004c00:	4604      	mov	r4, r0
 8004c02:	460d      	mov	r5, r1
 8004c04:	ec45 4b10 	vmov	d0, r4, r5
 8004c08:	4616      	mov	r6, r2
 8004c0a:	f002 fd5b 	bl	80076c4 <__ulp>
 8004c0e:	ec51 0b10 	vmov	r0, r1, d0
 8004c12:	b17e      	cbz	r6, 8004c34 <sulp+0x36>
 8004c14:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8004c18:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	dd09      	ble.n	8004c34 <sulp+0x36>
 8004c20:	051b      	lsls	r3, r3, #20
 8004c22:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004c26:	2400      	movs	r4, #0
 8004c28:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004c2c:	4622      	mov	r2, r4
 8004c2e:	462b      	mov	r3, r5
 8004c30:	f7fb fcf2 	bl	8000618 <__aeabi_dmul>
 8004c34:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c38 <_strtod_l>:
 8004c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3c:	ed2d 8b02 	vpush	{d8}
 8004c40:	b09d      	sub	sp, #116	; 0x74
 8004c42:	461f      	mov	r7, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	9318      	str	r3, [sp, #96]	; 0x60
 8004c48:	4ba2      	ldr	r3, [pc, #648]	; (8004ed4 <_strtod_l+0x29c>)
 8004c4a:	9213      	str	r2, [sp, #76]	; 0x4c
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	9305      	str	r3, [sp, #20]
 8004c50:	4604      	mov	r4, r0
 8004c52:	4618      	mov	r0, r3
 8004c54:	4688      	mov	r8, r1
 8004c56:	f7fb facb 	bl	80001f0 <strlen>
 8004c5a:	f04f 0a00 	mov.w	sl, #0
 8004c5e:	4605      	mov	r5, r0
 8004c60:	f04f 0b00 	mov.w	fp, #0
 8004c64:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004c6a:	781a      	ldrb	r2, [r3, #0]
 8004c6c:	2a2b      	cmp	r2, #43	; 0x2b
 8004c6e:	d04e      	beq.n	8004d0e <_strtod_l+0xd6>
 8004c70:	d83b      	bhi.n	8004cea <_strtod_l+0xb2>
 8004c72:	2a0d      	cmp	r2, #13
 8004c74:	d834      	bhi.n	8004ce0 <_strtod_l+0xa8>
 8004c76:	2a08      	cmp	r2, #8
 8004c78:	d834      	bhi.n	8004ce4 <_strtod_l+0xac>
 8004c7a:	2a00      	cmp	r2, #0
 8004c7c:	d03e      	beq.n	8004cfc <_strtod_l+0xc4>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	930a      	str	r3, [sp, #40]	; 0x28
 8004c82:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8004c84:	7833      	ldrb	r3, [r6, #0]
 8004c86:	2b30      	cmp	r3, #48	; 0x30
 8004c88:	f040 80b0 	bne.w	8004dec <_strtod_l+0x1b4>
 8004c8c:	7873      	ldrb	r3, [r6, #1]
 8004c8e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004c92:	2b58      	cmp	r3, #88	; 0x58
 8004c94:	d168      	bne.n	8004d68 <_strtod_l+0x130>
 8004c96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c98:	9301      	str	r3, [sp, #4]
 8004c9a:	ab18      	add	r3, sp, #96	; 0x60
 8004c9c:	9702      	str	r7, [sp, #8]
 8004c9e:	9300      	str	r3, [sp, #0]
 8004ca0:	4a8d      	ldr	r2, [pc, #564]	; (8004ed8 <_strtod_l+0x2a0>)
 8004ca2:	ab19      	add	r3, sp, #100	; 0x64
 8004ca4:	a917      	add	r1, sp, #92	; 0x5c
 8004ca6:	4620      	mov	r0, r4
 8004ca8:	f001 fe50 	bl	800694c <__gethex>
 8004cac:	f010 0707 	ands.w	r7, r0, #7
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	d005      	beq.n	8004cc0 <_strtod_l+0x88>
 8004cb4:	2f06      	cmp	r7, #6
 8004cb6:	d12c      	bne.n	8004d12 <_strtod_l+0xda>
 8004cb8:	3601      	adds	r6, #1
 8004cba:	2300      	movs	r3, #0
 8004cbc:	9617      	str	r6, [sp, #92]	; 0x5c
 8004cbe:	930a      	str	r3, [sp, #40]	; 0x28
 8004cc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 8590 	bne.w	80057e8 <_strtod_l+0xbb0>
 8004cc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cca:	b1eb      	cbz	r3, 8004d08 <_strtod_l+0xd0>
 8004ccc:	4652      	mov	r2, sl
 8004cce:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004cd2:	ec43 2b10 	vmov	d0, r2, r3
 8004cd6:	b01d      	add	sp, #116	; 0x74
 8004cd8:	ecbd 8b02 	vpop	{d8}
 8004cdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ce0:	2a20      	cmp	r2, #32
 8004ce2:	d1cc      	bne.n	8004c7e <_strtod_l+0x46>
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	9317      	str	r3, [sp, #92]	; 0x5c
 8004ce8:	e7be      	b.n	8004c68 <_strtod_l+0x30>
 8004cea:	2a2d      	cmp	r2, #45	; 0x2d
 8004cec:	d1c7      	bne.n	8004c7e <_strtod_l+0x46>
 8004cee:	2201      	movs	r2, #1
 8004cf0:	920a      	str	r2, [sp, #40]	; 0x28
 8004cf2:	1c5a      	adds	r2, r3, #1
 8004cf4:	9217      	str	r2, [sp, #92]	; 0x5c
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1c2      	bne.n	8004c82 <_strtod_l+0x4a>
 8004cfc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cfe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 856e 	bne.w	80057e4 <_strtod_l+0xbac>
 8004d08:	4652      	mov	r2, sl
 8004d0a:	465b      	mov	r3, fp
 8004d0c:	e7e1      	b.n	8004cd2 <_strtod_l+0x9a>
 8004d0e:	2200      	movs	r2, #0
 8004d10:	e7ee      	b.n	8004cf0 <_strtod_l+0xb8>
 8004d12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8004d14:	b13a      	cbz	r2, 8004d26 <_strtod_l+0xee>
 8004d16:	2135      	movs	r1, #53	; 0x35
 8004d18:	a81a      	add	r0, sp, #104	; 0x68
 8004d1a:	f002 fdde 	bl	80078da <__copybits>
 8004d1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8004d20:	4620      	mov	r0, r4
 8004d22:	f002 f99d 	bl	8007060 <_Bfree>
 8004d26:	3f01      	subs	r7, #1
 8004d28:	2f04      	cmp	r7, #4
 8004d2a:	d806      	bhi.n	8004d3a <_strtod_l+0x102>
 8004d2c:	e8df f007 	tbb	[pc, r7]
 8004d30:	1714030a 	.word	0x1714030a
 8004d34:	0a          	.byte	0x0a
 8004d35:	00          	.byte	0x00
 8004d36:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8004d3a:	0728      	lsls	r0, r5, #28
 8004d3c:	d5c0      	bpl.n	8004cc0 <_strtod_l+0x88>
 8004d3e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8004d42:	e7bd      	b.n	8004cc0 <_strtod_l+0x88>
 8004d44:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8004d48:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d4a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d4e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004d52:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004d56:	e7f0      	b.n	8004d3a <_strtod_l+0x102>
 8004d58:	f8df b180 	ldr.w	fp, [pc, #384]	; 8004edc <_strtod_l+0x2a4>
 8004d5c:	e7ed      	b.n	8004d3a <_strtod_l+0x102>
 8004d5e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8004d62:	f04f 3aff 	mov.w	sl, #4294967295
 8004d66:	e7e8      	b.n	8004d3a <_strtod_l+0x102>
 8004d68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004d6e:	785b      	ldrb	r3, [r3, #1]
 8004d70:	2b30      	cmp	r3, #48	; 0x30
 8004d72:	d0f9      	beq.n	8004d68 <_strtod_l+0x130>
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0a3      	beq.n	8004cc0 <_strtod_l+0x88>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f04f 0900 	mov.w	r9, #0
 8004d7e:	9304      	str	r3, [sp, #16]
 8004d80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004d82:	9308      	str	r3, [sp, #32]
 8004d84:	f8cd 901c 	str.w	r9, [sp, #28]
 8004d88:	464f      	mov	r7, r9
 8004d8a:	220a      	movs	r2, #10
 8004d8c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8004d8e:	7806      	ldrb	r6, [r0, #0]
 8004d90:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8004d94:	b2d9      	uxtb	r1, r3
 8004d96:	2909      	cmp	r1, #9
 8004d98:	d92a      	bls.n	8004df0 <_strtod_l+0x1b8>
 8004d9a:	9905      	ldr	r1, [sp, #20]
 8004d9c:	462a      	mov	r2, r5
 8004d9e:	f7ff ff1a 	bl	8004bd6 <strncmp>
 8004da2:	b398      	cbz	r0, 8004e0c <_strtod_l+0x1d4>
 8004da4:	2000      	movs	r0, #0
 8004da6:	4632      	mov	r2, r6
 8004da8:	463d      	mov	r5, r7
 8004daa:	9005      	str	r0, [sp, #20]
 8004dac:	4603      	mov	r3, r0
 8004dae:	2a65      	cmp	r2, #101	; 0x65
 8004db0:	d001      	beq.n	8004db6 <_strtod_l+0x17e>
 8004db2:	2a45      	cmp	r2, #69	; 0x45
 8004db4:	d118      	bne.n	8004de8 <_strtod_l+0x1b0>
 8004db6:	b91d      	cbnz	r5, 8004dc0 <_strtod_l+0x188>
 8004db8:	9a04      	ldr	r2, [sp, #16]
 8004dba:	4302      	orrs	r2, r0
 8004dbc:	d09e      	beq.n	8004cfc <_strtod_l+0xc4>
 8004dbe:	2500      	movs	r5, #0
 8004dc0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8004dc4:	f108 0201 	add.w	r2, r8, #1
 8004dc8:	9217      	str	r2, [sp, #92]	; 0x5c
 8004dca:	f898 2001 	ldrb.w	r2, [r8, #1]
 8004dce:	2a2b      	cmp	r2, #43	; 0x2b
 8004dd0:	d075      	beq.n	8004ebe <_strtod_l+0x286>
 8004dd2:	2a2d      	cmp	r2, #45	; 0x2d
 8004dd4:	d07b      	beq.n	8004ece <_strtod_l+0x296>
 8004dd6:	f04f 0c00 	mov.w	ip, #0
 8004dda:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004dde:	2909      	cmp	r1, #9
 8004de0:	f240 8082 	bls.w	8004ee8 <_strtod_l+0x2b0>
 8004de4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8004de8:	2600      	movs	r6, #0
 8004dea:	e09d      	b.n	8004f28 <_strtod_l+0x2f0>
 8004dec:	2300      	movs	r3, #0
 8004dee:	e7c4      	b.n	8004d7a <_strtod_l+0x142>
 8004df0:	2f08      	cmp	r7, #8
 8004df2:	bfd8      	it	le
 8004df4:	9907      	ldrle	r1, [sp, #28]
 8004df6:	f100 0001 	add.w	r0, r0, #1
 8004dfa:	bfda      	itte	le
 8004dfc:	fb02 3301 	mlale	r3, r2, r1, r3
 8004e00:	9307      	strle	r3, [sp, #28]
 8004e02:	fb02 3909 	mlagt	r9, r2, r9, r3
 8004e06:	3701      	adds	r7, #1
 8004e08:	9017      	str	r0, [sp, #92]	; 0x5c
 8004e0a:	e7bf      	b.n	8004d8c <_strtod_l+0x154>
 8004e0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e0e:	195a      	adds	r2, r3, r5
 8004e10:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e12:	5d5a      	ldrb	r2, [r3, r5]
 8004e14:	2f00      	cmp	r7, #0
 8004e16:	d037      	beq.n	8004e88 <_strtod_l+0x250>
 8004e18:	9005      	str	r0, [sp, #20]
 8004e1a:	463d      	mov	r5, r7
 8004e1c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8004e20:	2b09      	cmp	r3, #9
 8004e22:	d912      	bls.n	8004e4a <_strtod_l+0x212>
 8004e24:	2301      	movs	r3, #1
 8004e26:	e7c2      	b.n	8004dae <_strtod_l+0x176>
 8004e28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e2a:	1c5a      	adds	r2, r3, #1
 8004e2c:	9217      	str	r2, [sp, #92]	; 0x5c
 8004e2e:	785a      	ldrb	r2, [r3, #1]
 8004e30:	3001      	adds	r0, #1
 8004e32:	2a30      	cmp	r2, #48	; 0x30
 8004e34:	d0f8      	beq.n	8004e28 <_strtod_l+0x1f0>
 8004e36:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	f200 84d9 	bhi.w	80057f2 <_strtod_l+0xbba>
 8004e40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004e42:	9005      	str	r0, [sp, #20]
 8004e44:	2000      	movs	r0, #0
 8004e46:	9308      	str	r3, [sp, #32]
 8004e48:	4605      	mov	r5, r0
 8004e4a:	3a30      	subs	r2, #48	; 0x30
 8004e4c:	f100 0301 	add.w	r3, r0, #1
 8004e50:	d014      	beq.n	8004e7c <_strtod_l+0x244>
 8004e52:	9905      	ldr	r1, [sp, #20]
 8004e54:	4419      	add	r1, r3
 8004e56:	9105      	str	r1, [sp, #20]
 8004e58:	462b      	mov	r3, r5
 8004e5a:	eb00 0e05 	add.w	lr, r0, r5
 8004e5e:	210a      	movs	r1, #10
 8004e60:	4573      	cmp	r3, lr
 8004e62:	d113      	bne.n	8004e8c <_strtod_l+0x254>
 8004e64:	182b      	adds	r3, r5, r0
 8004e66:	2b08      	cmp	r3, #8
 8004e68:	f105 0501 	add.w	r5, r5, #1
 8004e6c:	4405      	add	r5, r0
 8004e6e:	dc1c      	bgt.n	8004eaa <_strtod_l+0x272>
 8004e70:	9907      	ldr	r1, [sp, #28]
 8004e72:	230a      	movs	r3, #10
 8004e74:	fb03 2301 	mla	r3, r3, r1, r2
 8004e78:	9307      	str	r3, [sp, #28]
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004e7e:	1c51      	adds	r1, r2, #1
 8004e80:	9117      	str	r1, [sp, #92]	; 0x5c
 8004e82:	7852      	ldrb	r2, [r2, #1]
 8004e84:	4618      	mov	r0, r3
 8004e86:	e7c9      	b.n	8004e1c <_strtod_l+0x1e4>
 8004e88:	4638      	mov	r0, r7
 8004e8a:	e7d2      	b.n	8004e32 <_strtod_l+0x1fa>
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	dc04      	bgt.n	8004e9a <_strtod_l+0x262>
 8004e90:	9e07      	ldr	r6, [sp, #28]
 8004e92:	434e      	muls	r6, r1
 8004e94:	9607      	str	r6, [sp, #28]
 8004e96:	3301      	adds	r3, #1
 8004e98:	e7e2      	b.n	8004e60 <_strtod_l+0x228>
 8004e9a:	f103 0c01 	add.w	ip, r3, #1
 8004e9e:	f1bc 0f10 	cmp.w	ip, #16
 8004ea2:	bfd8      	it	le
 8004ea4:	fb01 f909 	mulle.w	r9, r1, r9
 8004ea8:	e7f5      	b.n	8004e96 <_strtod_l+0x25e>
 8004eaa:	2d10      	cmp	r5, #16
 8004eac:	bfdc      	itt	le
 8004eae:	230a      	movle	r3, #10
 8004eb0:	fb03 2909 	mlale	r9, r3, r9, r2
 8004eb4:	e7e1      	b.n	8004e7a <_strtod_l+0x242>
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	9305      	str	r3, [sp, #20]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e77c      	b.n	8004db8 <_strtod_l+0x180>
 8004ebe:	f04f 0c00 	mov.w	ip, #0
 8004ec2:	f108 0202 	add.w	r2, r8, #2
 8004ec6:	9217      	str	r2, [sp, #92]	; 0x5c
 8004ec8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8004ecc:	e785      	b.n	8004dda <_strtod_l+0x1a2>
 8004ece:	f04f 0c01 	mov.w	ip, #1
 8004ed2:	e7f6      	b.n	8004ec2 <_strtod_l+0x28a>
 8004ed4:	080092e4 	.word	0x080092e4
 8004ed8:	08009038 	.word	0x08009038
 8004edc:	7ff00000 	.word	0x7ff00000
 8004ee0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004ee2:	1c51      	adds	r1, r2, #1
 8004ee4:	9117      	str	r1, [sp, #92]	; 0x5c
 8004ee6:	7852      	ldrb	r2, [r2, #1]
 8004ee8:	2a30      	cmp	r2, #48	; 0x30
 8004eea:	d0f9      	beq.n	8004ee0 <_strtod_l+0x2a8>
 8004eec:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8004ef0:	2908      	cmp	r1, #8
 8004ef2:	f63f af79 	bhi.w	8004de8 <_strtod_l+0x1b0>
 8004ef6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8004efa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004efc:	9206      	str	r2, [sp, #24]
 8004efe:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8004f00:	1c51      	adds	r1, r2, #1
 8004f02:	9117      	str	r1, [sp, #92]	; 0x5c
 8004f04:	7852      	ldrb	r2, [r2, #1]
 8004f06:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8004f0a:	2e09      	cmp	r6, #9
 8004f0c:	d937      	bls.n	8004f7e <_strtod_l+0x346>
 8004f0e:	9e06      	ldr	r6, [sp, #24]
 8004f10:	1b89      	subs	r1, r1, r6
 8004f12:	2908      	cmp	r1, #8
 8004f14:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8004f18:	dc02      	bgt.n	8004f20 <_strtod_l+0x2e8>
 8004f1a:	4576      	cmp	r6, lr
 8004f1c:	bfa8      	it	ge
 8004f1e:	4676      	movge	r6, lr
 8004f20:	f1bc 0f00 	cmp.w	ip, #0
 8004f24:	d000      	beq.n	8004f28 <_strtod_l+0x2f0>
 8004f26:	4276      	negs	r6, r6
 8004f28:	2d00      	cmp	r5, #0
 8004f2a:	d14d      	bne.n	8004fc8 <_strtod_l+0x390>
 8004f2c:	9904      	ldr	r1, [sp, #16]
 8004f2e:	4301      	orrs	r1, r0
 8004f30:	f47f aec6 	bne.w	8004cc0 <_strtod_l+0x88>
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f47f aee1 	bne.w	8004cfc <_strtod_l+0xc4>
 8004f3a:	2a69      	cmp	r2, #105	; 0x69
 8004f3c:	d027      	beq.n	8004f8e <_strtod_l+0x356>
 8004f3e:	dc24      	bgt.n	8004f8a <_strtod_l+0x352>
 8004f40:	2a49      	cmp	r2, #73	; 0x49
 8004f42:	d024      	beq.n	8004f8e <_strtod_l+0x356>
 8004f44:	2a4e      	cmp	r2, #78	; 0x4e
 8004f46:	f47f aed9 	bne.w	8004cfc <_strtod_l+0xc4>
 8004f4a:	499f      	ldr	r1, [pc, #636]	; (80051c8 <_strtod_l+0x590>)
 8004f4c:	a817      	add	r0, sp, #92	; 0x5c
 8004f4e:	f001 ff55 	bl	8006dfc <__match>
 8004f52:	2800      	cmp	r0, #0
 8004f54:	f43f aed2 	beq.w	8004cfc <_strtod_l+0xc4>
 8004f58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	2b28      	cmp	r3, #40	; 0x28
 8004f5e:	d12d      	bne.n	8004fbc <_strtod_l+0x384>
 8004f60:	499a      	ldr	r1, [pc, #616]	; (80051cc <_strtod_l+0x594>)
 8004f62:	aa1a      	add	r2, sp, #104	; 0x68
 8004f64:	a817      	add	r0, sp, #92	; 0x5c
 8004f66:	f001 ff5d 	bl	8006e24 <__hexnan>
 8004f6a:	2805      	cmp	r0, #5
 8004f6c:	d126      	bne.n	8004fbc <_strtod_l+0x384>
 8004f6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8004f70:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8004f74:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8004f78:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8004f7c:	e6a0      	b.n	8004cc0 <_strtod_l+0x88>
 8004f7e:	210a      	movs	r1, #10
 8004f80:	fb01 2e0e 	mla	lr, r1, lr, r2
 8004f84:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004f88:	e7b9      	b.n	8004efe <_strtod_l+0x2c6>
 8004f8a:	2a6e      	cmp	r2, #110	; 0x6e
 8004f8c:	e7db      	b.n	8004f46 <_strtod_l+0x30e>
 8004f8e:	4990      	ldr	r1, [pc, #576]	; (80051d0 <_strtod_l+0x598>)
 8004f90:	a817      	add	r0, sp, #92	; 0x5c
 8004f92:	f001 ff33 	bl	8006dfc <__match>
 8004f96:	2800      	cmp	r0, #0
 8004f98:	f43f aeb0 	beq.w	8004cfc <_strtod_l+0xc4>
 8004f9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f9e:	498d      	ldr	r1, [pc, #564]	; (80051d4 <_strtod_l+0x59c>)
 8004fa0:	3b01      	subs	r3, #1
 8004fa2:	a817      	add	r0, sp, #92	; 0x5c
 8004fa4:	9317      	str	r3, [sp, #92]	; 0x5c
 8004fa6:	f001 ff29 	bl	8006dfc <__match>
 8004faa:	b910      	cbnz	r0, 8004fb2 <_strtod_l+0x37a>
 8004fac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004fae:	3301      	adds	r3, #1
 8004fb0:	9317      	str	r3, [sp, #92]	; 0x5c
 8004fb2:	f8df b230 	ldr.w	fp, [pc, #560]	; 80051e4 <_strtod_l+0x5ac>
 8004fb6:	f04f 0a00 	mov.w	sl, #0
 8004fba:	e681      	b.n	8004cc0 <_strtod_l+0x88>
 8004fbc:	4886      	ldr	r0, [pc, #536]	; (80051d8 <_strtod_l+0x5a0>)
 8004fbe:	f003 fbb3 	bl	8008728 <nan>
 8004fc2:	ec5b ab10 	vmov	sl, fp, d0
 8004fc6:	e67b      	b.n	8004cc0 <_strtod_l+0x88>
 8004fc8:	9b05      	ldr	r3, [sp, #20]
 8004fca:	9807      	ldr	r0, [sp, #28]
 8004fcc:	1af3      	subs	r3, r6, r3
 8004fce:	2f00      	cmp	r7, #0
 8004fd0:	bf08      	it	eq
 8004fd2:	462f      	moveq	r7, r5
 8004fd4:	2d10      	cmp	r5, #16
 8004fd6:	9306      	str	r3, [sp, #24]
 8004fd8:	46a8      	mov	r8, r5
 8004fda:	bfa8      	it	ge
 8004fdc:	f04f 0810 	movge.w	r8, #16
 8004fe0:	f7fb faa0 	bl	8000524 <__aeabi_ui2d>
 8004fe4:	2d09      	cmp	r5, #9
 8004fe6:	4682      	mov	sl, r0
 8004fe8:	468b      	mov	fp, r1
 8004fea:	dd13      	ble.n	8005014 <_strtod_l+0x3dc>
 8004fec:	4b7b      	ldr	r3, [pc, #492]	; (80051dc <_strtod_l+0x5a4>)
 8004fee:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8004ff2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8004ff6:	f7fb fb0f 	bl	8000618 <__aeabi_dmul>
 8004ffa:	4682      	mov	sl, r0
 8004ffc:	4648      	mov	r0, r9
 8004ffe:	468b      	mov	fp, r1
 8005000:	f7fb fa90 	bl	8000524 <__aeabi_ui2d>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4650      	mov	r0, sl
 800500a:	4659      	mov	r1, fp
 800500c:	f7fb f94e 	bl	80002ac <__adddf3>
 8005010:	4682      	mov	sl, r0
 8005012:	468b      	mov	fp, r1
 8005014:	2d0f      	cmp	r5, #15
 8005016:	dc38      	bgt.n	800508a <_strtod_l+0x452>
 8005018:	9b06      	ldr	r3, [sp, #24]
 800501a:	2b00      	cmp	r3, #0
 800501c:	f43f ae50 	beq.w	8004cc0 <_strtod_l+0x88>
 8005020:	dd24      	ble.n	800506c <_strtod_l+0x434>
 8005022:	2b16      	cmp	r3, #22
 8005024:	dc0b      	bgt.n	800503e <_strtod_l+0x406>
 8005026:	496d      	ldr	r1, [pc, #436]	; (80051dc <_strtod_l+0x5a4>)
 8005028:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800502c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005030:	4652      	mov	r2, sl
 8005032:	465b      	mov	r3, fp
 8005034:	f7fb faf0 	bl	8000618 <__aeabi_dmul>
 8005038:	4682      	mov	sl, r0
 800503a:	468b      	mov	fp, r1
 800503c:	e640      	b.n	8004cc0 <_strtod_l+0x88>
 800503e:	9a06      	ldr	r2, [sp, #24]
 8005040:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005044:	4293      	cmp	r3, r2
 8005046:	db20      	blt.n	800508a <_strtod_l+0x452>
 8005048:	4c64      	ldr	r4, [pc, #400]	; (80051dc <_strtod_l+0x5a4>)
 800504a:	f1c5 050f 	rsb	r5, r5, #15
 800504e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005052:	4652      	mov	r2, sl
 8005054:	465b      	mov	r3, fp
 8005056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800505a:	f7fb fadd 	bl	8000618 <__aeabi_dmul>
 800505e:	9b06      	ldr	r3, [sp, #24]
 8005060:	1b5d      	subs	r5, r3, r5
 8005062:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005066:	e9d4 2300 	ldrd	r2, r3, [r4]
 800506a:	e7e3      	b.n	8005034 <_strtod_l+0x3fc>
 800506c:	9b06      	ldr	r3, [sp, #24]
 800506e:	3316      	adds	r3, #22
 8005070:	db0b      	blt.n	800508a <_strtod_l+0x452>
 8005072:	9b05      	ldr	r3, [sp, #20]
 8005074:	1b9e      	subs	r6, r3, r6
 8005076:	4b59      	ldr	r3, [pc, #356]	; (80051dc <_strtod_l+0x5a4>)
 8005078:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800507c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005080:	4650      	mov	r0, sl
 8005082:	4659      	mov	r1, fp
 8005084:	f7fb fbf2 	bl	800086c <__aeabi_ddiv>
 8005088:	e7d6      	b.n	8005038 <_strtod_l+0x400>
 800508a:	9b06      	ldr	r3, [sp, #24]
 800508c:	eba5 0808 	sub.w	r8, r5, r8
 8005090:	4498      	add	r8, r3
 8005092:	f1b8 0f00 	cmp.w	r8, #0
 8005096:	dd74      	ble.n	8005182 <_strtod_l+0x54a>
 8005098:	f018 030f 	ands.w	r3, r8, #15
 800509c:	d00a      	beq.n	80050b4 <_strtod_l+0x47c>
 800509e:	494f      	ldr	r1, [pc, #316]	; (80051dc <_strtod_l+0x5a4>)
 80050a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80050a4:	4652      	mov	r2, sl
 80050a6:	465b      	mov	r3, fp
 80050a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ac:	f7fb fab4 	bl	8000618 <__aeabi_dmul>
 80050b0:	4682      	mov	sl, r0
 80050b2:	468b      	mov	fp, r1
 80050b4:	f038 080f 	bics.w	r8, r8, #15
 80050b8:	d04f      	beq.n	800515a <_strtod_l+0x522>
 80050ba:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80050be:	dd22      	ble.n	8005106 <_strtod_l+0x4ce>
 80050c0:	2500      	movs	r5, #0
 80050c2:	462e      	mov	r6, r5
 80050c4:	9507      	str	r5, [sp, #28]
 80050c6:	9505      	str	r5, [sp, #20]
 80050c8:	2322      	movs	r3, #34	; 0x22
 80050ca:	f8df b118 	ldr.w	fp, [pc, #280]	; 80051e4 <_strtod_l+0x5ac>
 80050ce:	6023      	str	r3, [r4, #0]
 80050d0:	f04f 0a00 	mov.w	sl, #0
 80050d4:	9b07      	ldr	r3, [sp, #28]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f43f adf2 	beq.w	8004cc0 <_strtod_l+0x88>
 80050dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80050de:	4620      	mov	r0, r4
 80050e0:	f001 ffbe 	bl	8007060 <_Bfree>
 80050e4:	9905      	ldr	r1, [sp, #20]
 80050e6:	4620      	mov	r0, r4
 80050e8:	f001 ffba 	bl	8007060 <_Bfree>
 80050ec:	4631      	mov	r1, r6
 80050ee:	4620      	mov	r0, r4
 80050f0:	f001 ffb6 	bl	8007060 <_Bfree>
 80050f4:	9907      	ldr	r1, [sp, #28]
 80050f6:	4620      	mov	r0, r4
 80050f8:	f001 ffb2 	bl	8007060 <_Bfree>
 80050fc:	4629      	mov	r1, r5
 80050fe:	4620      	mov	r0, r4
 8005100:	f001 ffae 	bl	8007060 <_Bfree>
 8005104:	e5dc      	b.n	8004cc0 <_strtod_l+0x88>
 8005106:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <_strtod_l+0x5a8>)
 8005108:	9304      	str	r3, [sp, #16]
 800510a:	2300      	movs	r3, #0
 800510c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005110:	4650      	mov	r0, sl
 8005112:	4659      	mov	r1, fp
 8005114:	4699      	mov	r9, r3
 8005116:	f1b8 0f01 	cmp.w	r8, #1
 800511a:	dc21      	bgt.n	8005160 <_strtod_l+0x528>
 800511c:	b10b      	cbz	r3, 8005122 <_strtod_l+0x4ea>
 800511e:	4682      	mov	sl, r0
 8005120:	468b      	mov	fp, r1
 8005122:	4b2f      	ldr	r3, [pc, #188]	; (80051e0 <_strtod_l+0x5a8>)
 8005124:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005128:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800512c:	4652      	mov	r2, sl
 800512e:	465b      	mov	r3, fp
 8005130:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005134:	f7fb fa70 	bl	8000618 <__aeabi_dmul>
 8005138:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <_strtod_l+0x5ac>)
 800513a:	460a      	mov	r2, r1
 800513c:	400b      	ands	r3, r1
 800513e:	492a      	ldr	r1, [pc, #168]	; (80051e8 <_strtod_l+0x5b0>)
 8005140:	428b      	cmp	r3, r1
 8005142:	4682      	mov	sl, r0
 8005144:	d8bc      	bhi.n	80050c0 <_strtod_l+0x488>
 8005146:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800514a:	428b      	cmp	r3, r1
 800514c:	bf86      	itte	hi
 800514e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 80051ec <_strtod_l+0x5b4>
 8005152:	f04f 3aff 	movhi.w	sl, #4294967295
 8005156:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800515a:	2300      	movs	r3, #0
 800515c:	9304      	str	r3, [sp, #16]
 800515e:	e084      	b.n	800526a <_strtod_l+0x632>
 8005160:	f018 0f01 	tst.w	r8, #1
 8005164:	d005      	beq.n	8005172 <_strtod_l+0x53a>
 8005166:	9b04      	ldr	r3, [sp, #16]
 8005168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800516c:	f7fb fa54 	bl	8000618 <__aeabi_dmul>
 8005170:	2301      	movs	r3, #1
 8005172:	9a04      	ldr	r2, [sp, #16]
 8005174:	3208      	adds	r2, #8
 8005176:	f109 0901 	add.w	r9, r9, #1
 800517a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800517e:	9204      	str	r2, [sp, #16]
 8005180:	e7c9      	b.n	8005116 <_strtod_l+0x4de>
 8005182:	d0ea      	beq.n	800515a <_strtod_l+0x522>
 8005184:	f1c8 0800 	rsb	r8, r8, #0
 8005188:	f018 020f 	ands.w	r2, r8, #15
 800518c:	d00a      	beq.n	80051a4 <_strtod_l+0x56c>
 800518e:	4b13      	ldr	r3, [pc, #76]	; (80051dc <_strtod_l+0x5a4>)
 8005190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005194:	4650      	mov	r0, sl
 8005196:	4659      	mov	r1, fp
 8005198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519c:	f7fb fb66 	bl	800086c <__aeabi_ddiv>
 80051a0:	4682      	mov	sl, r0
 80051a2:	468b      	mov	fp, r1
 80051a4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80051a8:	d0d7      	beq.n	800515a <_strtod_l+0x522>
 80051aa:	f1b8 0f1f 	cmp.w	r8, #31
 80051ae:	dd1f      	ble.n	80051f0 <_strtod_l+0x5b8>
 80051b0:	2500      	movs	r5, #0
 80051b2:	462e      	mov	r6, r5
 80051b4:	9507      	str	r5, [sp, #28]
 80051b6:	9505      	str	r5, [sp, #20]
 80051b8:	2322      	movs	r3, #34	; 0x22
 80051ba:	f04f 0a00 	mov.w	sl, #0
 80051be:	f04f 0b00 	mov.w	fp, #0
 80051c2:	6023      	str	r3, [r4, #0]
 80051c4:	e786      	b.n	80050d4 <_strtod_l+0x49c>
 80051c6:	bf00      	nop
 80051c8:	0800900d 	.word	0x0800900d
 80051cc:	0800904c 	.word	0x0800904c
 80051d0:	08009005 	.word	0x08009005
 80051d4:	0800918c 	.word	0x0800918c
 80051d8:	080094bb 	.word	0x080094bb
 80051dc:	08009380 	.word	0x08009380
 80051e0:	08009358 	.word	0x08009358
 80051e4:	7ff00000 	.word	0x7ff00000
 80051e8:	7ca00000 	.word	0x7ca00000
 80051ec:	7fefffff 	.word	0x7fefffff
 80051f0:	f018 0310 	ands.w	r3, r8, #16
 80051f4:	bf18      	it	ne
 80051f6:	236a      	movne	r3, #106	; 0x6a
 80051f8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80055a8 <_strtod_l+0x970>
 80051fc:	9304      	str	r3, [sp, #16]
 80051fe:	4650      	mov	r0, sl
 8005200:	4659      	mov	r1, fp
 8005202:	2300      	movs	r3, #0
 8005204:	f018 0f01 	tst.w	r8, #1
 8005208:	d004      	beq.n	8005214 <_strtod_l+0x5dc>
 800520a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800520e:	f7fb fa03 	bl	8000618 <__aeabi_dmul>
 8005212:	2301      	movs	r3, #1
 8005214:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005218:	f109 0908 	add.w	r9, r9, #8
 800521c:	d1f2      	bne.n	8005204 <_strtod_l+0x5cc>
 800521e:	b10b      	cbz	r3, 8005224 <_strtod_l+0x5ec>
 8005220:	4682      	mov	sl, r0
 8005222:	468b      	mov	fp, r1
 8005224:	9b04      	ldr	r3, [sp, #16]
 8005226:	b1c3      	cbz	r3, 800525a <_strtod_l+0x622>
 8005228:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800522c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005230:	2b00      	cmp	r3, #0
 8005232:	4659      	mov	r1, fp
 8005234:	dd11      	ble.n	800525a <_strtod_l+0x622>
 8005236:	2b1f      	cmp	r3, #31
 8005238:	f340 8124 	ble.w	8005484 <_strtod_l+0x84c>
 800523c:	2b34      	cmp	r3, #52	; 0x34
 800523e:	bfde      	ittt	le
 8005240:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005244:	f04f 33ff 	movle.w	r3, #4294967295
 8005248:	fa03 f202 	lslle.w	r2, r3, r2
 800524c:	f04f 0a00 	mov.w	sl, #0
 8005250:	bfcc      	ite	gt
 8005252:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005256:	ea02 0b01 	andle.w	fp, r2, r1
 800525a:	2200      	movs	r2, #0
 800525c:	2300      	movs	r3, #0
 800525e:	4650      	mov	r0, sl
 8005260:	4659      	mov	r1, fp
 8005262:	f7fb fc41 	bl	8000ae8 <__aeabi_dcmpeq>
 8005266:	2800      	cmp	r0, #0
 8005268:	d1a2      	bne.n	80051b0 <_strtod_l+0x578>
 800526a:	9b07      	ldr	r3, [sp, #28]
 800526c:	9300      	str	r3, [sp, #0]
 800526e:	9908      	ldr	r1, [sp, #32]
 8005270:	462b      	mov	r3, r5
 8005272:	463a      	mov	r2, r7
 8005274:	4620      	mov	r0, r4
 8005276:	f001 ff5b 	bl	8007130 <__s2b>
 800527a:	9007      	str	r0, [sp, #28]
 800527c:	2800      	cmp	r0, #0
 800527e:	f43f af1f 	beq.w	80050c0 <_strtod_l+0x488>
 8005282:	9b05      	ldr	r3, [sp, #20]
 8005284:	1b9e      	subs	r6, r3, r6
 8005286:	9b06      	ldr	r3, [sp, #24]
 8005288:	2b00      	cmp	r3, #0
 800528a:	bfb4      	ite	lt
 800528c:	4633      	movlt	r3, r6
 800528e:	2300      	movge	r3, #0
 8005290:	930c      	str	r3, [sp, #48]	; 0x30
 8005292:	9b06      	ldr	r3, [sp, #24]
 8005294:	2500      	movs	r5, #0
 8005296:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800529a:	9312      	str	r3, [sp, #72]	; 0x48
 800529c:	462e      	mov	r6, r5
 800529e:	9b07      	ldr	r3, [sp, #28]
 80052a0:	4620      	mov	r0, r4
 80052a2:	6859      	ldr	r1, [r3, #4]
 80052a4:	f001 fe9c 	bl	8006fe0 <_Balloc>
 80052a8:	9005      	str	r0, [sp, #20]
 80052aa:	2800      	cmp	r0, #0
 80052ac:	f43f af0c 	beq.w	80050c8 <_strtod_l+0x490>
 80052b0:	9b07      	ldr	r3, [sp, #28]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	3202      	adds	r2, #2
 80052b6:	f103 010c 	add.w	r1, r3, #12
 80052ba:	0092      	lsls	r2, r2, #2
 80052bc:	300c      	adds	r0, #12
 80052be:	f001 fe81 	bl	8006fc4 <memcpy>
 80052c2:	ec4b ab10 	vmov	d0, sl, fp
 80052c6:	aa1a      	add	r2, sp, #104	; 0x68
 80052c8:	a919      	add	r1, sp, #100	; 0x64
 80052ca:	4620      	mov	r0, r4
 80052cc:	f002 fa76 	bl	80077bc <__d2b>
 80052d0:	ec4b ab18 	vmov	d8, sl, fp
 80052d4:	9018      	str	r0, [sp, #96]	; 0x60
 80052d6:	2800      	cmp	r0, #0
 80052d8:	f43f aef6 	beq.w	80050c8 <_strtod_l+0x490>
 80052dc:	2101      	movs	r1, #1
 80052de:	4620      	mov	r0, r4
 80052e0:	f001 ffc0 	bl	8007264 <__i2b>
 80052e4:	4606      	mov	r6, r0
 80052e6:	2800      	cmp	r0, #0
 80052e8:	f43f aeee 	beq.w	80050c8 <_strtod_l+0x490>
 80052ec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052ee:	9904      	ldr	r1, [sp, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	bfab      	itete	ge
 80052f4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 80052f6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 80052f8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 80052fa:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 80052fe:	bfac      	ite	ge
 8005300:	eb03 0902 	addge.w	r9, r3, r2
 8005304:	1ad7      	sublt	r7, r2, r3
 8005306:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8005308:	eba3 0801 	sub.w	r8, r3, r1
 800530c:	4490      	add	r8, r2
 800530e:	4ba1      	ldr	r3, [pc, #644]	; (8005594 <_strtod_l+0x95c>)
 8005310:	f108 38ff 	add.w	r8, r8, #4294967295
 8005314:	4598      	cmp	r8, r3
 8005316:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800531a:	f280 80c7 	bge.w	80054ac <_strtod_l+0x874>
 800531e:	eba3 0308 	sub.w	r3, r3, r8
 8005322:	2b1f      	cmp	r3, #31
 8005324:	eba2 0203 	sub.w	r2, r2, r3
 8005328:	f04f 0101 	mov.w	r1, #1
 800532c:	f300 80b1 	bgt.w	8005492 <_strtod_l+0x85a>
 8005330:	fa01 f303 	lsl.w	r3, r1, r3
 8005334:	930d      	str	r3, [sp, #52]	; 0x34
 8005336:	2300      	movs	r3, #0
 8005338:	9308      	str	r3, [sp, #32]
 800533a:	eb09 0802 	add.w	r8, r9, r2
 800533e:	9b04      	ldr	r3, [sp, #16]
 8005340:	45c1      	cmp	r9, r8
 8005342:	4417      	add	r7, r2
 8005344:	441f      	add	r7, r3
 8005346:	464b      	mov	r3, r9
 8005348:	bfa8      	it	ge
 800534a:	4643      	movge	r3, r8
 800534c:	42bb      	cmp	r3, r7
 800534e:	bfa8      	it	ge
 8005350:	463b      	movge	r3, r7
 8005352:	2b00      	cmp	r3, #0
 8005354:	bfc2      	ittt	gt
 8005356:	eba8 0803 	subgt.w	r8, r8, r3
 800535a:	1aff      	subgt	r7, r7, r3
 800535c:	eba9 0903 	subgt.w	r9, r9, r3
 8005360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005362:	2b00      	cmp	r3, #0
 8005364:	dd17      	ble.n	8005396 <_strtod_l+0x75e>
 8005366:	4631      	mov	r1, r6
 8005368:	461a      	mov	r2, r3
 800536a:	4620      	mov	r0, r4
 800536c:	f002 f83a 	bl	80073e4 <__pow5mult>
 8005370:	4606      	mov	r6, r0
 8005372:	2800      	cmp	r0, #0
 8005374:	f43f aea8 	beq.w	80050c8 <_strtod_l+0x490>
 8005378:	4601      	mov	r1, r0
 800537a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800537c:	4620      	mov	r0, r4
 800537e:	f001 ff87 	bl	8007290 <__multiply>
 8005382:	900b      	str	r0, [sp, #44]	; 0x2c
 8005384:	2800      	cmp	r0, #0
 8005386:	f43f ae9f 	beq.w	80050c8 <_strtod_l+0x490>
 800538a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800538c:	4620      	mov	r0, r4
 800538e:	f001 fe67 	bl	8007060 <_Bfree>
 8005392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005394:	9318      	str	r3, [sp, #96]	; 0x60
 8005396:	f1b8 0f00 	cmp.w	r8, #0
 800539a:	f300 808c 	bgt.w	80054b6 <_strtod_l+0x87e>
 800539e:	9b06      	ldr	r3, [sp, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	dd08      	ble.n	80053b6 <_strtod_l+0x77e>
 80053a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80053a6:	9905      	ldr	r1, [sp, #20]
 80053a8:	4620      	mov	r0, r4
 80053aa:	f002 f81b 	bl	80073e4 <__pow5mult>
 80053ae:	9005      	str	r0, [sp, #20]
 80053b0:	2800      	cmp	r0, #0
 80053b2:	f43f ae89 	beq.w	80050c8 <_strtod_l+0x490>
 80053b6:	2f00      	cmp	r7, #0
 80053b8:	dd08      	ble.n	80053cc <_strtod_l+0x794>
 80053ba:	9905      	ldr	r1, [sp, #20]
 80053bc:	463a      	mov	r2, r7
 80053be:	4620      	mov	r0, r4
 80053c0:	f002 f86a 	bl	8007498 <__lshift>
 80053c4:	9005      	str	r0, [sp, #20]
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f43f ae7e 	beq.w	80050c8 <_strtod_l+0x490>
 80053cc:	f1b9 0f00 	cmp.w	r9, #0
 80053d0:	dd08      	ble.n	80053e4 <_strtod_l+0x7ac>
 80053d2:	4631      	mov	r1, r6
 80053d4:	464a      	mov	r2, r9
 80053d6:	4620      	mov	r0, r4
 80053d8:	f002 f85e 	bl	8007498 <__lshift>
 80053dc:	4606      	mov	r6, r0
 80053de:	2800      	cmp	r0, #0
 80053e0:	f43f ae72 	beq.w	80050c8 <_strtod_l+0x490>
 80053e4:	9a05      	ldr	r2, [sp, #20]
 80053e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80053e8:	4620      	mov	r0, r4
 80053ea:	f002 f8e1 	bl	80075b0 <__mdiff>
 80053ee:	4605      	mov	r5, r0
 80053f0:	2800      	cmp	r0, #0
 80053f2:	f43f ae69 	beq.w	80050c8 <_strtod_l+0x490>
 80053f6:	68c3      	ldr	r3, [r0, #12]
 80053f8:	930b      	str	r3, [sp, #44]	; 0x2c
 80053fa:	2300      	movs	r3, #0
 80053fc:	60c3      	str	r3, [r0, #12]
 80053fe:	4631      	mov	r1, r6
 8005400:	f002 f8ba 	bl	8007578 <__mcmp>
 8005404:	2800      	cmp	r0, #0
 8005406:	da60      	bge.n	80054ca <_strtod_l+0x892>
 8005408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800540a:	ea53 030a 	orrs.w	r3, r3, sl
 800540e:	f040 8082 	bne.w	8005516 <_strtod_l+0x8de>
 8005412:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005416:	2b00      	cmp	r3, #0
 8005418:	d17d      	bne.n	8005516 <_strtod_l+0x8de>
 800541a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800541e:	0d1b      	lsrs	r3, r3, #20
 8005420:	051b      	lsls	r3, r3, #20
 8005422:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005426:	d976      	bls.n	8005516 <_strtod_l+0x8de>
 8005428:	696b      	ldr	r3, [r5, #20]
 800542a:	b913      	cbnz	r3, 8005432 <_strtod_l+0x7fa>
 800542c:	692b      	ldr	r3, [r5, #16]
 800542e:	2b01      	cmp	r3, #1
 8005430:	dd71      	ble.n	8005516 <_strtod_l+0x8de>
 8005432:	4629      	mov	r1, r5
 8005434:	2201      	movs	r2, #1
 8005436:	4620      	mov	r0, r4
 8005438:	f002 f82e 	bl	8007498 <__lshift>
 800543c:	4631      	mov	r1, r6
 800543e:	4605      	mov	r5, r0
 8005440:	f002 f89a 	bl	8007578 <__mcmp>
 8005444:	2800      	cmp	r0, #0
 8005446:	dd66      	ble.n	8005516 <_strtod_l+0x8de>
 8005448:	9904      	ldr	r1, [sp, #16]
 800544a:	4a53      	ldr	r2, [pc, #332]	; (8005598 <_strtod_l+0x960>)
 800544c:	465b      	mov	r3, fp
 800544e:	2900      	cmp	r1, #0
 8005450:	f000 8081 	beq.w	8005556 <_strtod_l+0x91e>
 8005454:	ea02 010b 	and.w	r1, r2, fp
 8005458:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800545c:	dc7b      	bgt.n	8005556 <_strtod_l+0x91e>
 800545e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005462:	f77f aea9 	ble.w	80051b8 <_strtod_l+0x580>
 8005466:	4b4d      	ldr	r3, [pc, #308]	; (800559c <_strtod_l+0x964>)
 8005468:	4650      	mov	r0, sl
 800546a:	4659      	mov	r1, fp
 800546c:	2200      	movs	r2, #0
 800546e:	f7fb f8d3 	bl	8000618 <__aeabi_dmul>
 8005472:	460b      	mov	r3, r1
 8005474:	4303      	orrs	r3, r0
 8005476:	bf08      	it	eq
 8005478:	2322      	moveq	r3, #34	; 0x22
 800547a:	4682      	mov	sl, r0
 800547c:	468b      	mov	fp, r1
 800547e:	bf08      	it	eq
 8005480:	6023      	streq	r3, [r4, #0]
 8005482:	e62b      	b.n	80050dc <_strtod_l+0x4a4>
 8005484:	f04f 32ff 	mov.w	r2, #4294967295
 8005488:	fa02 f303 	lsl.w	r3, r2, r3
 800548c:	ea03 0a0a 	and.w	sl, r3, sl
 8005490:	e6e3      	b.n	800525a <_strtod_l+0x622>
 8005492:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8005496:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800549a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800549e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80054a2:	fa01 f308 	lsl.w	r3, r1, r8
 80054a6:	9308      	str	r3, [sp, #32]
 80054a8:	910d      	str	r1, [sp, #52]	; 0x34
 80054aa:	e746      	b.n	800533a <_strtod_l+0x702>
 80054ac:	2300      	movs	r3, #0
 80054ae:	9308      	str	r3, [sp, #32]
 80054b0:	2301      	movs	r3, #1
 80054b2:	930d      	str	r3, [sp, #52]	; 0x34
 80054b4:	e741      	b.n	800533a <_strtod_l+0x702>
 80054b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80054b8:	4642      	mov	r2, r8
 80054ba:	4620      	mov	r0, r4
 80054bc:	f001 ffec 	bl	8007498 <__lshift>
 80054c0:	9018      	str	r0, [sp, #96]	; 0x60
 80054c2:	2800      	cmp	r0, #0
 80054c4:	f47f af6b 	bne.w	800539e <_strtod_l+0x766>
 80054c8:	e5fe      	b.n	80050c8 <_strtod_l+0x490>
 80054ca:	465f      	mov	r7, fp
 80054cc:	d16e      	bne.n	80055ac <_strtod_l+0x974>
 80054ce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054d0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80054d4:	b342      	cbz	r2, 8005528 <_strtod_l+0x8f0>
 80054d6:	4a32      	ldr	r2, [pc, #200]	; (80055a0 <_strtod_l+0x968>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d128      	bne.n	800552e <_strtod_l+0x8f6>
 80054dc:	9b04      	ldr	r3, [sp, #16]
 80054de:	4651      	mov	r1, sl
 80054e0:	b1eb      	cbz	r3, 800551e <_strtod_l+0x8e6>
 80054e2:	4b2d      	ldr	r3, [pc, #180]	; (8005598 <_strtod_l+0x960>)
 80054e4:	403b      	ands	r3, r7
 80054e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295
 80054ee:	d819      	bhi.n	8005524 <_strtod_l+0x8ec>
 80054f0:	0d1b      	lsrs	r3, r3, #20
 80054f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	4299      	cmp	r1, r3
 80054fc:	d117      	bne.n	800552e <_strtod_l+0x8f6>
 80054fe:	4b29      	ldr	r3, [pc, #164]	; (80055a4 <_strtod_l+0x96c>)
 8005500:	429f      	cmp	r7, r3
 8005502:	d102      	bne.n	800550a <_strtod_l+0x8d2>
 8005504:	3101      	adds	r1, #1
 8005506:	f43f addf 	beq.w	80050c8 <_strtod_l+0x490>
 800550a:	4b23      	ldr	r3, [pc, #140]	; (8005598 <_strtod_l+0x960>)
 800550c:	403b      	ands	r3, r7
 800550e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8005512:	f04f 0a00 	mov.w	sl, #0
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1a4      	bne.n	8005466 <_strtod_l+0x82e>
 800551c:	e5de      	b.n	80050dc <_strtod_l+0x4a4>
 800551e:	f04f 33ff 	mov.w	r3, #4294967295
 8005522:	e7ea      	b.n	80054fa <_strtod_l+0x8c2>
 8005524:	4613      	mov	r3, r2
 8005526:	e7e8      	b.n	80054fa <_strtod_l+0x8c2>
 8005528:	ea53 030a 	orrs.w	r3, r3, sl
 800552c:	d08c      	beq.n	8005448 <_strtod_l+0x810>
 800552e:	9b08      	ldr	r3, [sp, #32]
 8005530:	b1db      	cbz	r3, 800556a <_strtod_l+0x932>
 8005532:	423b      	tst	r3, r7
 8005534:	d0ef      	beq.n	8005516 <_strtod_l+0x8de>
 8005536:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005538:	9a04      	ldr	r2, [sp, #16]
 800553a:	4650      	mov	r0, sl
 800553c:	4659      	mov	r1, fp
 800553e:	b1c3      	cbz	r3, 8005572 <_strtod_l+0x93a>
 8005540:	f7ff fb5d 	bl	8004bfe <sulp>
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	ec51 0b18 	vmov	r0, r1, d8
 800554c:	f7fa feae 	bl	80002ac <__adddf3>
 8005550:	4682      	mov	sl, r0
 8005552:	468b      	mov	fp, r1
 8005554:	e7df      	b.n	8005516 <_strtod_l+0x8de>
 8005556:	4013      	ands	r3, r2
 8005558:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800555c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005560:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005564:	f04f 3aff 	mov.w	sl, #4294967295
 8005568:	e7d5      	b.n	8005516 <_strtod_l+0x8de>
 800556a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800556c:	ea13 0f0a 	tst.w	r3, sl
 8005570:	e7e0      	b.n	8005534 <_strtod_l+0x8fc>
 8005572:	f7ff fb44 	bl	8004bfe <sulp>
 8005576:	4602      	mov	r2, r0
 8005578:	460b      	mov	r3, r1
 800557a:	ec51 0b18 	vmov	r0, r1, d8
 800557e:	f7fa fe93 	bl	80002a8 <__aeabi_dsub>
 8005582:	2200      	movs	r2, #0
 8005584:	2300      	movs	r3, #0
 8005586:	4682      	mov	sl, r0
 8005588:	468b      	mov	fp, r1
 800558a:	f7fb faad 	bl	8000ae8 <__aeabi_dcmpeq>
 800558e:	2800      	cmp	r0, #0
 8005590:	d0c1      	beq.n	8005516 <_strtod_l+0x8de>
 8005592:	e611      	b.n	80051b8 <_strtod_l+0x580>
 8005594:	fffffc02 	.word	0xfffffc02
 8005598:	7ff00000 	.word	0x7ff00000
 800559c:	39500000 	.word	0x39500000
 80055a0:	000fffff 	.word	0x000fffff
 80055a4:	7fefffff 	.word	0x7fefffff
 80055a8:	08009060 	.word	0x08009060
 80055ac:	4631      	mov	r1, r6
 80055ae:	4628      	mov	r0, r5
 80055b0:	f002 f960 	bl	8007874 <__ratio>
 80055b4:	ec59 8b10 	vmov	r8, r9, d0
 80055b8:	ee10 0a10 	vmov	r0, s0
 80055bc:	2200      	movs	r2, #0
 80055be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80055c2:	4649      	mov	r1, r9
 80055c4:	f7fb faa4 	bl	8000b10 <__aeabi_dcmple>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d07a      	beq.n	80056c2 <_strtod_l+0xa8a>
 80055cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04a      	beq.n	8005668 <_strtod_l+0xa30>
 80055d2:	4b95      	ldr	r3, [pc, #596]	; (8005828 <_strtod_l+0xbf0>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80055da:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8005828 <_strtod_l+0xbf0>
 80055de:	f04f 0800 	mov.w	r8, #0
 80055e2:	4b92      	ldr	r3, [pc, #584]	; (800582c <_strtod_l+0xbf4>)
 80055e4:	403b      	ands	r3, r7
 80055e6:	930d      	str	r3, [sp, #52]	; 0x34
 80055e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80055ea:	4b91      	ldr	r3, [pc, #580]	; (8005830 <_strtod_l+0xbf8>)
 80055ec:	429a      	cmp	r2, r3
 80055ee:	f040 80b0 	bne.w	8005752 <_strtod_l+0xb1a>
 80055f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80055f6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80055fa:	ec4b ab10 	vmov	d0, sl, fp
 80055fe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005602:	f002 f85f 	bl	80076c4 <__ulp>
 8005606:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800560a:	ec53 2b10 	vmov	r2, r3, d0
 800560e:	f7fb f803 	bl	8000618 <__aeabi_dmul>
 8005612:	4652      	mov	r2, sl
 8005614:	465b      	mov	r3, fp
 8005616:	f7fa fe49 	bl	80002ac <__adddf3>
 800561a:	460b      	mov	r3, r1
 800561c:	4983      	ldr	r1, [pc, #524]	; (800582c <_strtod_l+0xbf4>)
 800561e:	4a85      	ldr	r2, [pc, #532]	; (8005834 <_strtod_l+0xbfc>)
 8005620:	4019      	ands	r1, r3
 8005622:	4291      	cmp	r1, r2
 8005624:	4682      	mov	sl, r0
 8005626:	d960      	bls.n	80056ea <_strtod_l+0xab2>
 8005628:	ee18 3a90 	vmov	r3, s17
 800562c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8005630:	4293      	cmp	r3, r2
 8005632:	d104      	bne.n	800563e <_strtod_l+0xa06>
 8005634:	ee18 3a10 	vmov	r3, s16
 8005638:	3301      	adds	r3, #1
 800563a:	f43f ad45 	beq.w	80050c8 <_strtod_l+0x490>
 800563e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8005840 <_strtod_l+0xc08>
 8005642:	f04f 3aff 	mov.w	sl, #4294967295
 8005646:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005648:	4620      	mov	r0, r4
 800564a:	f001 fd09 	bl	8007060 <_Bfree>
 800564e:	9905      	ldr	r1, [sp, #20]
 8005650:	4620      	mov	r0, r4
 8005652:	f001 fd05 	bl	8007060 <_Bfree>
 8005656:	4631      	mov	r1, r6
 8005658:	4620      	mov	r0, r4
 800565a:	f001 fd01 	bl	8007060 <_Bfree>
 800565e:	4629      	mov	r1, r5
 8005660:	4620      	mov	r0, r4
 8005662:	f001 fcfd 	bl	8007060 <_Bfree>
 8005666:	e61a      	b.n	800529e <_strtod_l+0x666>
 8005668:	f1ba 0f00 	cmp.w	sl, #0
 800566c:	d11b      	bne.n	80056a6 <_strtod_l+0xa6e>
 800566e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005672:	b9f3      	cbnz	r3, 80056b2 <_strtod_l+0xa7a>
 8005674:	4b6c      	ldr	r3, [pc, #432]	; (8005828 <_strtod_l+0xbf0>)
 8005676:	2200      	movs	r2, #0
 8005678:	4640      	mov	r0, r8
 800567a:	4649      	mov	r1, r9
 800567c:	f7fb fa3e 	bl	8000afc <__aeabi_dcmplt>
 8005680:	b9d0      	cbnz	r0, 80056b8 <_strtod_l+0xa80>
 8005682:	4640      	mov	r0, r8
 8005684:	4649      	mov	r1, r9
 8005686:	4b6c      	ldr	r3, [pc, #432]	; (8005838 <_strtod_l+0xc00>)
 8005688:	2200      	movs	r2, #0
 800568a:	f7fa ffc5 	bl	8000618 <__aeabi_dmul>
 800568e:	4680      	mov	r8, r0
 8005690:	4689      	mov	r9, r1
 8005692:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005696:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800569a:	9315      	str	r3, [sp, #84]	; 0x54
 800569c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80056a0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056a4:	e79d      	b.n	80055e2 <_strtod_l+0x9aa>
 80056a6:	f1ba 0f01 	cmp.w	sl, #1
 80056aa:	d102      	bne.n	80056b2 <_strtod_l+0xa7a>
 80056ac:	2f00      	cmp	r7, #0
 80056ae:	f43f ad83 	beq.w	80051b8 <_strtod_l+0x580>
 80056b2:	4b62      	ldr	r3, [pc, #392]	; (800583c <_strtod_l+0xc04>)
 80056b4:	2200      	movs	r2, #0
 80056b6:	e78e      	b.n	80055d6 <_strtod_l+0x99e>
 80056b8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8005838 <_strtod_l+0xc00>
 80056bc:	f04f 0800 	mov.w	r8, #0
 80056c0:	e7e7      	b.n	8005692 <_strtod_l+0xa5a>
 80056c2:	4b5d      	ldr	r3, [pc, #372]	; (8005838 <_strtod_l+0xc00>)
 80056c4:	4640      	mov	r0, r8
 80056c6:	4649      	mov	r1, r9
 80056c8:	2200      	movs	r2, #0
 80056ca:	f7fa ffa5 	bl	8000618 <__aeabi_dmul>
 80056ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d0:	4680      	mov	r8, r0
 80056d2:	4689      	mov	r9, r1
 80056d4:	b933      	cbnz	r3, 80056e4 <_strtod_l+0xaac>
 80056d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056da:	900e      	str	r0, [sp, #56]	; 0x38
 80056dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80056de:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80056e2:	e7dd      	b.n	80056a0 <_strtod_l+0xa68>
 80056e4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80056e8:	e7f9      	b.n	80056de <_strtod_l+0xaa6>
 80056ea:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80056ee:	9b04      	ldr	r3, [sp, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1a8      	bne.n	8005646 <_strtod_l+0xa0e>
 80056f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80056f8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80056fa:	0d1b      	lsrs	r3, r3, #20
 80056fc:	051b      	lsls	r3, r3, #20
 80056fe:	429a      	cmp	r2, r3
 8005700:	d1a1      	bne.n	8005646 <_strtod_l+0xa0e>
 8005702:	4640      	mov	r0, r8
 8005704:	4649      	mov	r1, r9
 8005706:	f7fb fae7 	bl	8000cd8 <__aeabi_d2lz>
 800570a:	f7fa ff57 	bl	80005bc <__aeabi_l2d>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4640      	mov	r0, r8
 8005714:	4649      	mov	r1, r9
 8005716:	f7fa fdc7 	bl	80002a8 <__aeabi_dsub>
 800571a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800571c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005720:	ea43 030a 	orr.w	r3, r3, sl
 8005724:	4313      	orrs	r3, r2
 8005726:	4680      	mov	r8, r0
 8005728:	4689      	mov	r9, r1
 800572a:	d055      	beq.n	80057d8 <_strtod_l+0xba0>
 800572c:	a336      	add	r3, pc, #216	; (adr r3, 8005808 <_strtod_l+0xbd0>)
 800572e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005732:	f7fb f9e3 	bl	8000afc <__aeabi_dcmplt>
 8005736:	2800      	cmp	r0, #0
 8005738:	f47f acd0 	bne.w	80050dc <_strtod_l+0x4a4>
 800573c:	a334      	add	r3, pc, #208	; (adr r3, 8005810 <_strtod_l+0xbd8>)
 800573e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fb f9f7 	bl	8000b38 <__aeabi_dcmpgt>
 800574a:	2800      	cmp	r0, #0
 800574c:	f43f af7b 	beq.w	8005646 <_strtod_l+0xa0e>
 8005750:	e4c4      	b.n	80050dc <_strtod_l+0x4a4>
 8005752:	9b04      	ldr	r3, [sp, #16]
 8005754:	b333      	cbz	r3, 80057a4 <_strtod_l+0xb6c>
 8005756:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005758:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800575c:	d822      	bhi.n	80057a4 <_strtod_l+0xb6c>
 800575e:	a32e      	add	r3, pc, #184	; (adr r3, 8005818 <_strtod_l+0xbe0>)
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	4640      	mov	r0, r8
 8005766:	4649      	mov	r1, r9
 8005768:	f7fb f9d2 	bl	8000b10 <__aeabi_dcmple>
 800576c:	b1a0      	cbz	r0, 8005798 <_strtod_l+0xb60>
 800576e:	4649      	mov	r1, r9
 8005770:	4640      	mov	r0, r8
 8005772:	f7fb fa29 	bl	8000bc8 <__aeabi_d2uiz>
 8005776:	2801      	cmp	r0, #1
 8005778:	bf38      	it	cc
 800577a:	2001      	movcc	r0, #1
 800577c:	f7fa fed2 	bl	8000524 <__aeabi_ui2d>
 8005780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005782:	4680      	mov	r8, r0
 8005784:	4689      	mov	r9, r1
 8005786:	bb23      	cbnz	r3, 80057d2 <_strtod_l+0xb9a>
 8005788:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800578c:	9010      	str	r0, [sp, #64]	; 0x40
 800578e:	9311      	str	r3, [sp, #68]	; 0x44
 8005790:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005794:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800579a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800579c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80057a0:	1a9b      	subs	r3, r3, r2
 80057a2:	9309      	str	r3, [sp, #36]	; 0x24
 80057a4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057a8:	eeb0 0a48 	vmov.f32	s0, s16
 80057ac:	eef0 0a68 	vmov.f32	s1, s17
 80057b0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80057b4:	f001 ff86 	bl	80076c4 <__ulp>
 80057b8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80057bc:	ec53 2b10 	vmov	r2, r3, d0
 80057c0:	f7fa ff2a 	bl	8000618 <__aeabi_dmul>
 80057c4:	ec53 2b18 	vmov	r2, r3, d8
 80057c8:	f7fa fd70 	bl	80002ac <__adddf3>
 80057cc:	4682      	mov	sl, r0
 80057ce:	468b      	mov	fp, r1
 80057d0:	e78d      	b.n	80056ee <_strtod_l+0xab6>
 80057d2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80057d6:	e7db      	b.n	8005790 <_strtod_l+0xb58>
 80057d8:	a311      	add	r3, pc, #68	; (adr r3, 8005820 <_strtod_l+0xbe8>)
 80057da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057de:	f7fb f98d 	bl	8000afc <__aeabi_dcmplt>
 80057e2:	e7b2      	b.n	800574a <_strtod_l+0xb12>
 80057e4:	2300      	movs	r3, #0
 80057e6:	930a      	str	r3, [sp, #40]	; 0x28
 80057e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80057ea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80057ec:	6013      	str	r3, [r2, #0]
 80057ee:	f7ff ba6b 	b.w	8004cc8 <_strtod_l+0x90>
 80057f2:	2a65      	cmp	r2, #101	; 0x65
 80057f4:	f43f ab5f 	beq.w	8004eb6 <_strtod_l+0x27e>
 80057f8:	2a45      	cmp	r2, #69	; 0x45
 80057fa:	f43f ab5c 	beq.w	8004eb6 <_strtod_l+0x27e>
 80057fe:	2301      	movs	r3, #1
 8005800:	f7ff bb94 	b.w	8004f2c <_strtod_l+0x2f4>
 8005804:	f3af 8000 	nop.w
 8005808:	94a03595 	.word	0x94a03595
 800580c:	3fdfffff 	.word	0x3fdfffff
 8005810:	35afe535 	.word	0x35afe535
 8005814:	3fe00000 	.word	0x3fe00000
 8005818:	ffc00000 	.word	0xffc00000
 800581c:	41dfffff 	.word	0x41dfffff
 8005820:	94a03595 	.word	0x94a03595
 8005824:	3fcfffff 	.word	0x3fcfffff
 8005828:	3ff00000 	.word	0x3ff00000
 800582c:	7ff00000 	.word	0x7ff00000
 8005830:	7fe00000 	.word	0x7fe00000
 8005834:	7c9fffff 	.word	0x7c9fffff
 8005838:	3fe00000 	.word	0x3fe00000
 800583c:	bff00000 	.word	0xbff00000
 8005840:	7fefffff 	.word	0x7fefffff

08005844 <_strtod_r>:
 8005844:	4b01      	ldr	r3, [pc, #4]	; (800584c <_strtod_r+0x8>)
 8005846:	f7ff b9f7 	b.w	8004c38 <_strtod_l>
 800584a:	bf00      	nop
 800584c:	20000074 	.word	0x20000074

08005850 <_strtol_l.constprop.0>:
 8005850:	2b01      	cmp	r3, #1
 8005852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005856:	d001      	beq.n	800585c <_strtol_l.constprop.0+0xc>
 8005858:	2b24      	cmp	r3, #36	; 0x24
 800585a:	d906      	bls.n	800586a <_strtol_l.constprop.0+0x1a>
 800585c:	f7fe fa60 	bl	8003d20 <__errno>
 8005860:	2316      	movs	r3, #22
 8005862:	6003      	str	r3, [r0, #0]
 8005864:	2000      	movs	r0, #0
 8005866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800586a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005950 <_strtol_l.constprop.0+0x100>
 800586e:	460d      	mov	r5, r1
 8005870:	462e      	mov	r6, r5
 8005872:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005876:	f814 700c 	ldrb.w	r7, [r4, ip]
 800587a:	f017 0708 	ands.w	r7, r7, #8
 800587e:	d1f7      	bne.n	8005870 <_strtol_l.constprop.0+0x20>
 8005880:	2c2d      	cmp	r4, #45	; 0x2d
 8005882:	d132      	bne.n	80058ea <_strtol_l.constprop.0+0x9a>
 8005884:	782c      	ldrb	r4, [r5, #0]
 8005886:	2701      	movs	r7, #1
 8005888:	1cb5      	adds	r5, r6, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d05b      	beq.n	8005946 <_strtol_l.constprop.0+0xf6>
 800588e:	2b10      	cmp	r3, #16
 8005890:	d109      	bne.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005892:	2c30      	cmp	r4, #48	; 0x30
 8005894:	d107      	bne.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005896:	782c      	ldrb	r4, [r5, #0]
 8005898:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800589c:	2c58      	cmp	r4, #88	; 0x58
 800589e:	d14d      	bne.n	800593c <_strtol_l.constprop.0+0xec>
 80058a0:	786c      	ldrb	r4, [r5, #1]
 80058a2:	2310      	movs	r3, #16
 80058a4:	3502      	adds	r5, #2
 80058a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80058aa:	f108 38ff 	add.w	r8, r8, #4294967295
 80058ae:	f04f 0c00 	mov.w	ip, #0
 80058b2:	fbb8 f9f3 	udiv	r9, r8, r3
 80058b6:	4666      	mov	r6, ip
 80058b8:	fb03 8a19 	mls	sl, r3, r9, r8
 80058bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80058c0:	f1be 0f09 	cmp.w	lr, #9
 80058c4:	d816      	bhi.n	80058f4 <_strtol_l.constprop.0+0xa4>
 80058c6:	4674      	mov	r4, lr
 80058c8:	42a3      	cmp	r3, r4
 80058ca:	dd24      	ble.n	8005916 <_strtol_l.constprop.0+0xc6>
 80058cc:	f1bc 0f00 	cmp.w	ip, #0
 80058d0:	db1e      	blt.n	8005910 <_strtol_l.constprop.0+0xc0>
 80058d2:	45b1      	cmp	r9, r6
 80058d4:	d31c      	bcc.n	8005910 <_strtol_l.constprop.0+0xc0>
 80058d6:	d101      	bne.n	80058dc <_strtol_l.constprop.0+0x8c>
 80058d8:	45a2      	cmp	sl, r4
 80058da:	db19      	blt.n	8005910 <_strtol_l.constprop.0+0xc0>
 80058dc:	fb06 4603 	mla	r6, r6, r3, r4
 80058e0:	f04f 0c01 	mov.w	ip, #1
 80058e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058e8:	e7e8      	b.n	80058bc <_strtol_l.constprop.0+0x6c>
 80058ea:	2c2b      	cmp	r4, #43	; 0x2b
 80058ec:	bf04      	itt	eq
 80058ee:	782c      	ldrbeq	r4, [r5, #0]
 80058f0:	1cb5      	addeq	r5, r6, #2
 80058f2:	e7ca      	b.n	800588a <_strtol_l.constprop.0+0x3a>
 80058f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80058f8:	f1be 0f19 	cmp.w	lr, #25
 80058fc:	d801      	bhi.n	8005902 <_strtol_l.constprop.0+0xb2>
 80058fe:	3c37      	subs	r4, #55	; 0x37
 8005900:	e7e2      	b.n	80058c8 <_strtol_l.constprop.0+0x78>
 8005902:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005906:	f1be 0f19 	cmp.w	lr, #25
 800590a:	d804      	bhi.n	8005916 <_strtol_l.constprop.0+0xc6>
 800590c:	3c57      	subs	r4, #87	; 0x57
 800590e:	e7db      	b.n	80058c8 <_strtol_l.constprop.0+0x78>
 8005910:	f04f 3cff 	mov.w	ip, #4294967295
 8005914:	e7e6      	b.n	80058e4 <_strtol_l.constprop.0+0x94>
 8005916:	f1bc 0f00 	cmp.w	ip, #0
 800591a:	da05      	bge.n	8005928 <_strtol_l.constprop.0+0xd8>
 800591c:	2322      	movs	r3, #34	; 0x22
 800591e:	6003      	str	r3, [r0, #0]
 8005920:	4646      	mov	r6, r8
 8005922:	b942      	cbnz	r2, 8005936 <_strtol_l.constprop.0+0xe6>
 8005924:	4630      	mov	r0, r6
 8005926:	e79e      	b.n	8005866 <_strtol_l.constprop.0+0x16>
 8005928:	b107      	cbz	r7, 800592c <_strtol_l.constprop.0+0xdc>
 800592a:	4276      	negs	r6, r6
 800592c:	2a00      	cmp	r2, #0
 800592e:	d0f9      	beq.n	8005924 <_strtol_l.constprop.0+0xd4>
 8005930:	f1bc 0f00 	cmp.w	ip, #0
 8005934:	d000      	beq.n	8005938 <_strtol_l.constprop.0+0xe8>
 8005936:	1e69      	subs	r1, r5, #1
 8005938:	6011      	str	r1, [r2, #0]
 800593a:	e7f3      	b.n	8005924 <_strtol_l.constprop.0+0xd4>
 800593c:	2430      	movs	r4, #48	; 0x30
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1b1      	bne.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005942:	2308      	movs	r3, #8
 8005944:	e7af      	b.n	80058a6 <_strtol_l.constprop.0+0x56>
 8005946:	2c30      	cmp	r4, #48	; 0x30
 8005948:	d0a5      	beq.n	8005896 <_strtol_l.constprop.0+0x46>
 800594a:	230a      	movs	r3, #10
 800594c:	e7ab      	b.n	80058a6 <_strtol_l.constprop.0+0x56>
 800594e:	bf00      	nop
 8005950:	08009089 	.word	0x08009089

08005954 <_strtol_r>:
 8005954:	f7ff bf7c 	b.w	8005850 <_strtol_l.constprop.0>

08005958 <_write_r>:
 8005958:	b538      	push	{r3, r4, r5, lr}
 800595a:	4d07      	ldr	r5, [pc, #28]	; (8005978 <_write_r+0x20>)
 800595c:	4604      	mov	r4, r0
 800595e:	4608      	mov	r0, r1
 8005960:	4611      	mov	r1, r2
 8005962:	2200      	movs	r2, #0
 8005964:	602a      	str	r2, [r5, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	f7fb ff2f 	bl	80017ca <_write>
 800596c:	1c43      	adds	r3, r0, #1
 800596e:	d102      	bne.n	8005976 <_write_r+0x1e>
 8005970:	682b      	ldr	r3, [r5, #0]
 8005972:	b103      	cbz	r3, 8005976 <_write_r+0x1e>
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	bd38      	pop	{r3, r4, r5, pc}
 8005978:	20000378 	.word	0x20000378

0800597c <_close_r>:
 800597c:	b538      	push	{r3, r4, r5, lr}
 800597e:	4d06      	ldr	r5, [pc, #24]	; (8005998 <_close_r+0x1c>)
 8005980:	2300      	movs	r3, #0
 8005982:	4604      	mov	r4, r0
 8005984:	4608      	mov	r0, r1
 8005986:	602b      	str	r3, [r5, #0]
 8005988:	f7fb ff3b 	bl	8001802 <_close>
 800598c:	1c43      	adds	r3, r0, #1
 800598e:	d102      	bne.n	8005996 <_close_r+0x1a>
 8005990:	682b      	ldr	r3, [r5, #0]
 8005992:	b103      	cbz	r3, 8005996 <_close_r+0x1a>
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	bd38      	pop	{r3, r4, r5, pc}
 8005998:	20000378 	.word	0x20000378

0800599c <quorem>:
 800599c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059a0:	6903      	ldr	r3, [r0, #16]
 80059a2:	690c      	ldr	r4, [r1, #16]
 80059a4:	42a3      	cmp	r3, r4
 80059a6:	4607      	mov	r7, r0
 80059a8:	f2c0 8081 	blt.w	8005aae <quorem+0x112>
 80059ac:	3c01      	subs	r4, #1
 80059ae:	f101 0814 	add.w	r8, r1, #20
 80059b2:	f100 0514 	add.w	r5, r0, #20
 80059b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059ba:	9301      	str	r3, [sp, #4]
 80059bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80059c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059c4:	3301      	adds	r3, #1
 80059c6:	429a      	cmp	r2, r3
 80059c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80059cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80059d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80059d4:	d331      	bcc.n	8005a3a <quorem+0x9e>
 80059d6:	f04f 0e00 	mov.w	lr, #0
 80059da:	4640      	mov	r0, r8
 80059dc:	46ac      	mov	ip, r5
 80059de:	46f2      	mov	sl, lr
 80059e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80059e4:	b293      	uxth	r3, r2
 80059e6:	fb06 e303 	mla	r3, r6, r3, lr
 80059ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ebaa 0303 	sub.w	r3, sl, r3
 80059f4:	f8dc a000 	ldr.w	sl, [ip]
 80059f8:	0c12      	lsrs	r2, r2, #16
 80059fa:	fa13 f38a 	uxtah	r3, r3, sl
 80059fe:	fb06 e202 	mla	r2, r6, r2, lr
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	9b00      	ldr	r3, [sp, #0]
 8005a06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a0a:	b292      	uxth	r2, r2
 8005a0c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a10:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a14:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a18:	4581      	cmp	r9, r0
 8005a1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a1e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a22:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a26:	d2db      	bcs.n	80059e0 <quorem+0x44>
 8005a28:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a2c:	b92b      	cbnz	r3, 8005a3a <quorem+0x9e>
 8005a2e:	9b01      	ldr	r3, [sp, #4]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	429d      	cmp	r5, r3
 8005a34:	461a      	mov	r2, r3
 8005a36:	d32e      	bcc.n	8005a96 <quorem+0xfa>
 8005a38:	613c      	str	r4, [r7, #16]
 8005a3a:	4638      	mov	r0, r7
 8005a3c:	f001 fd9c 	bl	8007578 <__mcmp>
 8005a40:	2800      	cmp	r0, #0
 8005a42:	db24      	blt.n	8005a8e <quorem+0xf2>
 8005a44:	3601      	adds	r6, #1
 8005a46:	4628      	mov	r0, r5
 8005a48:	f04f 0c00 	mov.w	ip, #0
 8005a4c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005a50:	f8d0 e000 	ldr.w	lr, [r0]
 8005a54:	b293      	uxth	r3, r2
 8005a56:	ebac 0303 	sub.w	r3, ip, r3
 8005a5a:	0c12      	lsrs	r2, r2, #16
 8005a5c:	fa13 f38e 	uxtah	r3, r3, lr
 8005a60:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005a64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a6e:	45c1      	cmp	r9, r8
 8005a70:	f840 3b04 	str.w	r3, [r0], #4
 8005a74:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005a78:	d2e8      	bcs.n	8005a4c <quorem+0xb0>
 8005a7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a82:	b922      	cbnz	r2, 8005a8e <quorem+0xf2>
 8005a84:	3b04      	subs	r3, #4
 8005a86:	429d      	cmp	r5, r3
 8005a88:	461a      	mov	r2, r3
 8005a8a:	d30a      	bcc.n	8005aa2 <quorem+0x106>
 8005a8c:	613c      	str	r4, [r7, #16]
 8005a8e:	4630      	mov	r0, r6
 8005a90:	b003      	add	sp, #12
 8005a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	2a00      	cmp	r2, #0
 8005a9c:	d1cc      	bne.n	8005a38 <quorem+0x9c>
 8005a9e:	3c01      	subs	r4, #1
 8005aa0:	e7c7      	b.n	8005a32 <quorem+0x96>
 8005aa2:	6812      	ldr	r2, [r2, #0]
 8005aa4:	3b04      	subs	r3, #4
 8005aa6:	2a00      	cmp	r2, #0
 8005aa8:	d1f0      	bne.n	8005a8c <quorem+0xf0>
 8005aaa:	3c01      	subs	r4, #1
 8005aac:	e7eb      	b.n	8005a86 <quorem+0xea>
 8005aae:	2000      	movs	r0, #0
 8005ab0:	e7ee      	b.n	8005a90 <quorem+0xf4>
 8005ab2:	0000      	movs	r0, r0
 8005ab4:	0000      	movs	r0, r0
	...

08005ab8 <_dtoa_r>:
 8005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005abc:	ed2d 8b04 	vpush	{d8-d9}
 8005ac0:	ec57 6b10 	vmov	r6, r7, d0
 8005ac4:	b093      	sub	sp, #76	; 0x4c
 8005ac6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ac8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005acc:	9106      	str	r1, [sp, #24]
 8005ace:	ee10 aa10 	vmov	sl, s0
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	9209      	str	r2, [sp, #36]	; 0x24
 8005ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8005ad8:	46bb      	mov	fp, r7
 8005ada:	b975      	cbnz	r5, 8005afa <_dtoa_r+0x42>
 8005adc:	2010      	movs	r0, #16
 8005ade:	f001 fa57 	bl	8006f90 <malloc>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ae6:	b920      	cbnz	r0, 8005af2 <_dtoa_r+0x3a>
 8005ae8:	4ba7      	ldr	r3, [pc, #668]	; (8005d88 <_dtoa_r+0x2d0>)
 8005aea:	21ea      	movs	r1, #234	; 0xea
 8005aec:	48a7      	ldr	r0, [pc, #668]	; (8005d8c <_dtoa_r+0x2d4>)
 8005aee:	f002 ffe7 	bl	8008ac0 <__assert_func>
 8005af2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005af6:	6005      	str	r5, [r0, #0]
 8005af8:	60c5      	str	r5, [r0, #12]
 8005afa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005afc:	6819      	ldr	r1, [r3, #0]
 8005afe:	b151      	cbz	r1, 8005b16 <_dtoa_r+0x5e>
 8005b00:	685a      	ldr	r2, [r3, #4]
 8005b02:	604a      	str	r2, [r1, #4]
 8005b04:	2301      	movs	r3, #1
 8005b06:	4093      	lsls	r3, r2
 8005b08:	608b      	str	r3, [r1, #8]
 8005b0a:	4620      	mov	r0, r4
 8005b0c:	f001 faa8 	bl	8007060 <_Bfree>
 8005b10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b12:	2200      	movs	r2, #0
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	1e3b      	subs	r3, r7, #0
 8005b18:	bfaa      	itet	ge
 8005b1a:	2300      	movge	r3, #0
 8005b1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005b20:	f8c8 3000 	strge.w	r3, [r8]
 8005b24:	4b9a      	ldr	r3, [pc, #616]	; (8005d90 <_dtoa_r+0x2d8>)
 8005b26:	bfbc      	itt	lt
 8005b28:	2201      	movlt	r2, #1
 8005b2a:	f8c8 2000 	strlt.w	r2, [r8]
 8005b2e:	ea33 030b 	bics.w	r3, r3, fp
 8005b32:	d11b      	bne.n	8005b6c <_dtoa_r+0xb4>
 8005b34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b36:	f242 730f 	movw	r3, #9999	; 0x270f
 8005b3a:	6013      	str	r3, [r2, #0]
 8005b3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005b40:	4333      	orrs	r3, r6
 8005b42:	f000 8592 	beq.w	800666a <_dtoa_r+0xbb2>
 8005b46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b48:	b963      	cbnz	r3, 8005b64 <_dtoa_r+0xac>
 8005b4a:	4b92      	ldr	r3, [pc, #584]	; (8005d94 <_dtoa_r+0x2dc>)
 8005b4c:	e022      	b.n	8005b94 <_dtoa_r+0xdc>
 8005b4e:	4b92      	ldr	r3, [pc, #584]	; (8005d98 <_dtoa_r+0x2e0>)
 8005b50:	9301      	str	r3, [sp, #4]
 8005b52:	3308      	adds	r3, #8
 8005b54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005b56:	6013      	str	r3, [r2, #0]
 8005b58:	9801      	ldr	r0, [sp, #4]
 8005b5a:	b013      	add	sp, #76	; 0x4c
 8005b5c:	ecbd 8b04 	vpop	{d8-d9}
 8005b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b64:	4b8b      	ldr	r3, [pc, #556]	; (8005d94 <_dtoa_r+0x2dc>)
 8005b66:	9301      	str	r3, [sp, #4]
 8005b68:	3303      	adds	r3, #3
 8005b6a:	e7f3      	b.n	8005b54 <_dtoa_r+0x9c>
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	2300      	movs	r3, #0
 8005b70:	4650      	mov	r0, sl
 8005b72:	4659      	mov	r1, fp
 8005b74:	f7fa ffb8 	bl	8000ae8 <__aeabi_dcmpeq>
 8005b78:	ec4b ab19 	vmov	d9, sl, fp
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	b158      	cbz	r0, 8005b98 <_dtoa_r+0xe0>
 8005b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005b82:	2301      	movs	r3, #1
 8005b84:	6013      	str	r3, [r2, #0]
 8005b86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	f000 856b 	beq.w	8006664 <_dtoa_r+0xbac>
 8005b8e:	4883      	ldr	r0, [pc, #524]	; (8005d9c <_dtoa_r+0x2e4>)
 8005b90:	6018      	str	r0, [r3, #0]
 8005b92:	1e43      	subs	r3, r0, #1
 8005b94:	9301      	str	r3, [sp, #4]
 8005b96:	e7df      	b.n	8005b58 <_dtoa_r+0xa0>
 8005b98:	ec4b ab10 	vmov	d0, sl, fp
 8005b9c:	aa10      	add	r2, sp, #64	; 0x40
 8005b9e:	a911      	add	r1, sp, #68	; 0x44
 8005ba0:	4620      	mov	r0, r4
 8005ba2:	f001 fe0b 	bl	80077bc <__d2b>
 8005ba6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005baa:	ee08 0a10 	vmov	s16, r0
 8005bae:	2d00      	cmp	r5, #0
 8005bb0:	f000 8084 	beq.w	8005cbc <_dtoa_r+0x204>
 8005bb4:	ee19 3a90 	vmov	r3, s19
 8005bb8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005bbc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005bc0:	4656      	mov	r6, sl
 8005bc2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005bc6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005bca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005bce:	4b74      	ldr	r3, [pc, #464]	; (8005da0 <_dtoa_r+0x2e8>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	4639      	mov	r1, r7
 8005bd6:	f7fa fb67 	bl	80002a8 <__aeabi_dsub>
 8005bda:	a365      	add	r3, pc, #404	; (adr r3, 8005d70 <_dtoa_r+0x2b8>)
 8005bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005be0:	f7fa fd1a 	bl	8000618 <__aeabi_dmul>
 8005be4:	a364      	add	r3, pc, #400	; (adr r3, 8005d78 <_dtoa_r+0x2c0>)
 8005be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bea:	f7fa fb5f 	bl	80002ac <__adddf3>
 8005bee:	4606      	mov	r6, r0
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	460f      	mov	r7, r1
 8005bf4:	f7fa fca6 	bl	8000544 <__aeabi_i2d>
 8005bf8:	a361      	add	r3, pc, #388	; (adr r3, 8005d80 <_dtoa_r+0x2c8>)
 8005bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bfe:	f7fa fd0b 	bl	8000618 <__aeabi_dmul>
 8005c02:	4602      	mov	r2, r0
 8005c04:	460b      	mov	r3, r1
 8005c06:	4630      	mov	r0, r6
 8005c08:	4639      	mov	r1, r7
 8005c0a:	f7fa fb4f 	bl	80002ac <__adddf3>
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460f      	mov	r7, r1
 8005c12:	f7fa ffb1 	bl	8000b78 <__aeabi_d2iz>
 8005c16:	2200      	movs	r2, #0
 8005c18:	9000      	str	r0, [sp, #0]
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	4639      	mov	r1, r7
 8005c20:	f7fa ff6c 	bl	8000afc <__aeabi_dcmplt>
 8005c24:	b150      	cbz	r0, 8005c3c <_dtoa_r+0x184>
 8005c26:	9800      	ldr	r0, [sp, #0]
 8005c28:	f7fa fc8c 	bl	8000544 <__aeabi_i2d>
 8005c2c:	4632      	mov	r2, r6
 8005c2e:	463b      	mov	r3, r7
 8005c30:	f7fa ff5a 	bl	8000ae8 <__aeabi_dcmpeq>
 8005c34:	b910      	cbnz	r0, 8005c3c <_dtoa_r+0x184>
 8005c36:	9b00      	ldr	r3, [sp, #0]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	9b00      	ldr	r3, [sp, #0]
 8005c3e:	2b16      	cmp	r3, #22
 8005c40:	d85a      	bhi.n	8005cf8 <_dtoa_r+0x240>
 8005c42:	9a00      	ldr	r2, [sp, #0]
 8005c44:	4b57      	ldr	r3, [pc, #348]	; (8005da4 <_dtoa_r+0x2ec>)
 8005c46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c4e:	ec51 0b19 	vmov	r0, r1, d9
 8005c52:	f7fa ff53 	bl	8000afc <__aeabi_dcmplt>
 8005c56:	2800      	cmp	r0, #0
 8005c58:	d050      	beq.n	8005cfc <_dtoa_r+0x244>
 8005c5a:	9b00      	ldr	r3, [sp, #0]
 8005c5c:	3b01      	subs	r3, #1
 8005c5e:	9300      	str	r3, [sp, #0]
 8005c60:	2300      	movs	r3, #0
 8005c62:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c66:	1b5d      	subs	r5, r3, r5
 8005c68:	1e6b      	subs	r3, r5, #1
 8005c6a:	9305      	str	r3, [sp, #20]
 8005c6c:	bf45      	ittet	mi
 8005c6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005c72:	9304      	strmi	r3, [sp, #16]
 8005c74:	2300      	movpl	r3, #0
 8005c76:	2300      	movmi	r3, #0
 8005c78:	bf4c      	ite	mi
 8005c7a:	9305      	strmi	r3, [sp, #20]
 8005c7c:	9304      	strpl	r3, [sp, #16]
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db3d      	blt.n	8005d00 <_dtoa_r+0x248>
 8005c84:	9b05      	ldr	r3, [sp, #20]
 8005c86:	9a00      	ldr	r2, [sp, #0]
 8005c88:	920a      	str	r2, [sp, #40]	; 0x28
 8005c8a:	4413      	add	r3, r2
 8005c8c:	9305      	str	r3, [sp, #20]
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9307      	str	r3, [sp, #28]
 8005c92:	9b06      	ldr	r3, [sp, #24]
 8005c94:	2b09      	cmp	r3, #9
 8005c96:	f200 8089 	bhi.w	8005dac <_dtoa_r+0x2f4>
 8005c9a:	2b05      	cmp	r3, #5
 8005c9c:	bfc4      	itt	gt
 8005c9e:	3b04      	subgt	r3, #4
 8005ca0:	9306      	strgt	r3, [sp, #24]
 8005ca2:	9b06      	ldr	r3, [sp, #24]
 8005ca4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ca8:	bfcc      	ite	gt
 8005caa:	2500      	movgt	r5, #0
 8005cac:	2501      	movle	r5, #1
 8005cae:	2b03      	cmp	r3, #3
 8005cb0:	f200 8087 	bhi.w	8005dc2 <_dtoa_r+0x30a>
 8005cb4:	e8df f003 	tbb	[pc, r3]
 8005cb8:	59383a2d 	.word	0x59383a2d
 8005cbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005cc0:	441d      	add	r5, r3
 8005cc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005cc6:	2b20      	cmp	r3, #32
 8005cc8:	bfc1      	itttt	gt
 8005cca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005cce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005cd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005cd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005cda:	bfda      	itte	le
 8005cdc:	f1c3 0320 	rsble	r3, r3, #32
 8005ce0:	fa06 f003 	lslle.w	r0, r6, r3
 8005ce4:	4318      	orrgt	r0, r3
 8005ce6:	f7fa fc1d 	bl	8000524 <__aeabi_ui2d>
 8005cea:	2301      	movs	r3, #1
 8005cec:	4606      	mov	r6, r0
 8005cee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005cf2:	3d01      	subs	r5, #1
 8005cf4:	930e      	str	r3, [sp, #56]	; 0x38
 8005cf6:	e76a      	b.n	8005bce <_dtoa_r+0x116>
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e7b2      	b.n	8005c62 <_dtoa_r+0x1aa>
 8005cfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8005cfe:	e7b1      	b.n	8005c64 <_dtoa_r+0x1ac>
 8005d00:	9b04      	ldr	r3, [sp, #16]
 8005d02:	9a00      	ldr	r2, [sp, #0]
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	4253      	negs	r3, r2
 8005d0a:	9307      	str	r3, [sp, #28]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005d10:	e7bf      	b.n	8005c92 <_dtoa_r+0x1da>
 8005d12:	2300      	movs	r3, #0
 8005d14:	9308      	str	r3, [sp, #32]
 8005d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	dc55      	bgt.n	8005dc8 <_dtoa_r+0x310>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d22:	461a      	mov	r2, r3
 8005d24:	9209      	str	r2, [sp, #36]	; 0x24
 8005d26:	e00c      	b.n	8005d42 <_dtoa_r+0x28a>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e7f3      	b.n	8005d14 <_dtoa_r+0x25c>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d30:	9308      	str	r3, [sp, #32]
 8005d32:	9b00      	ldr	r3, [sp, #0]
 8005d34:	4413      	add	r3, r2
 8005d36:	9302      	str	r3, [sp, #8]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	9303      	str	r3, [sp, #12]
 8005d3e:	bfb8      	it	lt
 8005d40:	2301      	movlt	r3, #1
 8005d42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005d44:	2200      	movs	r2, #0
 8005d46:	6042      	str	r2, [r0, #4]
 8005d48:	2204      	movs	r2, #4
 8005d4a:	f102 0614 	add.w	r6, r2, #20
 8005d4e:	429e      	cmp	r6, r3
 8005d50:	6841      	ldr	r1, [r0, #4]
 8005d52:	d93d      	bls.n	8005dd0 <_dtoa_r+0x318>
 8005d54:	4620      	mov	r0, r4
 8005d56:	f001 f943 	bl	8006fe0 <_Balloc>
 8005d5a:	9001      	str	r0, [sp, #4]
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d13b      	bne.n	8005dd8 <_dtoa_r+0x320>
 8005d60:	4b11      	ldr	r3, [pc, #68]	; (8005da8 <_dtoa_r+0x2f0>)
 8005d62:	4602      	mov	r2, r0
 8005d64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005d68:	e6c0      	b.n	8005aec <_dtoa_r+0x34>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e7df      	b.n	8005d2e <_dtoa_r+0x276>
 8005d6e:	bf00      	nop
 8005d70:	636f4361 	.word	0x636f4361
 8005d74:	3fd287a7 	.word	0x3fd287a7
 8005d78:	8b60c8b3 	.word	0x8b60c8b3
 8005d7c:	3fc68a28 	.word	0x3fc68a28
 8005d80:	509f79fb 	.word	0x509f79fb
 8005d84:	3fd34413 	.word	0x3fd34413
 8005d88:	08009196 	.word	0x08009196
 8005d8c:	080091ad 	.word	0x080091ad
 8005d90:	7ff00000 	.word	0x7ff00000
 8005d94:	08009192 	.word	0x08009192
 8005d98:	08009189 	.word	0x08009189
 8005d9c:	0800946a 	.word	0x0800946a
 8005da0:	3ff80000 	.word	0x3ff80000
 8005da4:	08009380 	.word	0x08009380
 8005da8:	08009208 	.word	0x08009208
 8005dac:	2501      	movs	r5, #1
 8005dae:	2300      	movs	r3, #0
 8005db0:	9306      	str	r3, [sp, #24]
 8005db2:	9508      	str	r5, [sp, #32]
 8005db4:	f04f 33ff 	mov.w	r3, #4294967295
 8005db8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	2312      	movs	r3, #18
 8005dc0:	e7b0      	b.n	8005d24 <_dtoa_r+0x26c>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	9308      	str	r3, [sp, #32]
 8005dc6:	e7f5      	b.n	8005db4 <_dtoa_r+0x2fc>
 8005dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005dce:	e7b8      	b.n	8005d42 <_dtoa_r+0x28a>
 8005dd0:	3101      	adds	r1, #1
 8005dd2:	6041      	str	r1, [r0, #4]
 8005dd4:	0052      	lsls	r2, r2, #1
 8005dd6:	e7b8      	b.n	8005d4a <_dtoa_r+0x292>
 8005dd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005dda:	9a01      	ldr	r2, [sp, #4]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	9b03      	ldr	r3, [sp, #12]
 8005de0:	2b0e      	cmp	r3, #14
 8005de2:	f200 809d 	bhi.w	8005f20 <_dtoa_r+0x468>
 8005de6:	2d00      	cmp	r5, #0
 8005de8:	f000 809a 	beq.w	8005f20 <_dtoa_r+0x468>
 8005dec:	9b00      	ldr	r3, [sp, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	dd32      	ble.n	8005e58 <_dtoa_r+0x3a0>
 8005df2:	4ab7      	ldr	r2, [pc, #732]	; (80060d0 <_dtoa_r+0x618>)
 8005df4:	f003 030f 	and.w	r3, r3, #15
 8005df8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005dfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e00:	9b00      	ldr	r3, [sp, #0]
 8005e02:	05d8      	lsls	r0, r3, #23
 8005e04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e08:	d516      	bpl.n	8005e38 <_dtoa_r+0x380>
 8005e0a:	4bb2      	ldr	r3, [pc, #712]	; (80060d4 <_dtoa_r+0x61c>)
 8005e0c:	ec51 0b19 	vmov	r0, r1, d9
 8005e10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e14:	f7fa fd2a 	bl	800086c <__aeabi_ddiv>
 8005e18:	f007 070f 	and.w	r7, r7, #15
 8005e1c:	4682      	mov	sl, r0
 8005e1e:	468b      	mov	fp, r1
 8005e20:	2503      	movs	r5, #3
 8005e22:	4eac      	ldr	r6, [pc, #688]	; (80060d4 <_dtoa_r+0x61c>)
 8005e24:	b957      	cbnz	r7, 8005e3c <_dtoa_r+0x384>
 8005e26:	4642      	mov	r2, r8
 8005e28:	464b      	mov	r3, r9
 8005e2a:	4650      	mov	r0, sl
 8005e2c:	4659      	mov	r1, fp
 8005e2e:	f7fa fd1d 	bl	800086c <__aeabi_ddiv>
 8005e32:	4682      	mov	sl, r0
 8005e34:	468b      	mov	fp, r1
 8005e36:	e028      	b.n	8005e8a <_dtoa_r+0x3d2>
 8005e38:	2502      	movs	r5, #2
 8005e3a:	e7f2      	b.n	8005e22 <_dtoa_r+0x36a>
 8005e3c:	07f9      	lsls	r1, r7, #31
 8005e3e:	d508      	bpl.n	8005e52 <_dtoa_r+0x39a>
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005e48:	f7fa fbe6 	bl	8000618 <__aeabi_dmul>
 8005e4c:	3501      	adds	r5, #1
 8005e4e:	4680      	mov	r8, r0
 8005e50:	4689      	mov	r9, r1
 8005e52:	107f      	asrs	r7, r7, #1
 8005e54:	3608      	adds	r6, #8
 8005e56:	e7e5      	b.n	8005e24 <_dtoa_r+0x36c>
 8005e58:	f000 809b 	beq.w	8005f92 <_dtoa_r+0x4da>
 8005e5c:	9b00      	ldr	r3, [sp, #0]
 8005e5e:	4f9d      	ldr	r7, [pc, #628]	; (80060d4 <_dtoa_r+0x61c>)
 8005e60:	425e      	negs	r6, r3
 8005e62:	4b9b      	ldr	r3, [pc, #620]	; (80060d0 <_dtoa_r+0x618>)
 8005e64:	f006 020f 	and.w	r2, r6, #15
 8005e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e70:	ec51 0b19 	vmov	r0, r1, d9
 8005e74:	f7fa fbd0 	bl	8000618 <__aeabi_dmul>
 8005e78:	1136      	asrs	r6, r6, #4
 8005e7a:	4682      	mov	sl, r0
 8005e7c:	468b      	mov	fp, r1
 8005e7e:	2300      	movs	r3, #0
 8005e80:	2502      	movs	r5, #2
 8005e82:	2e00      	cmp	r6, #0
 8005e84:	d17a      	bne.n	8005f7c <_dtoa_r+0x4c4>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d1d3      	bne.n	8005e32 <_dtoa_r+0x37a>
 8005e8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 8082 	beq.w	8005f96 <_dtoa_r+0x4de>
 8005e92:	4b91      	ldr	r3, [pc, #580]	; (80060d8 <_dtoa_r+0x620>)
 8005e94:	2200      	movs	r2, #0
 8005e96:	4650      	mov	r0, sl
 8005e98:	4659      	mov	r1, fp
 8005e9a:	f7fa fe2f 	bl	8000afc <__aeabi_dcmplt>
 8005e9e:	2800      	cmp	r0, #0
 8005ea0:	d079      	beq.n	8005f96 <_dtoa_r+0x4de>
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d076      	beq.n	8005f96 <_dtoa_r+0x4de>
 8005ea8:	9b02      	ldr	r3, [sp, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	dd36      	ble.n	8005f1c <_dtoa_r+0x464>
 8005eae:	9b00      	ldr	r3, [sp, #0]
 8005eb0:	4650      	mov	r0, sl
 8005eb2:	4659      	mov	r1, fp
 8005eb4:	1e5f      	subs	r7, r3, #1
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	4b88      	ldr	r3, [pc, #544]	; (80060dc <_dtoa_r+0x624>)
 8005eba:	f7fa fbad 	bl	8000618 <__aeabi_dmul>
 8005ebe:	9e02      	ldr	r6, [sp, #8]
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	468b      	mov	fp, r1
 8005ec4:	3501      	adds	r5, #1
 8005ec6:	4628      	mov	r0, r5
 8005ec8:	f7fa fb3c 	bl	8000544 <__aeabi_i2d>
 8005ecc:	4652      	mov	r2, sl
 8005ece:	465b      	mov	r3, fp
 8005ed0:	f7fa fba2 	bl	8000618 <__aeabi_dmul>
 8005ed4:	4b82      	ldr	r3, [pc, #520]	; (80060e0 <_dtoa_r+0x628>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f7fa f9e8 	bl	80002ac <__adddf3>
 8005edc:	46d0      	mov	r8, sl
 8005ede:	46d9      	mov	r9, fp
 8005ee0:	4682      	mov	sl, r0
 8005ee2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005ee6:	2e00      	cmp	r6, #0
 8005ee8:	d158      	bne.n	8005f9c <_dtoa_r+0x4e4>
 8005eea:	4b7e      	ldr	r3, [pc, #504]	; (80060e4 <_dtoa_r+0x62c>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	4640      	mov	r0, r8
 8005ef0:	4649      	mov	r1, r9
 8005ef2:	f7fa f9d9 	bl	80002a8 <__aeabi_dsub>
 8005ef6:	4652      	mov	r2, sl
 8005ef8:	465b      	mov	r3, fp
 8005efa:	4680      	mov	r8, r0
 8005efc:	4689      	mov	r9, r1
 8005efe:	f7fa fe1b 	bl	8000b38 <__aeabi_dcmpgt>
 8005f02:	2800      	cmp	r0, #0
 8005f04:	f040 8295 	bne.w	8006432 <_dtoa_r+0x97a>
 8005f08:	4652      	mov	r2, sl
 8005f0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4649      	mov	r1, r9
 8005f12:	f7fa fdf3 	bl	8000afc <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f040 8289 	bne.w	800642e <_dtoa_r+0x976>
 8005f1c:	ec5b ab19 	vmov	sl, fp, d9
 8005f20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	f2c0 8148 	blt.w	80061b8 <_dtoa_r+0x700>
 8005f28:	9a00      	ldr	r2, [sp, #0]
 8005f2a:	2a0e      	cmp	r2, #14
 8005f2c:	f300 8144 	bgt.w	80061b8 <_dtoa_r+0x700>
 8005f30:	4b67      	ldr	r3, [pc, #412]	; (80060d0 <_dtoa_r+0x618>)
 8005f32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f280 80d5 	bge.w	80060ec <_dtoa_r+0x634>
 8005f42:	9b03      	ldr	r3, [sp, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	f300 80d1 	bgt.w	80060ec <_dtoa_r+0x634>
 8005f4a:	f040 826f 	bne.w	800642c <_dtoa_r+0x974>
 8005f4e:	4b65      	ldr	r3, [pc, #404]	; (80060e4 <_dtoa_r+0x62c>)
 8005f50:	2200      	movs	r2, #0
 8005f52:	4640      	mov	r0, r8
 8005f54:	4649      	mov	r1, r9
 8005f56:	f7fa fb5f 	bl	8000618 <__aeabi_dmul>
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	f7fa fde1 	bl	8000b24 <__aeabi_dcmpge>
 8005f62:	9e03      	ldr	r6, [sp, #12]
 8005f64:	4637      	mov	r7, r6
 8005f66:	2800      	cmp	r0, #0
 8005f68:	f040 8245 	bne.w	80063f6 <_dtoa_r+0x93e>
 8005f6c:	9d01      	ldr	r5, [sp, #4]
 8005f6e:	2331      	movs	r3, #49	; 0x31
 8005f70:	f805 3b01 	strb.w	r3, [r5], #1
 8005f74:	9b00      	ldr	r3, [sp, #0]
 8005f76:	3301      	adds	r3, #1
 8005f78:	9300      	str	r3, [sp, #0]
 8005f7a:	e240      	b.n	80063fe <_dtoa_r+0x946>
 8005f7c:	07f2      	lsls	r2, r6, #31
 8005f7e:	d505      	bpl.n	8005f8c <_dtoa_r+0x4d4>
 8005f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f84:	f7fa fb48 	bl	8000618 <__aeabi_dmul>
 8005f88:	3501      	adds	r5, #1
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	1076      	asrs	r6, r6, #1
 8005f8e:	3708      	adds	r7, #8
 8005f90:	e777      	b.n	8005e82 <_dtoa_r+0x3ca>
 8005f92:	2502      	movs	r5, #2
 8005f94:	e779      	b.n	8005e8a <_dtoa_r+0x3d2>
 8005f96:	9f00      	ldr	r7, [sp, #0]
 8005f98:	9e03      	ldr	r6, [sp, #12]
 8005f9a:	e794      	b.n	8005ec6 <_dtoa_r+0x40e>
 8005f9c:	9901      	ldr	r1, [sp, #4]
 8005f9e:	4b4c      	ldr	r3, [pc, #304]	; (80060d0 <_dtoa_r+0x618>)
 8005fa0:	4431      	add	r1, r6
 8005fa2:	910d      	str	r1, [sp, #52]	; 0x34
 8005fa4:	9908      	ldr	r1, [sp, #32]
 8005fa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005faa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005fae:	2900      	cmp	r1, #0
 8005fb0:	d043      	beq.n	800603a <_dtoa_r+0x582>
 8005fb2:	494d      	ldr	r1, [pc, #308]	; (80060e8 <_dtoa_r+0x630>)
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	f7fa fc59 	bl	800086c <__aeabi_ddiv>
 8005fba:	4652      	mov	r2, sl
 8005fbc:	465b      	mov	r3, fp
 8005fbe:	f7fa f973 	bl	80002a8 <__aeabi_dsub>
 8005fc2:	9d01      	ldr	r5, [sp, #4]
 8005fc4:	4682      	mov	sl, r0
 8005fc6:	468b      	mov	fp, r1
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4640      	mov	r0, r8
 8005fcc:	f7fa fdd4 	bl	8000b78 <__aeabi_d2iz>
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	f7fa fab7 	bl	8000544 <__aeabi_i2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4640      	mov	r0, r8
 8005fdc:	4649      	mov	r1, r9
 8005fde:	f7fa f963 	bl	80002a8 <__aeabi_dsub>
 8005fe2:	3630      	adds	r6, #48	; 0x30
 8005fe4:	f805 6b01 	strb.w	r6, [r5], #1
 8005fe8:	4652      	mov	r2, sl
 8005fea:	465b      	mov	r3, fp
 8005fec:	4680      	mov	r8, r0
 8005fee:	4689      	mov	r9, r1
 8005ff0:	f7fa fd84 	bl	8000afc <__aeabi_dcmplt>
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d163      	bne.n	80060c0 <_dtoa_r+0x608>
 8005ff8:	4642      	mov	r2, r8
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4936      	ldr	r1, [pc, #216]	; (80060d8 <_dtoa_r+0x620>)
 8005ffe:	2000      	movs	r0, #0
 8006000:	f7fa f952 	bl	80002a8 <__aeabi_dsub>
 8006004:	4652      	mov	r2, sl
 8006006:	465b      	mov	r3, fp
 8006008:	f7fa fd78 	bl	8000afc <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	f040 80b5 	bne.w	800617c <_dtoa_r+0x6c4>
 8006012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006014:	429d      	cmp	r5, r3
 8006016:	d081      	beq.n	8005f1c <_dtoa_r+0x464>
 8006018:	4b30      	ldr	r3, [pc, #192]	; (80060dc <_dtoa_r+0x624>)
 800601a:	2200      	movs	r2, #0
 800601c:	4650      	mov	r0, sl
 800601e:	4659      	mov	r1, fp
 8006020:	f7fa fafa 	bl	8000618 <__aeabi_dmul>
 8006024:	4b2d      	ldr	r3, [pc, #180]	; (80060dc <_dtoa_r+0x624>)
 8006026:	4682      	mov	sl, r0
 8006028:	468b      	mov	fp, r1
 800602a:	4640      	mov	r0, r8
 800602c:	4649      	mov	r1, r9
 800602e:	2200      	movs	r2, #0
 8006030:	f7fa faf2 	bl	8000618 <__aeabi_dmul>
 8006034:	4680      	mov	r8, r0
 8006036:	4689      	mov	r9, r1
 8006038:	e7c6      	b.n	8005fc8 <_dtoa_r+0x510>
 800603a:	4650      	mov	r0, sl
 800603c:	4659      	mov	r1, fp
 800603e:	f7fa faeb 	bl	8000618 <__aeabi_dmul>
 8006042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006044:	9d01      	ldr	r5, [sp, #4]
 8006046:	930f      	str	r3, [sp, #60]	; 0x3c
 8006048:	4682      	mov	sl, r0
 800604a:	468b      	mov	fp, r1
 800604c:	4649      	mov	r1, r9
 800604e:	4640      	mov	r0, r8
 8006050:	f7fa fd92 	bl	8000b78 <__aeabi_d2iz>
 8006054:	4606      	mov	r6, r0
 8006056:	f7fa fa75 	bl	8000544 <__aeabi_i2d>
 800605a:	3630      	adds	r6, #48	; 0x30
 800605c:	4602      	mov	r2, r0
 800605e:	460b      	mov	r3, r1
 8006060:	4640      	mov	r0, r8
 8006062:	4649      	mov	r1, r9
 8006064:	f7fa f920 	bl	80002a8 <__aeabi_dsub>
 8006068:	f805 6b01 	strb.w	r6, [r5], #1
 800606c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800606e:	429d      	cmp	r5, r3
 8006070:	4680      	mov	r8, r0
 8006072:	4689      	mov	r9, r1
 8006074:	f04f 0200 	mov.w	r2, #0
 8006078:	d124      	bne.n	80060c4 <_dtoa_r+0x60c>
 800607a:	4b1b      	ldr	r3, [pc, #108]	; (80060e8 <_dtoa_r+0x630>)
 800607c:	4650      	mov	r0, sl
 800607e:	4659      	mov	r1, fp
 8006080:	f7fa f914 	bl	80002ac <__adddf3>
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	4640      	mov	r0, r8
 800608a:	4649      	mov	r1, r9
 800608c:	f7fa fd54 	bl	8000b38 <__aeabi_dcmpgt>
 8006090:	2800      	cmp	r0, #0
 8006092:	d173      	bne.n	800617c <_dtoa_r+0x6c4>
 8006094:	4652      	mov	r2, sl
 8006096:	465b      	mov	r3, fp
 8006098:	4913      	ldr	r1, [pc, #76]	; (80060e8 <_dtoa_r+0x630>)
 800609a:	2000      	movs	r0, #0
 800609c:	f7fa f904 	bl	80002a8 <__aeabi_dsub>
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	4640      	mov	r0, r8
 80060a6:	4649      	mov	r1, r9
 80060a8:	f7fa fd28 	bl	8000afc <__aeabi_dcmplt>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	f43f af35 	beq.w	8005f1c <_dtoa_r+0x464>
 80060b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80060b4:	1e6b      	subs	r3, r5, #1
 80060b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060bc:	2b30      	cmp	r3, #48	; 0x30
 80060be:	d0f8      	beq.n	80060b2 <_dtoa_r+0x5fa>
 80060c0:	9700      	str	r7, [sp, #0]
 80060c2:	e049      	b.n	8006158 <_dtoa_r+0x6a0>
 80060c4:	4b05      	ldr	r3, [pc, #20]	; (80060dc <_dtoa_r+0x624>)
 80060c6:	f7fa faa7 	bl	8000618 <__aeabi_dmul>
 80060ca:	4680      	mov	r8, r0
 80060cc:	4689      	mov	r9, r1
 80060ce:	e7bd      	b.n	800604c <_dtoa_r+0x594>
 80060d0:	08009380 	.word	0x08009380
 80060d4:	08009358 	.word	0x08009358
 80060d8:	3ff00000 	.word	0x3ff00000
 80060dc:	40240000 	.word	0x40240000
 80060e0:	401c0000 	.word	0x401c0000
 80060e4:	40140000 	.word	0x40140000
 80060e8:	3fe00000 	.word	0x3fe00000
 80060ec:	9d01      	ldr	r5, [sp, #4]
 80060ee:	4656      	mov	r6, sl
 80060f0:	465f      	mov	r7, fp
 80060f2:	4642      	mov	r2, r8
 80060f4:	464b      	mov	r3, r9
 80060f6:	4630      	mov	r0, r6
 80060f8:	4639      	mov	r1, r7
 80060fa:	f7fa fbb7 	bl	800086c <__aeabi_ddiv>
 80060fe:	f7fa fd3b 	bl	8000b78 <__aeabi_d2iz>
 8006102:	4682      	mov	sl, r0
 8006104:	f7fa fa1e 	bl	8000544 <__aeabi_i2d>
 8006108:	4642      	mov	r2, r8
 800610a:	464b      	mov	r3, r9
 800610c:	f7fa fa84 	bl	8000618 <__aeabi_dmul>
 8006110:	4602      	mov	r2, r0
 8006112:	460b      	mov	r3, r1
 8006114:	4630      	mov	r0, r6
 8006116:	4639      	mov	r1, r7
 8006118:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800611c:	f7fa f8c4 	bl	80002a8 <__aeabi_dsub>
 8006120:	f805 6b01 	strb.w	r6, [r5], #1
 8006124:	9e01      	ldr	r6, [sp, #4]
 8006126:	9f03      	ldr	r7, [sp, #12]
 8006128:	1bae      	subs	r6, r5, r6
 800612a:	42b7      	cmp	r7, r6
 800612c:	4602      	mov	r2, r0
 800612e:	460b      	mov	r3, r1
 8006130:	d135      	bne.n	800619e <_dtoa_r+0x6e6>
 8006132:	f7fa f8bb 	bl	80002ac <__adddf3>
 8006136:	4642      	mov	r2, r8
 8006138:	464b      	mov	r3, r9
 800613a:	4606      	mov	r6, r0
 800613c:	460f      	mov	r7, r1
 800613e:	f7fa fcfb 	bl	8000b38 <__aeabi_dcmpgt>
 8006142:	b9d0      	cbnz	r0, 800617a <_dtoa_r+0x6c2>
 8006144:	4642      	mov	r2, r8
 8006146:	464b      	mov	r3, r9
 8006148:	4630      	mov	r0, r6
 800614a:	4639      	mov	r1, r7
 800614c:	f7fa fccc 	bl	8000ae8 <__aeabi_dcmpeq>
 8006150:	b110      	cbz	r0, 8006158 <_dtoa_r+0x6a0>
 8006152:	f01a 0f01 	tst.w	sl, #1
 8006156:	d110      	bne.n	800617a <_dtoa_r+0x6c2>
 8006158:	4620      	mov	r0, r4
 800615a:	ee18 1a10 	vmov	r1, s16
 800615e:	f000 ff7f 	bl	8007060 <_Bfree>
 8006162:	2300      	movs	r3, #0
 8006164:	9800      	ldr	r0, [sp, #0]
 8006166:	702b      	strb	r3, [r5, #0]
 8006168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800616a:	3001      	adds	r0, #1
 800616c:	6018      	str	r0, [r3, #0]
 800616e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006170:	2b00      	cmp	r3, #0
 8006172:	f43f acf1 	beq.w	8005b58 <_dtoa_r+0xa0>
 8006176:	601d      	str	r5, [r3, #0]
 8006178:	e4ee      	b.n	8005b58 <_dtoa_r+0xa0>
 800617a:	9f00      	ldr	r7, [sp, #0]
 800617c:	462b      	mov	r3, r5
 800617e:	461d      	mov	r5, r3
 8006180:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006184:	2a39      	cmp	r2, #57	; 0x39
 8006186:	d106      	bne.n	8006196 <_dtoa_r+0x6de>
 8006188:	9a01      	ldr	r2, [sp, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d1f7      	bne.n	800617e <_dtoa_r+0x6c6>
 800618e:	9901      	ldr	r1, [sp, #4]
 8006190:	2230      	movs	r2, #48	; 0x30
 8006192:	3701      	adds	r7, #1
 8006194:	700a      	strb	r2, [r1, #0]
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	3201      	adds	r2, #1
 800619a:	701a      	strb	r2, [r3, #0]
 800619c:	e790      	b.n	80060c0 <_dtoa_r+0x608>
 800619e:	4ba6      	ldr	r3, [pc, #664]	; (8006438 <_dtoa_r+0x980>)
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fa fa39 	bl	8000618 <__aeabi_dmul>
 80061a6:	2200      	movs	r2, #0
 80061a8:	2300      	movs	r3, #0
 80061aa:	4606      	mov	r6, r0
 80061ac:	460f      	mov	r7, r1
 80061ae:	f7fa fc9b 	bl	8000ae8 <__aeabi_dcmpeq>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	d09d      	beq.n	80060f2 <_dtoa_r+0x63a>
 80061b6:	e7cf      	b.n	8006158 <_dtoa_r+0x6a0>
 80061b8:	9a08      	ldr	r2, [sp, #32]
 80061ba:	2a00      	cmp	r2, #0
 80061bc:	f000 80d7 	beq.w	800636e <_dtoa_r+0x8b6>
 80061c0:	9a06      	ldr	r2, [sp, #24]
 80061c2:	2a01      	cmp	r2, #1
 80061c4:	f300 80ba 	bgt.w	800633c <_dtoa_r+0x884>
 80061c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061ca:	2a00      	cmp	r2, #0
 80061cc:	f000 80b2 	beq.w	8006334 <_dtoa_r+0x87c>
 80061d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80061d4:	9e07      	ldr	r6, [sp, #28]
 80061d6:	9d04      	ldr	r5, [sp, #16]
 80061d8:	9a04      	ldr	r2, [sp, #16]
 80061da:	441a      	add	r2, r3
 80061dc:	9204      	str	r2, [sp, #16]
 80061de:	9a05      	ldr	r2, [sp, #20]
 80061e0:	2101      	movs	r1, #1
 80061e2:	441a      	add	r2, r3
 80061e4:	4620      	mov	r0, r4
 80061e6:	9205      	str	r2, [sp, #20]
 80061e8:	f001 f83c 	bl	8007264 <__i2b>
 80061ec:	4607      	mov	r7, r0
 80061ee:	2d00      	cmp	r5, #0
 80061f0:	dd0c      	ble.n	800620c <_dtoa_r+0x754>
 80061f2:	9b05      	ldr	r3, [sp, #20]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	dd09      	ble.n	800620c <_dtoa_r+0x754>
 80061f8:	42ab      	cmp	r3, r5
 80061fa:	9a04      	ldr	r2, [sp, #16]
 80061fc:	bfa8      	it	ge
 80061fe:	462b      	movge	r3, r5
 8006200:	1ad2      	subs	r2, r2, r3
 8006202:	9204      	str	r2, [sp, #16]
 8006204:	9a05      	ldr	r2, [sp, #20]
 8006206:	1aed      	subs	r5, r5, r3
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	9b07      	ldr	r3, [sp, #28]
 800620e:	b31b      	cbz	r3, 8006258 <_dtoa_r+0x7a0>
 8006210:	9b08      	ldr	r3, [sp, #32]
 8006212:	2b00      	cmp	r3, #0
 8006214:	f000 80af 	beq.w	8006376 <_dtoa_r+0x8be>
 8006218:	2e00      	cmp	r6, #0
 800621a:	dd13      	ble.n	8006244 <_dtoa_r+0x78c>
 800621c:	4639      	mov	r1, r7
 800621e:	4632      	mov	r2, r6
 8006220:	4620      	mov	r0, r4
 8006222:	f001 f8df 	bl	80073e4 <__pow5mult>
 8006226:	ee18 2a10 	vmov	r2, s16
 800622a:	4601      	mov	r1, r0
 800622c:	4607      	mov	r7, r0
 800622e:	4620      	mov	r0, r4
 8006230:	f001 f82e 	bl	8007290 <__multiply>
 8006234:	ee18 1a10 	vmov	r1, s16
 8006238:	4680      	mov	r8, r0
 800623a:	4620      	mov	r0, r4
 800623c:	f000 ff10 	bl	8007060 <_Bfree>
 8006240:	ee08 8a10 	vmov	s16, r8
 8006244:	9b07      	ldr	r3, [sp, #28]
 8006246:	1b9a      	subs	r2, r3, r6
 8006248:	d006      	beq.n	8006258 <_dtoa_r+0x7a0>
 800624a:	ee18 1a10 	vmov	r1, s16
 800624e:	4620      	mov	r0, r4
 8006250:	f001 f8c8 	bl	80073e4 <__pow5mult>
 8006254:	ee08 0a10 	vmov	s16, r0
 8006258:	2101      	movs	r1, #1
 800625a:	4620      	mov	r0, r4
 800625c:	f001 f802 	bl	8007264 <__i2b>
 8006260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	4606      	mov	r6, r0
 8006266:	f340 8088 	ble.w	800637a <_dtoa_r+0x8c2>
 800626a:	461a      	mov	r2, r3
 800626c:	4601      	mov	r1, r0
 800626e:	4620      	mov	r0, r4
 8006270:	f001 f8b8 	bl	80073e4 <__pow5mult>
 8006274:	9b06      	ldr	r3, [sp, #24]
 8006276:	2b01      	cmp	r3, #1
 8006278:	4606      	mov	r6, r0
 800627a:	f340 8081 	ble.w	8006380 <_dtoa_r+0x8c8>
 800627e:	f04f 0800 	mov.w	r8, #0
 8006282:	6933      	ldr	r3, [r6, #16]
 8006284:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006288:	6918      	ldr	r0, [r3, #16]
 800628a:	f000 ff9b 	bl	80071c4 <__hi0bits>
 800628e:	f1c0 0020 	rsb	r0, r0, #32
 8006292:	9b05      	ldr	r3, [sp, #20]
 8006294:	4418      	add	r0, r3
 8006296:	f010 001f 	ands.w	r0, r0, #31
 800629a:	f000 8092 	beq.w	80063c2 <_dtoa_r+0x90a>
 800629e:	f1c0 0320 	rsb	r3, r0, #32
 80062a2:	2b04      	cmp	r3, #4
 80062a4:	f340 808a 	ble.w	80063bc <_dtoa_r+0x904>
 80062a8:	f1c0 001c 	rsb	r0, r0, #28
 80062ac:	9b04      	ldr	r3, [sp, #16]
 80062ae:	4403      	add	r3, r0
 80062b0:	9304      	str	r3, [sp, #16]
 80062b2:	9b05      	ldr	r3, [sp, #20]
 80062b4:	4403      	add	r3, r0
 80062b6:	4405      	add	r5, r0
 80062b8:	9305      	str	r3, [sp, #20]
 80062ba:	9b04      	ldr	r3, [sp, #16]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	dd07      	ble.n	80062d0 <_dtoa_r+0x818>
 80062c0:	ee18 1a10 	vmov	r1, s16
 80062c4:	461a      	mov	r2, r3
 80062c6:	4620      	mov	r0, r4
 80062c8:	f001 f8e6 	bl	8007498 <__lshift>
 80062cc:	ee08 0a10 	vmov	s16, r0
 80062d0:	9b05      	ldr	r3, [sp, #20]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	dd05      	ble.n	80062e2 <_dtoa_r+0x82a>
 80062d6:	4631      	mov	r1, r6
 80062d8:	461a      	mov	r2, r3
 80062da:	4620      	mov	r0, r4
 80062dc:	f001 f8dc 	bl	8007498 <__lshift>
 80062e0:	4606      	mov	r6, r0
 80062e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d06e      	beq.n	80063c6 <_dtoa_r+0x90e>
 80062e8:	ee18 0a10 	vmov	r0, s16
 80062ec:	4631      	mov	r1, r6
 80062ee:	f001 f943 	bl	8007578 <__mcmp>
 80062f2:	2800      	cmp	r0, #0
 80062f4:	da67      	bge.n	80063c6 <_dtoa_r+0x90e>
 80062f6:	9b00      	ldr	r3, [sp, #0]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	ee18 1a10 	vmov	r1, s16
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	220a      	movs	r2, #10
 8006302:	2300      	movs	r3, #0
 8006304:	4620      	mov	r0, r4
 8006306:	f000 fecd 	bl	80070a4 <__multadd>
 800630a:	9b08      	ldr	r3, [sp, #32]
 800630c:	ee08 0a10 	vmov	s16, r0
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 81b1 	beq.w	8006678 <_dtoa_r+0xbc0>
 8006316:	2300      	movs	r3, #0
 8006318:	4639      	mov	r1, r7
 800631a:	220a      	movs	r2, #10
 800631c:	4620      	mov	r0, r4
 800631e:	f000 fec1 	bl	80070a4 <__multadd>
 8006322:	9b02      	ldr	r3, [sp, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	4607      	mov	r7, r0
 8006328:	f300 808e 	bgt.w	8006448 <_dtoa_r+0x990>
 800632c:	9b06      	ldr	r3, [sp, #24]
 800632e:	2b02      	cmp	r3, #2
 8006330:	dc51      	bgt.n	80063d6 <_dtoa_r+0x91e>
 8006332:	e089      	b.n	8006448 <_dtoa_r+0x990>
 8006334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800633a:	e74b      	b.n	80061d4 <_dtoa_r+0x71c>
 800633c:	9b03      	ldr	r3, [sp, #12]
 800633e:	1e5e      	subs	r6, r3, #1
 8006340:	9b07      	ldr	r3, [sp, #28]
 8006342:	42b3      	cmp	r3, r6
 8006344:	bfbf      	itttt	lt
 8006346:	9b07      	ldrlt	r3, [sp, #28]
 8006348:	9607      	strlt	r6, [sp, #28]
 800634a:	1af2      	sublt	r2, r6, r3
 800634c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800634e:	bfb6      	itet	lt
 8006350:	189b      	addlt	r3, r3, r2
 8006352:	1b9e      	subge	r6, r3, r6
 8006354:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006356:	9b03      	ldr	r3, [sp, #12]
 8006358:	bfb8      	it	lt
 800635a:	2600      	movlt	r6, #0
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb7      	itett	lt
 8006360:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006364:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006368:	1a9d      	sublt	r5, r3, r2
 800636a:	2300      	movlt	r3, #0
 800636c:	e734      	b.n	80061d8 <_dtoa_r+0x720>
 800636e:	9e07      	ldr	r6, [sp, #28]
 8006370:	9d04      	ldr	r5, [sp, #16]
 8006372:	9f08      	ldr	r7, [sp, #32]
 8006374:	e73b      	b.n	80061ee <_dtoa_r+0x736>
 8006376:	9a07      	ldr	r2, [sp, #28]
 8006378:	e767      	b.n	800624a <_dtoa_r+0x792>
 800637a:	9b06      	ldr	r3, [sp, #24]
 800637c:	2b01      	cmp	r3, #1
 800637e:	dc18      	bgt.n	80063b2 <_dtoa_r+0x8fa>
 8006380:	f1ba 0f00 	cmp.w	sl, #0
 8006384:	d115      	bne.n	80063b2 <_dtoa_r+0x8fa>
 8006386:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800638a:	b993      	cbnz	r3, 80063b2 <_dtoa_r+0x8fa>
 800638c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006390:	0d1b      	lsrs	r3, r3, #20
 8006392:	051b      	lsls	r3, r3, #20
 8006394:	b183      	cbz	r3, 80063b8 <_dtoa_r+0x900>
 8006396:	9b04      	ldr	r3, [sp, #16]
 8006398:	3301      	adds	r3, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	9b05      	ldr	r3, [sp, #20]
 800639e:	3301      	adds	r3, #1
 80063a0:	9305      	str	r3, [sp, #20]
 80063a2:	f04f 0801 	mov.w	r8, #1
 80063a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f47f af6a 	bne.w	8006282 <_dtoa_r+0x7ca>
 80063ae:	2001      	movs	r0, #1
 80063b0:	e76f      	b.n	8006292 <_dtoa_r+0x7da>
 80063b2:	f04f 0800 	mov.w	r8, #0
 80063b6:	e7f6      	b.n	80063a6 <_dtoa_r+0x8ee>
 80063b8:	4698      	mov	r8, r3
 80063ba:	e7f4      	b.n	80063a6 <_dtoa_r+0x8ee>
 80063bc:	f43f af7d 	beq.w	80062ba <_dtoa_r+0x802>
 80063c0:	4618      	mov	r0, r3
 80063c2:	301c      	adds	r0, #28
 80063c4:	e772      	b.n	80062ac <_dtoa_r+0x7f4>
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	dc37      	bgt.n	800643c <_dtoa_r+0x984>
 80063cc:	9b06      	ldr	r3, [sp, #24]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	dd34      	ble.n	800643c <_dtoa_r+0x984>
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	9302      	str	r3, [sp, #8]
 80063d6:	9b02      	ldr	r3, [sp, #8]
 80063d8:	b96b      	cbnz	r3, 80063f6 <_dtoa_r+0x93e>
 80063da:	4631      	mov	r1, r6
 80063dc:	2205      	movs	r2, #5
 80063de:	4620      	mov	r0, r4
 80063e0:	f000 fe60 	bl	80070a4 <__multadd>
 80063e4:	4601      	mov	r1, r0
 80063e6:	4606      	mov	r6, r0
 80063e8:	ee18 0a10 	vmov	r0, s16
 80063ec:	f001 f8c4 	bl	8007578 <__mcmp>
 80063f0:	2800      	cmp	r0, #0
 80063f2:	f73f adbb 	bgt.w	8005f6c <_dtoa_r+0x4b4>
 80063f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063f8:	9d01      	ldr	r5, [sp, #4]
 80063fa:	43db      	mvns	r3, r3
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	f04f 0800 	mov.w	r8, #0
 8006402:	4631      	mov	r1, r6
 8006404:	4620      	mov	r0, r4
 8006406:	f000 fe2b 	bl	8007060 <_Bfree>
 800640a:	2f00      	cmp	r7, #0
 800640c:	f43f aea4 	beq.w	8006158 <_dtoa_r+0x6a0>
 8006410:	f1b8 0f00 	cmp.w	r8, #0
 8006414:	d005      	beq.n	8006422 <_dtoa_r+0x96a>
 8006416:	45b8      	cmp	r8, r7
 8006418:	d003      	beq.n	8006422 <_dtoa_r+0x96a>
 800641a:	4641      	mov	r1, r8
 800641c:	4620      	mov	r0, r4
 800641e:	f000 fe1f 	bl	8007060 <_Bfree>
 8006422:	4639      	mov	r1, r7
 8006424:	4620      	mov	r0, r4
 8006426:	f000 fe1b 	bl	8007060 <_Bfree>
 800642a:	e695      	b.n	8006158 <_dtoa_r+0x6a0>
 800642c:	2600      	movs	r6, #0
 800642e:	4637      	mov	r7, r6
 8006430:	e7e1      	b.n	80063f6 <_dtoa_r+0x93e>
 8006432:	9700      	str	r7, [sp, #0]
 8006434:	4637      	mov	r7, r6
 8006436:	e599      	b.n	8005f6c <_dtoa_r+0x4b4>
 8006438:	40240000 	.word	0x40240000
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f000 80ca 	beq.w	80065d8 <_dtoa_r+0xb20>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	9302      	str	r3, [sp, #8]
 8006448:	2d00      	cmp	r5, #0
 800644a:	dd05      	ble.n	8006458 <_dtoa_r+0x9a0>
 800644c:	4639      	mov	r1, r7
 800644e:	462a      	mov	r2, r5
 8006450:	4620      	mov	r0, r4
 8006452:	f001 f821 	bl	8007498 <__lshift>
 8006456:	4607      	mov	r7, r0
 8006458:	f1b8 0f00 	cmp.w	r8, #0
 800645c:	d05b      	beq.n	8006516 <_dtoa_r+0xa5e>
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4620      	mov	r0, r4
 8006462:	f000 fdbd 	bl	8006fe0 <_Balloc>
 8006466:	4605      	mov	r5, r0
 8006468:	b928      	cbnz	r0, 8006476 <_dtoa_r+0x9be>
 800646a:	4b87      	ldr	r3, [pc, #540]	; (8006688 <_dtoa_r+0xbd0>)
 800646c:	4602      	mov	r2, r0
 800646e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006472:	f7ff bb3b 	b.w	8005aec <_dtoa_r+0x34>
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	3202      	adds	r2, #2
 800647a:	0092      	lsls	r2, r2, #2
 800647c:	f107 010c 	add.w	r1, r7, #12
 8006480:	300c      	adds	r0, #12
 8006482:	f000 fd9f 	bl	8006fc4 <memcpy>
 8006486:	2201      	movs	r2, #1
 8006488:	4629      	mov	r1, r5
 800648a:	4620      	mov	r0, r4
 800648c:	f001 f804 	bl	8007498 <__lshift>
 8006490:	9b01      	ldr	r3, [sp, #4]
 8006492:	f103 0901 	add.w	r9, r3, #1
 8006496:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800649a:	4413      	add	r3, r2
 800649c:	9305      	str	r3, [sp, #20]
 800649e:	f00a 0301 	and.w	r3, sl, #1
 80064a2:	46b8      	mov	r8, r7
 80064a4:	9304      	str	r3, [sp, #16]
 80064a6:	4607      	mov	r7, r0
 80064a8:	4631      	mov	r1, r6
 80064aa:	ee18 0a10 	vmov	r0, s16
 80064ae:	f7ff fa75 	bl	800599c <quorem>
 80064b2:	4641      	mov	r1, r8
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80064ba:	ee18 0a10 	vmov	r0, s16
 80064be:	f001 f85b 	bl	8007578 <__mcmp>
 80064c2:	463a      	mov	r2, r7
 80064c4:	9003      	str	r0, [sp, #12]
 80064c6:	4631      	mov	r1, r6
 80064c8:	4620      	mov	r0, r4
 80064ca:	f001 f871 	bl	80075b0 <__mdiff>
 80064ce:	68c2      	ldr	r2, [r0, #12]
 80064d0:	f109 3bff 	add.w	fp, r9, #4294967295
 80064d4:	4605      	mov	r5, r0
 80064d6:	bb02      	cbnz	r2, 800651a <_dtoa_r+0xa62>
 80064d8:	4601      	mov	r1, r0
 80064da:	ee18 0a10 	vmov	r0, s16
 80064de:	f001 f84b 	bl	8007578 <__mcmp>
 80064e2:	4602      	mov	r2, r0
 80064e4:	4629      	mov	r1, r5
 80064e6:	4620      	mov	r0, r4
 80064e8:	9207      	str	r2, [sp, #28]
 80064ea:	f000 fdb9 	bl	8007060 <_Bfree>
 80064ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80064f2:	ea43 0102 	orr.w	r1, r3, r2
 80064f6:	9b04      	ldr	r3, [sp, #16]
 80064f8:	430b      	orrs	r3, r1
 80064fa:	464d      	mov	r5, r9
 80064fc:	d10f      	bne.n	800651e <_dtoa_r+0xa66>
 80064fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006502:	d02a      	beq.n	800655a <_dtoa_r+0xaa2>
 8006504:	9b03      	ldr	r3, [sp, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	dd02      	ble.n	8006510 <_dtoa_r+0xa58>
 800650a:	9b02      	ldr	r3, [sp, #8]
 800650c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006510:	f88b a000 	strb.w	sl, [fp]
 8006514:	e775      	b.n	8006402 <_dtoa_r+0x94a>
 8006516:	4638      	mov	r0, r7
 8006518:	e7ba      	b.n	8006490 <_dtoa_r+0x9d8>
 800651a:	2201      	movs	r2, #1
 800651c:	e7e2      	b.n	80064e4 <_dtoa_r+0xa2c>
 800651e:	9b03      	ldr	r3, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	db04      	blt.n	800652e <_dtoa_r+0xa76>
 8006524:	9906      	ldr	r1, [sp, #24]
 8006526:	430b      	orrs	r3, r1
 8006528:	9904      	ldr	r1, [sp, #16]
 800652a:	430b      	orrs	r3, r1
 800652c:	d122      	bne.n	8006574 <_dtoa_r+0xabc>
 800652e:	2a00      	cmp	r2, #0
 8006530:	ddee      	ble.n	8006510 <_dtoa_r+0xa58>
 8006532:	ee18 1a10 	vmov	r1, s16
 8006536:	2201      	movs	r2, #1
 8006538:	4620      	mov	r0, r4
 800653a:	f000 ffad 	bl	8007498 <__lshift>
 800653e:	4631      	mov	r1, r6
 8006540:	ee08 0a10 	vmov	s16, r0
 8006544:	f001 f818 	bl	8007578 <__mcmp>
 8006548:	2800      	cmp	r0, #0
 800654a:	dc03      	bgt.n	8006554 <_dtoa_r+0xa9c>
 800654c:	d1e0      	bne.n	8006510 <_dtoa_r+0xa58>
 800654e:	f01a 0f01 	tst.w	sl, #1
 8006552:	d0dd      	beq.n	8006510 <_dtoa_r+0xa58>
 8006554:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006558:	d1d7      	bne.n	800650a <_dtoa_r+0xa52>
 800655a:	2339      	movs	r3, #57	; 0x39
 800655c:	f88b 3000 	strb.w	r3, [fp]
 8006560:	462b      	mov	r3, r5
 8006562:	461d      	mov	r5, r3
 8006564:	3b01      	subs	r3, #1
 8006566:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800656a:	2a39      	cmp	r2, #57	; 0x39
 800656c:	d071      	beq.n	8006652 <_dtoa_r+0xb9a>
 800656e:	3201      	adds	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
 8006572:	e746      	b.n	8006402 <_dtoa_r+0x94a>
 8006574:	2a00      	cmp	r2, #0
 8006576:	dd07      	ble.n	8006588 <_dtoa_r+0xad0>
 8006578:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800657c:	d0ed      	beq.n	800655a <_dtoa_r+0xaa2>
 800657e:	f10a 0301 	add.w	r3, sl, #1
 8006582:	f88b 3000 	strb.w	r3, [fp]
 8006586:	e73c      	b.n	8006402 <_dtoa_r+0x94a>
 8006588:	9b05      	ldr	r3, [sp, #20]
 800658a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800658e:	4599      	cmp	r9, r3
 8006590:	d047      	beq.n	8006622 <_dtoa_r+0xb6a>
 8006592:	ee18 1a10 	vmov	r1, s16
 8006596:	2300      	movs	r3, #0
 8006598:	220a      	movs	r2, #10
 800659a:	4620      	mov	r0, r4
 800659c:	f000 fd82 	bl	80070a4 <__multadd>
 80065a0:	45b8      	cmp	r8, r7
 80065a2:	ee08 0a10 	vmov	s16, r0
 80065a6:	f04f 0300 	mov.w	r3, #0
 80065aa:	f04f 020a 	mov.w	r2, #10
 80065ae:	4641      	mov	r1, r8
 80065b0:	4620      	mov	r0, r4
 80065b2:	d106      	bne.n	80065c2 <_dtoa_r+0xb0a>
 80065b4:	f000 fd76 	bl	80070a4 <__multadd>
 80065b8:	4680      	mov	r8, r0
 80065ba:	4607      	mov	r7, r0
 80065bc:	f109 0901 	add.w	r9, r9, #1
 80065c0:	e772      	b.n	80064a8 <_dtoa_r+0x9f0>
 80065c2:	f000 fd6f 	bl	80070a4 <__multadd>
 80065c6:	4639      	mov	r1, r7
 80065c8:	4680      	mov	r8, r0
 80065ca:	2300      	movs	r3, #0
 80065cc:	220a      	movs	r2, #10
 80065ce:	4620      	mov	r0, r4
 80065d0:	f000 fd68 	bl	80070a4 <__multadd>
 80065d4:	4607      	mov	r7, r0
 80065d6:	e7f1      	b.n	80065bc <_dtoa_r+0xb04>
 80065d8:	9b03      	ldr	r3, [sp, #12]
 80065da:	9302      	str	r3, [sp, #8]
 80065dc:	9d01      	ldr	r5, [sp, #4]
 80065de:	ee18 0a10 	vmov	r0, s16
 80065e2:	4631      	mov	r1, r6
 80065e4:	f7ff f9da 	bl	800599c <quorem>
 80065e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80065ec:	9b01      	ldr	r3, [sp, #4]
 80065ee:	f805 ab01 	strb.w	sl, [r5], #1
 80065f2:	1aea      	subs	r2, r5, r3
 80065f4:	9b02      	ldr	r3, [sp, #8]
 80065f6:	4293      	cmp	r3, r2
 80065f8:	dd09      	ble.n	800660e <_dtoa_r+0xb56>
 80065fa:	ee18 1a10 	vmov	r1, s16
 80065fe:	2300      	movs	r3, #0
 8006600:	220a      	movs	r2, #10
 8006602:	4620      	mov	r0, r4
 8006604:	f000 fd4e 	bl	80070a4 <__multadd>
 8006608:	ee08 0a10 	vmov	s16, r0
 800660c:	e7e7      	b.n	80065de <_dtoa_r+0xb26>
 800660e:	9b02      	ldr	r3, [sp, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	bfc8      	it	gt
 8006614:	461d      	movgt	r5, r3
 8006616:	9b01      	ldr	r3, [sp, #4]
 8006618:	bfd8      	it	le
 800661a:	2501      	movle	r5, #1
 800661c:	441d      	add	r5, r3
 800661e:	f04f 0800 	mov.w	r8, #0
 8006622:	ee18 1a10 	vmov	r1, s16
 8006626:	2201      	movs	r2, #1
 8006628:	4620      	mov	r0, r4
 800662a:	f000 ff35 	bl	8007498 <__lshift>
 800662e:	4631      	mov	r1, r6
 8006630:	ee08 0a10 	vmov	s16, r0
 8006634:	f000 ffa0 	bl	8007578 <__mcmp>
 8006638:	2800      	cmp	r0, #0
 800663a:	dc91      	bgt.n	8006560 <_dtoa_r+0xaa8>
 800663c:	d102      	bne.n	8006644 <_dtoa_r+0xb8c>
 800663e:	f01a 0f01 	tst.w	sl, #1
 8006642:	d18d      	bne.n	8006560 <_dtoa_r+0xaa8>
 8006644:	462b      	mov	r3, r5
 8006646:	461d      	mov	r5, r3
 8006648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800664c:	2a30      	cmp	r2, #48	; 0x30
 800664e:	d0fa      	beq.n	8006646 <_dtoa_r+0xb8e>
 8006650:	e6d7      	b.n	8006402 <_dtoa_r+0x94a>
 8006652:	9a01      	ldr	r2, [sp, #4]
 8006654:	429a      	cmp	r2, r3
 8006656:	d184      	bne.n	8006562 <_dtoa_r+0xaaa>
 8006658:	9b00      	ldr	r3, [sp, #0]
 800665a:	3301      	adds	r3, #1
 800665c:	9300      	str	r3, [sp, #0]
 800665e:	2331      	movs	r3, #49	; 0x31
 8006660:	7013      	strb	r3, [r2, #0]
 8006662:	e6ce      	b.n	8006402 <_dtoa_r+0x94a>
 8006664:	4b09      	ldr	r3, [pc, #36]	; (800668c <_dtoa_r+0xbd4>)
 8006666:	f7ff ba95 	b.w	8005b94 <_dtoa_r+0xdc>
 800666a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800666c:	2b00      	cmp	r3, #0
 800666e:	f47f aa6e 	bne.w	8005b4e <_dtoa_r+0x96>
 8006672:	4b07      	ldr	r3, [pc, #28]	; (8006690 <_dtoa_r+0xbd8>)
 8006674:	f7ff ba8e 	b.w	8005b94 <_dtoa_r+0xdc>
 8006678:	9b02      	ldr	r3, [sp, #8]
 800667a:	2b00      	cmp	r3, #0
 800667c:	dcae      	bgt.n	80065dc <_dtoa_r+0xb24>
 800667e:	9b06      	ldr	r3, [sp, #24]
 8006680:	2b02      	cmp	r3, #2
 8006682:	f73f aea8 	bgt.w	80063d6 <_dtoa_r+0x91e>
 8006686:	e7a9      	b.n	80065dc <_dtoa_r+0xb24>
 8006688:	08009208 	.word	0x08009208
 800668c:	08009469 	.word	0x08009469
 8006690:	08009189 	.word	0x08009189

08006694 <std>:
 8006694:	2300      	movs	r3, #0
 8006696:	b510      	push	{r4, lr}
 8006698:	4604      	mov	r4, r0
 800669a:	e9c0 3300 	strd	r3, r3, [r0]
 800669e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80066a2:	6083      	str	r3, [r0, #8]
 80066a4:	8181      	strh	r1, [r0, #12]
 80066a6:	6643      	str	r3, [r0, #100]	; 0x64
 80066a8:	81c2      	strh	r2, [r0, #14]
 80066aa:	6183      	str	r3, [r0, #24]
 80066ac:	4619      	mov	r1, r3
 80066ae:	2208      	movs	r2, #8
 80066b0:	305c      	adds	r0, #92	; 0x5c
 80066b2:	f7fd fb5f 	bl	8003d74 <memset>
 80066b6:	4b05      	ldr	r3, [pc, #20]	; (80066cc <std+0x38>)
 80066b8:	6263      	str	r3, [r4, #36]	; 0x24
 80066ba:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <std+0x3c>)
 80066bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80066be:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <std+0x40>)
 80066c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066c2:	4b05      	ldr	r3, [pc, #20]	; (80066d8 <std+0x44>)
 80066c4:	6224      	str	r4, [r4, #32]
 80066c6:	6323      	str	r3, [r4, #48]	; 0x30
 80066c8:	bd10      	pop	{r4, pc}
 80066ca:	bf00      	nop
 80066cc:	08004b4d 	.word	0x08004b4d
 80066d0:	08004b73 	.word	0x08004b73
 80066d4:	08004bab 	.word	0x08004bab
 80066d8:	08004bcf 	.word	0x08004bcf

080066dc <_cleanup_r>:
 80066dc:	4901      	ldr	r1, [pc, #4]	; (80066e4 <_cleanup_r+0x8>)
 80066de:	f000 b8af 	b.w	8006840 <_fwalk_reent>
 80066e2:	bf00      	nop
 80066e4:	08008c09 	.word	0x08008c09

080066e8 <__sfmoreglue>:
 80066e8:	b570      	push	{r4, r5, r6, lr}
 80066ea:	2268      	movs	r2, #104	; 0x68
 80066ec:	1e4d      	subs	r5, r1, #1
 80066ee:	4355      	muls	r5, r2
 80066f0:	460e      	mov	r6, r1
 80066f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80066f6:	f001 f9b7 	bl	8007a68 <_malloc_r>
 80066fa:	4604      	mov	r4, r0
 80066fc:	b140      	cbz	r0, 8006710 <__sfmoreglue+0x28>
 80066fe:	2100      	movs	r1, #0
 8006700:	e9c0 1600 	strd	r1, r6, [r0]
 8006704:	300c      	adds	r0, #12
 8006706:	60a0      	str	r0, [r4, #8]
 8006708:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800670c:	f7fd fb32 	bl	8003d74 <memset>
 8006710:	4620      	mov	r0, r4
 8006712:	bd70      	pop	{r4, r5, r6, pc}

08006714 <__sfp_lock_acquire>:
 8006714:	4801      	ldr	r0, [pc, #4]	; (800671c <__sfp_lock_acquire+0x8>)
 8006716:	f000 bc26 	b.w	8006f66 <__retarget_lock_acquire_recursive>
 800671a:	bf00      	nop
 800671c:	2000036d 	.word	0x2000036d

08006720 <__sfp_lock_release>:
 8006720:	4801      	ldr	r0, [pc, #4]	; (8006728 <__sfp_lock_release+0x8>)
 8006722:	f000 bc21 	b.w	8006f68 <__retarget_lock_release_recursive>
 8006726:	bf00      	nop
 8006728:	2000036d 	.word	0x2000036d

0800672c <__sinit_lock_acquire>:
 800672c:	4801      	ldr	r0, [pc, #4]	; (8006734 <__sinit_lock_acquire+0x8>)
 800672e:	f000 bc1a 	b.w	8006f66 <__retarget_lock_acquire_recursive>
 8006732:	bf00      	nop
 8006734:	2000036e 	.word	0x2000036e

08006738 <__sinit_lock_release>:
 8006738:	4801      	ldr	r0, [pc, #4]	; (8006740 <__sinit_lock_release+0x8>)
 800673a:	f000 bc15 	b.w	8006f68 <__retarget_lock_release_recursive>
 800673e:	bf00      	nop
 8006740:	2000036e 	.word	0x2000036e

08006744 <__sinit>:
 8006744:	b510      	push	{r4, lr}
 8006746:	4604      	mov	r4, r0
 8006748:	f7ff fff0 	bl	800672c <__sinit_lock_acquire>
 800674c:	69a3      	ldr	r3, [r4, #24]
 800674e:	b11b      	cbz	r3, 8006758 <__sinit+0x14>
 8006750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006754:	f7ff bff0 	b.w	8006738 <__sinit_lock_release>
 8006758:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800675c:	6523      	str	r3, [r4, #80]	; 0x50
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <__sinit+0x68>)
 8006760:	4a13      	ldr	r2, [pc, #76]	; (80067b0 <__sinit+0x6c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	62a2      	str	r2, [r4, #40]	; 0x28
 8006766:	42a3      	cmp	r3, r4
 8006768:	bf04      	itt	eq
 800676a:	2301      	moveq	r3, #1
 800676c:	61a3      	streq	r3, [r4, #24]
 800676e:	4620      	mov	r0, r4
 8006770:	f000 f820 	bl	80067b4 <__sfp>
 8006774:	6060      	str	r0, [r4, #4]
 8006776:	4620      	mov	r0, r4
 8006778:	f000 f81c 	bl	80067b4 <__sfp>
 800677c:	60a0      	str	r0, [r4, #8]
 800677e:	4620      	mov	r0, r4
 8006780:	f000 f818 	bl	80067b4 <__sfp>
 8006784:	2200      	movs	r2, #0
 8006786:	60e0      	str	r0, [r4, #12]
 8006788:	2104      	movs	r1, #4
 800678a:	6860      	ldr	r0, [r4, #4]
 800678c:	f7ff ff82 	bl	8006694 <std>
 8006790:	68a0      	ldr	r0, [r4, #8]
 8006792:	2201      	movs	r2, #1
 8006794:	2109      	movs	r1, #9
 8006796:	f7ff ff7d 	bl	8006694 <std>
 800679a:	68e0      	ldr	r0, [r4, #12]
 800679c:	2202      	movs	r2, #2
 800679e:	2112      	movs	r1, #18
 80067a0:	f7ff ff78 	bl	8006694 <std>
 80067a4:	2301      	movs	r3, #1
 80067a6:	61a3      	str	r3, [r4, #24]
 80067a8:	e7d2      	b.n	8006750 <__sinit+0xc>
 80067aa:	bf00      	nop
 80067ac:	08008ffc 	.word	0x08008ffc
 80067b0:	080066dd 	.word	0x080066dd

080067b4 <__sfp>:
 80067b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067b6:	4607      	mov	r7, r0
 80067b8:	f7ff ffac 	bl	8006714 <__sfp_lock_acquire>
 80067bc:	4b1e      	ldr	r3, [pc, #120]	; (8006838 <__sfp+0x84>)
 80067be:	681e      	ldr	r6, [r3, #0]
 80067c0:	69b3      	ldr	r3, [r6, #24]
 80067c2:	b913      	cbnz	r3, 80067ca <__sfp+0x16>
 80067c4:	4630      	mov	r0, r6
 80067c6:	f7ff ffbd 	bl	8006744 <__sinit>
 80067ca:	3648      	adds	r6, #72	; 0x48
 80067cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	d503      	bpl.n	80067dc <__sfp+0x28>
 80067d4:	6833      	ldr	r3, [r6, #0]
 80067d6:	b30b      	cbz	r3, 800681c <__sfp+0x68>
 80067d8:	6836      	ldr	r6, [r6, #0]
 80067da:	e7f7      	b.n	80067cc <__sfp+0x18>
 80067dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80067e0:	b9d5      	cbnz	r5, 8006818 <__sfp+0x64>
 80067e2:	4b16      	ldr	r3, [pc, #88]	; (800683c <__sfp+0x88>)
 80067e4:	60e3      	str	r3, [r4, #12]
 80067e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80067ea:	6665      	str	r5, [r4, #100]	; 0x64
 80067ec:	f000 fbba 	bl	8006f64 <__retarget_lock_init_recursive>
 80067f0:	f7ff ff96 	bl	8006720 <__sfp_lock_release>
 80067f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80067f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80067fc:	6025      	str	r5, [r4, #0]
 80067fe:	61a5      	str	r5, [r4, #24]
 8006800:	2208      	movs	r2, #8
 8006802:	4629      	mov	r1, r5
 8006804:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006808:	f7fd fab4 	bl	8003d74 <memset>
 800680c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006810:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006814:	4620      	mov	r0, r4
 8006816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006818:	3468      	adds	r4, #104	; 0x68
 800681a:	e7d9      	b.n	80067d0 <__sfp+0x1c>
 800681c:	2104      	movs	r1, #4
 800681e:	4638      	mov	r0, r7
 8006820:	f7ff ff62 	bl	80066e8 <__sfmoreglue>
 8006824:	4604      	mov	r4, r0
 8006826:	6030      	str	r0, [r6, #0]
 8006828:	2800      	cmp	r0, #0
 800682a:	d1d5      	bne.n	80067d8 <__sfp+0x24>
 800682c:	f7ff ff78 	bl	8006720 <__sfp_lock_release>
 8006830:	230c      	movs	r3, #12
 8006832:	603b      	str	r3, [r7, #0]
 8006834:	e7ee      	b.n	8006814 <__sfp+0x60>
 8006836:	bf00      	nop
 8006838:	08008ffc 	.word	0x08008ffc
 800683c:	ffff0001 	.word	0xffff0001

08006840 <_fwalk_reent>:
 8006840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006844:	4606      	mov	r6, r0
 8006846:	4688      	mov	r8, r1
 8006848:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800684c:	2700      	movs	r7, #0
 800684e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006852:	f1b9 0901 	subs.w	r9, r9, #1
 8006856:	d505      	bpl.n	8006864 <_fwalk_reent+0x24>
 8006858:	6824      	ldr	r4, [r4, #0]
 800685a:	2c00      	cmp	r4, #0
 800685c:	d1f7      	bne.n	800684e <_fwalk_reent+0xe>
 800685e:	4638      	mov	r0, r7
 8006860:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006864:	89ab      	ldrh	r3, [r5, #12]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d907      	bls.n	800687a <_fwalk_reent+0x3a>
 800686a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800686e:	3301      	adds	r3, #1
 8006870:	d003      	beq.n	800687a <_fwalk_reent+0x3a>
 8006872:	4629      	mov	r1, r5
 8006874:	4630      	mov	r0, r6
 8006876:	47c0      	blx	r8
 8006878:	4307      	orrs	r7, r0
 800687a:	3568      	adds	r5, #104	; 0x68
 800687c:	e7e9      	b.n	8006852 <_fwalk_reent+0x12>

0800687e <rshift>:
 800687e:	6903      	ldr	r3, [r0, #16]
 8006880:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006888:	ea4f 1261 	mov.w	r2, r1, asr #5
 800688c:	f100 0414 	add.w	r4, r0, #20
 8006890:	dd45      	ble.n	800691e <rshift+0xa0>
 8006892:	f011 011f 	ands.w	r1, r1, #31
 8006896:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800689a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800689e:	d10c      	bne.n	80068ba <rshift+0x3c>
 80068a0:	f100 0710 	add.w	r7, r0, #16
 80068a4:	4629      	mov	r1, r5
 80068a6:	42b1      	cmp	r1, r6
 80068a8:	d334      	bcc.n	8006914 <rshift+0x96>
 80068aa:	1a9b      	subs	r3, r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	1eea      	subs	r2, r5, #3
 80068b0:	4296      	cmp	r6, r2
 80068b2:	bf38      	it	cc
 80068b4:	2300      	movcc	r3, #0
 80068b6:	4423      	add	r3, r4
 80068b8:	e015      	b.n	80068e6 <rshift+0x68>
 80068ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80068be:	f1c1 0820 	rsb	r8, r1, #32
 80068c2:	40cf      	lsrs	r7, r1
 80068c4:	f105 0e04 	add.w	lr, r5, #4
 80068c8:	46a1      	mov	r9, r4
 80068ca:	4576      	cmp	r6, lr
 80068cc:	46f4      	mov	ip, lr
 80068ce:	d815      	bhi.n	80068fc <rshift+0x7e>
 80068d0:	1a9a      	subs	r2, r3, r2
 80068d2:	0092      	lsls	r2, r2, #2
 80068d4:	3a04      	subs	r2, #4
 80068d6:	3501      	adds	r5, #1
 80068d8:	42ae      	cmp	r6, r5
 80068da:	bf38      	it	cc
 80068dc:	2200      	movcc	r2, #0
 80068de:	18a3      	adds	r3, r4, r2
 80068e0:	50a7      	str	r7, [r4, r2]
 80068e2:	b107      	cbz	r7, 80068e6 <rshift+0x68>
 80068e4:	3304      	adds	r3, #4
 80068e6:	1b1a      	subs	r2, r3, r4
 80068e8:	42a3      	cmp	r3, r4
 80068ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80068ee:	bf08      	it	eq
 80068f0:	2300      	moveq	r3, #0
 80068f2:	6102      	str	r2, [r0, #16]
 80068f4:	bf08      	it	eq
 80068f6:	6143      	streq	r3, [r0, #20]
 80068f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80068fc:	f8dc c000 	ldr.w	ip, [ip]
 8006900:	fa0c fc08 	lsl.w	ip, ip, r8
 8006904:	ea4c 0707 	orr.w	r7, ip, r7
 8006908:	f849 7b04 	str.w	r7, [r9], #4
 800690c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006910:	40cf      	lsrs	r7, r1
 8006912:	e7da      	b.n	80068ca <rshift+0x4c>
 8006914:	f851 cb04 	ldr.w	ip, [r1], #4
 8006918:	f847 cf04 	str.w	ip, [r7, #4]!
 800691c:	e7c3      	b.n	80068a6 <rshift+0x28>
 800691e:	4623      	mov	r3, r4
 8006920:	e7e1      	b.n	80068e6 <rshift+0x68>

08006922 <__hexdig_fun>:
 8006922:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006926:	2b09      	cmp	r3, #9
 8006928:	d802      	bhi.n	8006930 <__hexdig_fun+0xe>
 800692a:	3820      	subs	r0, #32
 800692c:	b2c0      	uxtb	r0, r0
 800692e:	4770      	bx	lr
 8006930:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006934:	2b05      	cmp	r3, #5
 8006936:	d801      	bhi.n	800693c <__hexdig_fun+0x1a>
 8006938:	3847      	subs	r0, #71	; 0x47
 800693a:	e7f7      	b.n	800692c <__hexdig_fun+0xa>
 800693c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006940:	2b05      	cmp	r3, #5
 8006942:	d801      	bhi.n	8006948 <__hexdig_fun+0x26>
 8006944:	3827      	subs	r0, #39	; 0x27
 8006946:	e7f1      	b.n	800692c <__hexdig_fun+0xa>
 8006948:	2000      	movs	r0, #0
 800694a:	4770      	bx	lr

0800694c <__gethex>:
 800694c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006950:	ed2d 8b02 	vpush	{d8}
 8006954:	b089      	sub	sp, #36	; 0x24
 8006956:	ee08 0a10 	vmov	s16, r0
 800695a:	9304      	str	r3, [sp, #16]
 800695c:	4bb4      	ldr	r3, [pc, #720]	; (8006c30 <__gethex+0x2e4>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	9301      	str	r3, [sp, #4]
 8006962:	4618      	mov	r0, r3
 8006964:	468b      	mov	fp, r1
 8006966:	4690      	mov	r8, r2
 8006968:	f7f9 fc42 	bl	80001f0 <strlen>
 800696c:	9b01      	ldr	r3, [sp, #4]
 800696e:	f8db 2000 	ldr.w	r2, [fp]
 8006972:	4403      	add	r3, r0
 8006974:	4682      	mov	sl, r0
 8006976:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800697a:	9305      	str	r3, [sp, #20]
 800697c:	1c93      	adds	r3, r2, #2
 800697e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006982:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006986:	32fe      	adds	r2, #254	; 0xfe
 8006988:	18d1      	adds	r1, r2, r3
 800698a:	461f      	mov	r7, r3
 800698c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006990:	9100      	str	r1, [sp, #0]
 8006992:	2830      	cmp	r0, #48	; 0x30
 8006994:	d0f8      	beq.n	8006988 <__gethex+0x3c>
 8006996:	f7ff ffc4 	bl	8006922 <__hexdig_fun>
 800699a:	4604      	mov	r4, r0
 800699c:	2800      	cmp	r0, #0
 800699e:	d13a      	bne.n	8006a16 <__gethex+0xca>
 80069a0:	9901      	ldr	r1, [sp, #4]
 80069a2:	4652      	mov	r2, sl
 80069a4:	4638      	mov	r0, r7
 80069a6:	f7fe f916 	bl	8004bd6 <strncmp>
 80069aa:	4605      	mov	r5, r0
 80069ac:	2800      	cmp	r0, #0
 80069ae:	d168      	bne.n	8006a82 <__gethex+0x136>
 80069b0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80069b4:	eb07 060a 	add.w	r6, r7, sl
 80069b8:	f7ff ffb3 	bl	8006922 <__hexdig_fun>
 80069bc:	2800      	cmp	r0, #0
 80069be:	d062      	beq.n	8006a86 <__gethex+0x13a>
 80069c0:	4633      	mov	r3, r6
 80069c2:	7818      	ldrb	r0, [r3, #0]
 80069c4:	2830      	cmp	r0, #48	; 0x30
 80069c6:	461f      	mov	r7, r3
 80069c8:	f103 0301 	add.w	r3, r3, #1
 80069cc:	d0f9      	beq.n	80069c2 <__gethex+0x76>
 80069ce:	f7ff ffa8 	bl	8006922 <__hexdig_fun>
 80069d2:	2301      	movs	r3, #1
 80069d4:	fab0 f480 	clz	r4, r0
 80069d8:	0964      	lsrs	r4, r4, #5
 80069da:	4635      	mov	r5, r6
 80069dc:	9300      	str	r3, [sp, #0]
 80069de:	463a      	mov	r2, r7
 80069e0:	4616      	mov	r6, r2
 80069e2:	3201      	adds	r2, #1
 80069e4:	7830      	ldrb	r0, [r6, #0]
 80069e6:	f7ff ff9c 	bl	8006922 <__hexdig_fun>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d1f8      	bne.n	80069e0 <__gethex+0x94>
 80069ee:	9901      	ldr	r1, [sp, #4]
 80069f0:	4652      	mov	r2, sl
 80069f2:	4630      	mov	r0, r6
 80069f4:	f7fe f8ef 	bl	8004bd6 <strncmp>
 80069f8:	b980      	cbnz	r0, 8006a1c <__gethex+0xd0>
 80069fa:	b94d      	cbnz	r5, 8006a10 <__gethex+0xc4>
 80069fc:	eb06 050a 	add.w	r5, r6, sl
 8006a00:	462a      	mov	r2, r5
 8006a02:	4616      	mov	r6, r2
 8006a04:	3201      	adds	r2, #1
 8006a06:	7830      	ldrb	r0, [r6, #0]
 8006a08:	f7ff ff8b 	bl	8006922 <__hexdig_fun>
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	d1f8      	bne.n	8006a02 <__gethex+0xb6>
 8006a10:	1bad      	subs	r5, r5, r6
 8006a12:	00ad      	lsls	r5, r5, #2
 8006a14:	e004      	b.n	8006a20 <__gethex+0xd4>
 8006a16:	2400      	movs	r4, #0
 8006a18:	4625      	mov	r5, r4
 8006a1a:	e7e0      	b.n	80069de <__gethex+0x92>
 8006a1c:	2d00      	cmp	r5, #0
 8006a1e:	d1f7      	bne.n	8006a10 <__gethex+0xc4>
 8006a20:	7833      	ldrb	r3, [r6, #0]
 8006a22:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006a26:	2b50      	cmp	r3, #80	; 0x50
 8006a28:	d13b      	bne.n	8006aa2 <__gethex+0x156>
 8006a2a:	7873      	ldrb	r3, [r6, #1]
 8006a2c:	2b2b      	cmp	r3, #43	; 0x2b
 8006a2e:	d02c      	beq.n	8006a8a <__gethex+0x13e>
 8006a30:	2b2d      	cmp	r3, #45	; 0x2d
 8006a32:	d02e      	beq.n	8006a92 <__gethex+0x146>
 8006a34:	1c71      	adds	r1, r6, #1
 8006a36:	f04f 0900 	mov.w	r9, #0
 8006a3a:	7808      	ldrb	r0, [r1, #0]
 8006a3c:	f7ff ff71 	bl	8006922 <__hexdig_fun>
 8006a40:	1e43      	subs	r3, r0, #1
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	2b18      	cmp	r3, #24
 8006a46:	d82c      	bhi.n	8006aa2 <__gethex+0x156>
 8006a48:	f1a0 0210 	sub.w	r2, r0, #16
 8006a4c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006a50:	f7ff ff67 	bl	8006922 <__hexdig_fun>
 8006a54:	1e43      	subs	r3, r0, #1
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	2b18      	cmp	r3, #24
 8006a5a:	d91d      	bls.n	8006a98 <__gethex+0x14c>
 8006a5c:	f1b9 0f00 	cmp.w	r9, #0
 8006a60:	d000      	beq.n	8006a64 <__gethex+0x118>
 8006a62:	4252      	negs	r2, r2
 8006a64:	4415      	add	r5, r2
 8006a66:	f8cb 1000 	str.w	r1, [fp]
 8006a6a:	b1e4      	cbz	r4, 8006aa6 <__gethex+0x15a>
 8006a6c:	9b00      	ldr	r3, [sp, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	bf14      	ite	ne
 8006a72:	2700      	movne	r7, #0
 8006a74:	2706      	moveq	r7, #6
 8006a76:	4638      	mov	r0, r7
 8006a78:	b009      	add	sp, #36	; 0x24
 8006a7a:	ecbd 8b02 	vpop	{d8}
 8006a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a82:	463e      	mov	r6, r7
 8006a84:	4625      	mov	r5, r4
 8006a86:	2401      	movs	r4, #1
 8006a88:	e7ca      	b.n	8006a20 <__gethex+0xd4>
 8006a8a:	f04f 0900 	mov.w	r9, #0
 8006a8e:	1cb1      	adds	r1, r6, #2
 8006a90:	e7d3      	b.n	8006a3a <__gethex+0xee>
 8006a92:	f04f 0901 	mov.w	r9, #1
 8006a96:	e7fa      	b.n	8006a8e <__gethex+0x142>
 8006a98:	230a      	movs	r3, #10
 8006a9a:	fb03 0202 	mla	r2, r3, r2, r0
 8006a9e:	3a10      	subs	r2, #16
 8006aa0:	e7d4      	b.n	8006a4c <__gethex+0x100>
 8006aa2:	4631      	mov	r1, r6
 8006aa4:	e7df      	b.n	8006a66 <__gethex+0x11a>
 8006aa6:	1bf3      	subs	r3, r6, r7
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	4621      	mov	r1, r4
 8006aac:	2b07      	cmp	r3, #7
 8006aae:	dc0b      	bgt.n	8006ac8 <__gethex+0x17c>
 8006ab0:	ee18 0a10 	vmov	r0, s16
 8006ab4:	f000 fa94 	bl	8006fe0 <_Balloc>
 8006ab8:	4604      	mov	r4, r0
 8006aba:	b940      	cbnz	r0, 8006ace <__gethex+0x182>
 8006abc:	4b5d      	ldr	r3, [pc, #372]	; (8006c34 <__gethex+0x2e8>)
 8006abe:	4602      	mov	r2, r0
 8006ac0:	21de      	movs	r1, #222	; 0xde
 8006ac2:	485d      	ldr	r0, [pc, #372]	; (8006c38 <__gethex+0x2ec>)
 8006ac4:	f001 fffc 	bl	8008ac0 <__assert_func>
 8006ac8:	3101      	adds	r1, #1
 8006aca:	105b      	asrs	r3, r3, #1
 8006acc:	e7ee      	b.n	8006aac <__gethex+0x160>
 8006ace:	f100 0914 	add.w	r9, r0, #20
 8006ad2:	f04f 0b00 	mov.w	fp, #0
 8006ad6:	f1ca 0301 	rsb	r3, sl, #1
 8006ada:	f8cd 9008 	str.w	r9, [sp, #8]
 8006ade:	f8cd b000 	str.w	fp, [sp]
 8006ae2:	9306      	str	r3, [sp, #24]
 8006ae4:	42b7      	cmp	r7, r6
 8006ae6:	d340      	bcc.n	8006b6a <__gethex+0x21e>
 8006ae8:	9802      	ldr	r0, [sp, #8]
 8006aea:	9b00      	ldr	r3, [sp, #0]
 8006aec:	f840 3b04 	str.w	r3, [r0], #4
 8006af0:	eba0 0009 	sub.w	r0, r0, r9
 8006af4:	1080      	asrs	r0, r0, #2
 8006af6:	0146      	lsls	r6, r0, #5
 8006af8:	6120      	str	r0, [r4, #16]
 8006afa:	4618      	mov	r0, r3
 8006afc:	f000 fb62 	bl	80071c4 <__hi0bits>
 8006b00:	1a30      	subs	r0, r6, r0
 8006b02:	f8d8 6000 	ldr.w	r6, [r8]
 8006b06:	42b0      	cmp	r0, r6
 8006b08:	dd63      	ble.n	8006bd2 <__gethex+0x286>
 8006b0a:	1b87      	subs	r7, r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	4620      	mov	r0, r4
 8006b10:	f000 ff06 	bl	8007920 <__any_on>
 8006b14:	4682      	mov	sl, r0
 8006b16:	b1a8      	cbz	r0, 8006b44 <__gethex+0x1f8>
 8006b18:	1e7b      	subs	r3, r7, #1
 8006b1a:	1159      	asrs	r1, r3, #5
 8006b1c:	f003 021f 	and.w	r2, r3, #31
 8006b20:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006b24:	f04f 0a01 	mov.w	sl, #1
 8006b28:	fa0a f202 	lsl.w	r2, sl, r2
 8006b2c:	420a      	tst	r2, r1
 8006b2e:	d009      	beq.n	8006b44 <__gethex+0x1f8>
 8006b30:	4553      	cmp	r3, sl
 8006b32:	dd05      	ble.n	8006b40 <__gethex+0x1f4>
 8006b34:	1eb9      	subs	r1, r7, #2
 8006b36:	4620      	mov	r0, r4
 8006b38:	f000 fef2 	bl	8007920 <__any_on>
 8006b3c:	2800      	cmp	r0, #0
 8006b3e:	d145      	bne.n	8006bcc <__gethex+0x280>
 8006b40:	f04f 0a02 	mov.w	sl, #2
 8006b44:	4639      	mov	r1, r7
 8006b46:	4620      	mov	r0, r4
 8006b48:	f7ff fe99 	bl	800687e <rshift>
 8006b4c:	443d      	add	r5, r7
 8006b4e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b52:	42ab      	cmp	r3, r5
 8006b54:	da4c      	bge.n	8006bf0 <__gethex+0x2a4>
 8006b56:	ee18 0a10 	vmov	r0, s16
 8006b5a:	4621      	mov	r1, r4
 8006b5c:	f000 fa80 	bl	8007060 <_Bfree>
 8006b60:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006b62:	2300      	movs	r3, #0
 8006b64:	6013      	str	r3, [r2, #0]
 8006b66:	27a3      	movs	r7, #163	; 0xa3
 8006b68:	e785      	b.n	8006a76 <__gethex+0x12a>
 8006b6a:	1e73      	subs	r3, r6, #1
 8006b6c:	9a05      	ldr	r2, [sp, #20]
 8006b6e:	9303      	str	r3, [sp, #12]
 8006b70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d019      	beq.n	8006bac <__gethex+0x260>
 8006b78:	f1bb 0f20 	cmp.w	fp, #32
 8006b7c:	d107      	bne.n	8006b8e <__gethex+0x242>
 8006b7e:	9b02      	ldr	r3, [sp, #8]
 8006b80:	9a00      	ldr	r2, [sp, #0]
 8006b82:	f843 2b04 	str.w	r2, [r3], #4
 8006b86:	9302      	str	r3, [sp, #8]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	469b      	mov	fp, r3
 8006b8e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006b92:	f7ff fec6 	bl	8006922 <__hexdig_fun>
 8006b96:	9b00      	ldr	r3, [sp, #0]
 8006b98:	f000 000f 	and.w	r0, r0, #15
 8006b9c:	fa00 f00b 	lsl.w	r0, r0, fp
 8006ba0:	4303      	orrs	r3, r0
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	f10b 0b04 	add.w	fp, fp, #4
 8006ba8:	9b03      	ldr	r3, [sp, #12]
 8006baa:	e00d      	b.n	8006bc8 <__gethex+0x27c>
 8006bac:	9b03      	ldr	r3, [sp, #12]
 8006bae:	9a06      	ldr	r2, [sp, #24]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	42bb      	cmp	r3, r7
 8006bb4:	d3e0      	bcc.n	8006b78 <__gethex+0x22c>
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	9901      	ldr	r1, [sp, #4]
 8006bba:	9307      	str	r3, [sp, #28]
 8006bbc:	4652      	mov	r2, sl
 8006bbe:	f7fe f80a 	bl	8004bd6 <strncmp>
 8006bc2:	9b07      	ldr	r3, [sp, #28]
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	d1d7      	bne.n	8006b78 <__gethex+0x22c>
 8006bc8:	461e      	mov	r6, r3
 8006bca:	e78b      	b.n	8006ae4 <__gethex+0x198>
 8006bcc:	f04f 0a03 	mov.w	sl, #3
 8006bd0:	e7b8      	b.n	8006b44 <__gethex+0x1f8>
 8006bd2:	da0a      	bge.n	8006bea <__gethex+0x29e>
 8006bd4:	1a37      	subs	r7, r6, r0
 8006bd6:	4621      	mov	r1, r4
 8006bd8:	ee18 0a10 	vmov	r0, s16
 8006bdc:	463a      	mov	r2, r7
 8006bde:	f000 fc5b 	bl	8007498 <__lshift>
 8006be2:	1bed      	subs	r5, r5, r7
 8006be4:	4604      	mov	r4, r0
 8006be6:	f100 0914 	add.w	r9, r0, #20
 8006bea:	f04f 0a00 	mov.w	sl, #0
 8006bee:	e7ae      	b.n	8006b4e <__gethex+0x202>
 8006bf0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006bf4:	42a8      	cmp	r0, r5
 8006bf6:	dd72      	ble.n	8006cde <__gethex+0x392>
 8006bf8:	1b45      	subs	r5, r0, r5
 8006bfa:	42ae      	cmp	r6, r5
 8006bfc:	dc36      	bgt.n	8006c6c <__gethex+0x320>
 8006bfe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d02a      	beq.n	8006c5c <__gethex+0x310>
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d02c      	beq.n	8006c64 <__gethex+0x318>
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d11c      	bne.n	8006c48 <__gethex+0x2fc>
 8006c0e:	42ae      	cmp	r6, r5
 8006c10:	d11a      	bne.n	8006c48 <__gethex+0x2fc>
 8006c12:	2e01      	cmp	r6, #1
 8006c14:	d112      	bne.n	8006c3c <__gethex+0x2f0>
 8006c16:	9a04      	ldr	r2, [sp, #16]
 8006c18:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	2301      	movs	r3, #1
 8006c20:	6123      	str	r3, [r4, #16]
 8006c22:	f8c9 3000 	str.w	r3, [r9]
 8006c26:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006c28:	2762      	movs	r7, #98	; 0x62
 8006c2a:	601c      	str	r4, [r3, #0]
 8006c2c:	e723      	b.n	8006a76 <__gethex+0x12a>
 8006c2e:	bf00      	nop
 8006c30:	080092e4 	.word	0x080092e4
 8006c34:	08009208 	.word	0x08009208
 8006c38:	0800927c 	.word	0x0800927c
 8006c3c:	1e71      	subs	r1, r6, #1
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f000 fe6e 	bl	8007920 <__any_on>
 8006c44:	2800      	cmp	r0, #0
 8006c46:	d1e6      	bne.n	8006c16 <__gethex+0x2ca>
 8006c48:	ee18 0a10 	vmov	r0, s16
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f000 fa07 	bl	8007060 <_Bfree>
 8006c52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006c54:	2300      	movs	r3, #0
 8006c56:	6013      	str	r3, [r2, #0]
 8006c58:	2750      	movs	r7, #80	; 0x50
 8006c5a:	e70c      	b.n	8006a76 <__gethex+0x12a>
 8006c5c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1f2      	bne.n	8006c48 <__gethex+0x2fc>
 8006c62:	e7d8      	b.n	8006c16 <__gethex+0x2ca>
 8006c64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1d5      	bne.n	8006c16 <__gethex+0x2ca>
 8006c6a:	e7ed      	b.n	8006c48 <__gethex+0x2fc>
 8006c6c:	1e6f      	subs	r7, r5, #1
 8006c6e:	f1ba 0f00 	cmp.w	sl, #0
 8006c72:	d131      	bne.n	8006cd8 <__gethex+0x38c>
 8006c74:	b127      	cbz	r7, 8006c80 <__gethex+0x334>
 8006c76:	4639      	mov	r1, r7
 8006c78:	4620      	mov	r0, r4
 8006c7a:	f000 fe51 	bl	8007920 <__any_on>
 8006c7e:	4682      	mov	sl, r0
 8006c80:	117b      	asrs	r3, r7, #5
 8006c82:	2101      	movs	r1, #1
 8006c84:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8006c88:	f007 071f 	and.w	r7, r7, #31
 8006c8c:	fa01 f707 	lsl.w	r7, r1, r7
 8006c90:	421f      	tst	r7, r3
 8006c92:	4629      	mov	r1, r5
 8006c94:	4620      	mov	r0, r4
 8006c96:	bf18      	it	ne
 8006c98:	f04a 0a02 	orrne.w	sl, sl, #2
 8006c9c:	1b76      	subs	r6, r6, r5
 8006c9e:	f7ff fdee 	bl	800687e <rshift>
 8006ca2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006ca6:	2702      	movs	r7, #2
 8006ca8:	f1ba 0f00 	cmp.w	sl, #0
 8006cac:	d048      	beq.n	8006d40 <__gethex+0x3f4>
 8006cae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d015      	beq.n	8006ce2 <__gethex+0x396>
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d017      	beq.n	8006cea <__gethex+0x39e>
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d109      	bne.n	8006cd2 <__gethex+0x386>
 8006cbe:	f01a 0f02 	tst.w	sl, #2
 8006cc2:	d006      	beq.n	8006cd2 <__gethex+0x386>
 8006cc4:	f8d9 0000 	ldr.w	r0, [r9]
 8006cc8:	ea4a 0a00 	orr.w	sl, sl, r0
 8006ccc:	f01a 0f01 	tst.w	sl, #1
 8006cd0:	d10e      	bne.n	8006cf0 <__gethex+0x3a4>
 8006cd2:	f047 0710 	orr.w	r7, r7, #16
 8006cd6:	e033      	b.n	8006d40 <__gethex+0x3f4>
 8006cd8:	f04f 0a01 	mov.w	sl, #1
 8006cdc:	e7d0      	b.n	8006c80 <__gethex+0x334>
 8006cde:	2701      	movs	r7, #1
 8006ce0:	e7e2      	b.n	8006ca8 <__gethex+0x35c>
 8006ce2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006ce4:	f1c3 0301 	rsb	r3, r3, #1
 8006ce8:	9315      	str	r3, [sp, #84]	; 0x54
 8006cea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d0f0      	beq.n	8006cd2 <__gethex+0x386>
 8006cf0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006cf4:	f104 0314 	add.w	r3, r4, #20
 8006cf8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006cfc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006d00:	f04f 0c00 	mov.w	ip, #0
 8006d04:	4618      	mov	r0, r3
 8006d06:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d0a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006d0e:	d01c      	beq.n	8006d4a <__gethex+0x3fe>
 8006d10:	3201      	adds	r2, #1
 8006d12:	6002      	str	r2, [r0, #0]
 8006d14:	2f02      	cmp	r7, #2
 8006d16:	f104 0314 	add.w	r3, r4, #20
 8006d1a:	d13f      	bne.n	8006d9c <__gethex+0x450>
 8006d1c:	f8d8 2000 	ldr.w	r2, [r8]
 8006d20:	3a01      	subs	r2, #1
 8006d22:	42b2      	cmp	r2, r6
 8006d24:	d10a      	bne.n	8006d3c <__gethex+0x3f0>
 8006d26:	1171      	asrs	r1, r6, #5
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006d2e:	f006 061f 	and.w	r6, r6, #31
 8006d32:	fa02 f606 	lsl.w	r6, r2, r6
 8006d36:	421e      	tst	r6, r3
 8006d38:	bf18      	it	ne
 8006d3a:	4617      	movne	r7, r2
 8006d3c:	f047 0720 	orr.w	r7, r7, #32
 8006d40:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006d42:	601c      	str	r4, [r3, #0]
 8006d44:	9b04      	ldr	r3, [sp, #16]
 8006d46:	601d      	str	r5, [r3, #0]
 8006d48:	e695      	b.n	8006a76 <__gethex+0x12a>
 8006d4a:	4299      	cmp	r1, r3
 8006d4c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006d50:	d8d8      	bhi.n	8006d04 <__gethex+0x3b8>
 8006d52:	68a3      	ldr	r3, [r4, #8]
 8006d54:	459b      	cmp	fp, r3
 8006d56:	db19      	blt.n	8006d8c <__gethex+0x440>
 8006d58:	6861      	ldr	r1, [r4, #4]
 8006d5a:	ee18 0a10 	vmov	r0, s16
 8006d5e:	3101      	adds	r1, #1
 8006d60:	f000 f93e 	bl	8006fe0 <_Balloc>
 8006d64:	4681      	mov	r9, r0
 8006d66:	b918      	cbnz	r0, 8006d70 <__gethex+0x424>
 8006d68:	4b1a      	ldr	r3, [pc, #104]	; (8006dd4 <__gethex+0x488>)
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	2184      	movs	r1, #132	; 0x84
 8006d6e:	e6a8      	b.n	8006ac2 <__gethex+0x176>
 8006d70:	6922      	ldr	r2, [r4, #16]
 8006d72:	3202      	adds	r2, #2
 8006d74:	f104 010c 	add.w	r1, r4, #12
 8006d78:	0092      	lsls	r2, r2, #2
 8006d7a:	300c      	adds	r0, #12
 8006d7c:	f000 f922 	bl	8006fc4 <memcpy>
 8006d80:	4621      	mov	r1, r4
 8006d82:	ee18 0a10 	vmov	r0, s16
 8006d86:	f000 f96b 	bl	8007060 <_Bfree>
 8006d8a:	464c      	mov	r4, r9
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	1c5a      	adds	r2, r3, #1
 8006d90:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d94:	6122      	str	r2, [r4, #16]
 8006d96:	2201      	movs	r2, #1
 8006d98:	615a      	str	r2, [r3, #20]
 8006d9a:	e7bb      	b.n	8006d14 <__gethex+0x3c8>
 8006d9c:	6922      	ldr	r2, [r4, #16]
 8006d9e:	455a      	cmp	r2, fp
 8006da0:	dd0b      	ble.n	8006dba <__gethex+0x46e>
 8006da2:	2101      	movs	r1, #1
 8006da4:	4620      	mov	r0, r4
 8006da6:	f7ff fd6a 	bl	800687e <rshift>
 8006daa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dae:	3501      	adds	r5, #1
 8006db0:	42ab      	cmp	r3, r5
 8006db2:	f6ff aed0 	blt.w	8006b56 <__gethex+0x20a>
 8006db6:	2701      	movs	r7, #1
 8006db8:	e7c0      	b.n	8006d3c <__gethex+0x3f0>
 8006dba:	f016 061f 	ands.w	r6, r6, #31
 8006dbe:	d0fa      	beq.n	8006db6 <__gethex+0x46a>
 8006dc0:	4453      	add	r3, sl
 8006dc2:	f1c6 0620 	rsb	r6, r6, #32
 8006dc6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8006dca:	f000 f9fb 	bl	80071c4 <__hi0bits>
 8006dce:	42b0      	cmp	r0, r6
 8006dd0:	dbe7      	blt.n	8006da2 <__gethex+0x456>
 8006dd2:	e7f0      	b.n	8006db6 <__gethex+0x46a>
 8006dd4:	08009208 	.word	0x08009208

08006dd8 <L_shift>:
 8006dd8:	f1c2 0208 	rsb	r2, r2, #8
 8006ddc:	0092      	lsls	r2, r2, #2
 8006dde:	b570      	push	{r4, r5, r6, lr}
 8006de0:	f1c2 0620 	rsb	r6, r2, #32
 8006de4:	6843      	ldr	r3, [r0, #4]
 8006de6:	6804      	ldr	r4, [r0, #0]
 8006de8:	fa03 f506 	lsl.w	r5, r3, r6
 8006dec:	432c      	orrs	r4, r5
 8006dee:	40d3      	lsrs	r3, r2
 8006df0:	6004      	str	r4, [r0, #0]
 8006df2:	f840 3f04 	str.w	r3, [r0, #4]!
 8006df6:	4288      	cmp	r0, r1
 8006df8:	d3f4      	bcc.n	8006de4 <L_shift+0xc>
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}

08006dfc <__match>:
 8006dfc:	b530      	push	{r4, r5, lr}
 8006dfe:	6803      	ldr	r3, [r0, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e06:	b914      	cbnz	r4, 8006e0e <__match+0x12>
 8006e08:	6003      	str	r3, [r0, #0]
 8006e0a:	2001      	movs	r0, #1
 8006e0c:	bd30      	pop	{r4, r5, pc}
 8006e0e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e12:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006e16:	2d19      	cmp	r5, #25
 8006e18:	bf98      	it	ls
 8006e1a:	3220      	addls	r2, #32
 8006e1c:	42a2      	cmp	r2, r4
 8006e1e:	d0f0      	beq.n	8006e02 <__match+0x6>
 8006e20:	2000      	movs	r0, #0
 8006e22:	e7f3      	b.n	8006e0c <__match+0x10>

08006e24 <__hexnan>:
 8006e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e28:	680b      	ldr	r3, [r1, #0]
 8006e2a:	115e      	asrs	r6, r3, #5
 8006e2c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006e30:	f013 031f 	ands.w	r3, r3, #31
 8006e34:	b087      	sub	sp, #28
 8006e36:	bf18      	it	ne
 8006e38:	3604      	addne	r6, #4
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	1f37      	subs	r7, r6, #4
 8006e3e:	4690      	mov	r8, r2
 8006e40:	6802      	ldr	r2, [r0, #0]
 8006e42:	9301      	str	r3, [sp, #4]
 8006e44:	4682      	mov	sl, r0
 8006e46:	f846 5c04 	str.w	r5, [r6, #-4]
 8006e4a:	46b9      	mov	r9, r7
 8006e4c:	463c      	mov	r4, r7
 8006e4e:	9502      	str	r5, [sp, #8]
 8006e50:	46ab      	mov	fp, r5
 8006e52:	7851      	ldrb	r1, [r2, #1]
 8006e54:	1c53      	adds	r3, r2, #1
 8006e56:	9303      	str	r3, [sp, #12]
 8006e58:	b341      	cbz	r1, 8006eac <__hexnan+0x88>
 8006e5a:	4608      	mov	r0, r1
 8006e5c:	9205      	str	r2, [sp, #20]
 8006e5e:	9104      	str	r1, [sp, #16]
 8006e60:	f7ff fd5f 	bl	8006922 <__hexdig_fun>
 8006e64:	2800      	cmp	r0, #0
 8006e66:	d14f      	bne.n	8006f08 <__hexnan+0xe4>
 8006e68:	9904      	ldr	r1, [sp, #16]
 8006e6a:	9a05      	ldr	r2, [sp, #20]
 8006e6c:	2920      	cmp	r1, #32
 8006e6e:	d818      	bhi.n	8006ea2 <__hexnan+0x7e>
 8006e70:	9b02      	ldr	r3, [sp, #8]
 8006e72:	459b      	cmp	fp, r3
 8006e74:	dd13      	ble.n	8006e9e <__hexnan+0x7a>
 8006e76:	454c      	cmp	r4, r9
 8006e78:	d206      	bcs.n	8006e88 <__hexnan+0x64>
 8006e7a:	2d07      	cmp	r5, #7
 8006e7c:	dc04      	bgt.n	8006e88 <__hexnan+0x64>
 8006e7e:	462a      	mov	r2, r5
 8006e80:	4649      	mov	r1, r9
 8006e82:	4620      	mov	r0, r4
 8006e84:	f7ff ffa8 	bl	8006dd8 <L_shift>
 8006e88:	4544      	cmp	r4, r8
 8006e8a:	d950      	bls.n	8006f2e <__hexnan+0x10a>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	f1a4 0904 	sub.w	r9, r4, #4
 8006e92:	f844 3c04 	str.w	r3, [r4, #-4]
 8006e96:	f8cd b008 	str.w	fp, [sp, #8]
 8006e9a:	464c      	mov	r4, r9
 8006e9c:	461d      	mov	r5, r3
 8006e9e:	9a03      	ldr	r2, [sp, #12]
 8006ea0:	e7d7      	b.n	8006e52 <__hexnan+0x2e>
 8006ea2:	2929      	cmp	r1, #41	; 0x29
 8006ea4:	d156      	bne.n	8006f54 <__hexnan+0x130>
 8006ea6:	3202      	adds	r2, #2
 8006ea8:	f8ca 2000 	str.w	r2, [sl]
 8006eac:	f1bb 0f00 	cmp.w	fp, #0
 8006eb0:	d050      	beq.n	8006f54 <__hexnan+0x130>
 8006eb2:	454c      	cmp	r4, r9
 8006eb4:	d206      	bcs.n	8006ec4 <__hexnan+0xa0>
 8006eb6:	2d07      	cmp	r5, #7
 8006eb8:	dc04      	bgt.n	8006ec4 <__hexnan+0xa0>
 8006eba:	462a      	mov	r2, r5
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	f7ff ff8a 	bl	8006dd8 <L_shift>
 8006ec4:	4544      	cmp	r4, r8
 8006ec6:	d934      	bls.n	8006f32 <__hexnan+0x10e>
 8006ec8:	f1a8 0204 	sub.w	r2, r8, #4
 8006ecc:	4623      	mov	r3, r4
 8006ece:	f853 1b04 	ldr.w	r1, [r3], #4
 8006ed2:	f842 1f04 	str.w	r1, [r2, #4]!
 8006ed6:	429f      	cmp	r7, r3
 8006ed8:	d2f9      	bcs.n	8006ece <__hexnan+0xaa>
 8006eda:	1b3b      	subs	r3, r7, r4
 8006edc:	f023 0303 	bic.w	r3, r3, #3
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	3401      	adds	r4, #1
 8006ee4:	3e03      	subs	r6, #3
 8006ee6:	42b4      	cmp	r4, r6
 8006ee8:	bf88      	it	hi
 8006eea:	2304      	movhi	r3, #4
 8006eec:	4443      	add	r3, r8
 8006eee:	2200      	movs	r2, #0
 8006ef0:	f843 2b04 	str.w	r2, [r3], #4
 8006ef4:	429f      	cmp	r7, r3
 8006ef6:	d2fb      	bcs.n	8006ef0 <__hexnan+0xcc>
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	b91b      	cbnz	r3, 8006f04 <__hexnan+0xe0>
 8006efc:	4547      	cmp	r7, r8
 8006efe:	d127      	bne.n	8006f50 <__hexnan+0x12c>
 8006f00:	2301      	movs	r3, #1
 8006f02:	603b      	str	r3, [r7, #0]
 8006f04:	2005      	movs	r0, #5
 8006f06:	e026      	b.n	8006f56 <__hexnan+0x132>
 8006f08:	3501      	adds	r5, #1
 8006f0a:	2d08      	cmp	r5, #8
 8006f0c:	f10b 0b01 	add.w	fp, fp, #1
 8006f10:	dd06      	ble.n	8006f20 <__hexnan+0xfc>
 8006f12:	4544      	cmp	r4, r8
 8006f14:	d9c3      	bls.n	8006e9e <__hexnan+0x7a>
 8006f16:	2300      	movs	r3, #0
 8006f18:	f844 3c04 	str.w	r3, [r4, #-4]
 8006f1c:	2501      	movs	r5, #1
 8006f1e:	3c04      	subs	r4, #4
 8006f20:	6822      	ldr	r2, [r4, #0]
 8006f22:	f000 000f 	and.w	r0, r0, #15
 8006f26:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006f2a:	6022      	str	r2, [r4, #0]
 8006f2c:	e7b7      	b.n	8006e9e <__hexnan+0x7a>
 8006f2e:	2508      	movs	r5, #8
 8006f30:	e7b5      	b.n	8006e9e <__hexnan+0x7a>
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0df      	beq.n	8006ef8 <__hexnan+0xd4>
 8006f38:	f04f 32ff 	mov.w	r2, #4294967295
 8006f3c:	f1c3 0320 	rsb	r3, r3, #32
 8006f40:	fa22 f303 	lsr.w	r3, r2, r3
 8006f44:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f48:	401a      	ands	r2, r3
 8006f4a:	f846 2c04 	str.w	r2, [r6, #-4]
 8006f4e:	e7d3      	b.n	8006ef8 <__hexnan+0xd4>
 8006f50:	3f04      	subs	r7, #4
 8006f52:	e7d1      	b.n	8006ef8 <__hexnan+0xd4>
 8006f54:	2004      	movs	r0, #4
 8006f56:	b007      	add	sp, #28
 8006f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f5c <_localeconv_r>:
 8006f5c:	4800      	ldr	r0, [pc, #0]	; (8006f60 <_localeconv_r+0x4>)
 8006f5e:	4770      	bx	lr
 8006f60:	20000164 	.word	0x20000164

08006f64 <__retarget_lock_init_recursive>:
 8006f64:	4770      	bx	lr

08006f66 <__retarget_lock_acquire_recursive>:
 8006f66:	4770      	bx	lr

08006f68 <__retarget_lock_release_recursive>:
 8006f68:	4770      	bx	lr
	...

08006f6c <_lseek_r>:
 8006f6c:	b538      	push	{r3, r4, r5, lr}
 8006f6e:	4d07      	ldr	r5, [pc, #28]	; (8006f8c <_lseek_r+0x20>)
 8006f70:	4604      	mov	r4, r0
 8006f72:	4608      	mov	r0, r1
 8006f74:	4611      	mov	r1, r2
 8006f76:	2200      	movs	r2, #0
 8006f78:	602a      	str	r2, [r5, #0]
 8006f7a:	461a      	mov	r2, r3
 8006f7c:	f7fa fc68 	bl	8001850 <_lseek>
 8006f80:	1c43      	adds	r3, r0, #1
 8006f82:	d102      	bne.n	8006f8a <_lseek_r+0x1e>
 8006f84:	682b      	ldr	r3, [r5, #0]
 8006f86:	b103      	cbz	r3, 8006f8a <_lseek_r+0x1e>
 8006f88:	6023      	str	r3, [r4, #0]
 8006f8a:	bd38      	pop	{r3, r4, r5, pc}
 8006f8c:	20000378 	.word	0x20000378

08006f90 <malloc>:
 8006f90:	4b02      	ldr	r3, [pc, #8]	; (8006f9c <malloc+0xc>)
 8006f92:	4601      	mov	r1, r0
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	f000 bd67 	b.w	8007a68 <_malloc_r>
 8006f9a:	bf00      	nop
 8006f9c:	2000000c 	.word	0x2000000c

08006fa0 <__ascii_mbtowc>:
 8006fa0:	b082      	sub	sp, #8
 8006fa2:	b901      	cbnz	r1, 8006fa6 <__ascii_mbtowc+0x6>
 8006fa4:	a901      	add	r1, sp, #4
 8006fa6:	b142      	cbz	r2, 8006fba <__ascii_mbtowc+0x1a>
 8006fa8:	b14b      	cbz	r3, 8006fbe <__ascii_mbtowc+0x1e>
 8006faa:	7813      	ldrb	r3, [r2, #0]
 8006fac:	600b      	str	r3, [r1, #0]
 8006fae:	7812      	ldrb	r2, [r2, #0]
 8006fb0:	1e10      	subs	r0, r2, #0
 8006fb2:	bf18      	it	ne
 8006fb4:	2001      	movne	r0, #1
 8006fb6:	b002      	add	sp, #8
 8006fb8:	4770      	bx	lr
 8006fba:	4610      	mov	r0, r2
 8006fbc:	e7fb      	b.n	8006fb6 <__ascii_mbtowc+0x16>
 8006fbe:	f06f 0001 	mvn.w	r0, #1
 8006fc2:	e7f8      	b.n	8006fb6 <__ascii_mbtowc+0x16>

08006fc4 <memcpy>:
 8006fc4:	440a      	add	r2, r1
 8006fc6:	4291      	cmp	r1, r2
 8006fc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fcc:	d100      	bne.n	8006fd0 <memcpy+0xc>
 8006fce:	4770      	bx	lr
 8006fd0:	b510      	push	{r4, lr}
 8006fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fd6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fda:	4291      	cmp	r1, r2
 8006fdc:	d1f9      	bne.n	8006fd2 <memcpy+0xe>
 8006fde:	bd10      	pop	{r4, pc}

08006fe0 <_Balloc>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	b976      	cbnz	r6, 8007008 <_Balloc+0x28>
 8006fea:	2010      	movs	r0, #16
 8006fec:	f7ff ffd0 	bl	8006f90 <malloc>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	6260      	str	r0, [r4, #36]	; 0x24
 8006ff4:	b920      	cbnz	r0, 8007000 <_Balloc+0x20>
 8006ff6:	4b18      	ldr	r3, [pc, #96]	; (8007058 <_Balloc+0x78>)
 8006ff8:	4818      	ldr	r0, [pc, #96]	; (800705c <_Balloc+0x7c>)
 8006ffa:	2166      	movs	r1, #102	; 0x66
 8006ffc:	f001 fd60 	bl	8008ac0 <__assert_func>
 8007000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007004:	6006      	str	r6, [r0, #0]
 8007006:	60c6      	str	r6, [r0, #12]
 8007008:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800700a:	68f3      	ldr	r3, [r6, #12]
 800700c:	b183      	cbz	r3, 8007030 <_Balloc+0x50>
 800700e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007016:	b9b8      	cbnz	r0, 8007048 <_Balloc+0x68>
 8007018:	2101      	movs	r1, #1
 800701a:	fa01 f605 	lsl.w	r6, r1, r5
 800701e:	1d72      	adds	r2, r6, #5
 8007020:	0092      	lsls	r2, r2, #2
 8007022:	4620      	mov	r0, r4
 8007024:	f000 fc9d 	bl	8007962 <_calloc_r>
 8007028:	b160      	cbz	r0, 8007044 <_Balloc+0x64>
 800702a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800702e:	e00e      	b.n	800704e <_Balloc+0x6e>
 8007030:	2221      	movs	r2, #33	; 0x21
 8007032:	2104      	movs	r1, #4
 8007034:	4620      	mov	r0, r4
 8007036:	f000 fc94 	bl	8007962 <_calloc_r>
 800703a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800703c:	60f0      	str	r0, [r6, #12]
 800703e:	68db      	ldr	r3, [r3, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d1e4      	bne.n	800700e <_Balloc+0x2e>
 8007044:	2000      	movs	r0, #0
 8007046:	bd70      	pop	{r4, r5, r6, pc}
 8007048:	6802      	ldr	r2, [r0, #0]
 800704a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800704e:	2300      	movs	r3, #0
 8007050:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007054:	e7f7      	b.n	8007046 <_Balloc+0x66>
 8007056:	bf00      	nop
 8007058:	08009196 	.word	0x08009196
 800705c:	080092f8 	.word	0x080092f8

08007060 <_Bfree>:
 8007060:	b570      	push	{r4, r5, r6, lr}
 8007062:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007064:	4605      	mov	r5, r0
 8007066:	460c      	mov	r4, r1
 8007068:	b976      	cbnz	r6, 8007088 <_Bfree+0x28>
 800706a:	2010      	movs	r0, #16
 800706c:	f7ff ff90 	bl	8006f90 <malloc>
 8007070:	4602      	mov	r2, r0
 8007072:	6268      	str	r0, [r5, #36]	; 0x24
 8007074:	b920      	cbnz	r0, 8007080 <_Bfree+0x20>
 8007076:	4b09      	ldr	r3, [pc, #36]	; (800709c <_Bfree+0x3c>)
 8007078:	4809      	ldr	r0, [pc, #36]	; (80070a0 <_Bfree+0x40>)
 800707a:	218a      	movs	r1, #138	; 0x8a
 800707c:	f001 fd20 	bl	8008ac0 <__assert_func>
 8007080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007084:	6006      	str	r6, [r0, #0]
 8007086:	60c6      	str	r6, [r0, #12]
 8007088:	b13c      	cbz	r4, 800709a <_Bfree+0x3a>
 800708a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800708c:	6862      	ldr	r2, [r4, #4]
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007094:	6021      	str	r1, [r4, #0]
 8007096:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800709a:	bd70      	pop	{r4, r5, r6, pc}
 800709c:	08009196 	.word	0x08009196
 80070a0:	080092f8 	.word	0x080092f8

080070a4 <__multadd>:
 80070a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070a8:	690d      	ldr	r5, [r1, #16]
 80070aa:	4607      	mov	r7, r0
 80070ac:	460c      	mov	r4, r1
 80070ae:	461e      	mov	r6, r3
 80070b0:	f101 0c14 	add.w	ip, r1, #20
 80070b4:	2000      	movs	r0, #0
 80070b6:	f8dc 3000 	ldr.w	r3, [ip]
 80070ba:	b299      	uxth	r1, r3
 80070bc:	fb02 6101 	mla	r1, r2, r1, r6
 80070c0:	0c1e      	lsrs	r6, r3, #16
 80070c2:	0c0b      	lsrs	r3, r1, #16
 80070c4:	fb02 3306 	mla	r3, r2, r6, r3
 80070c8:	b289      	uxth	r1, r1
 80070ca:	3001      	adds	r0, #1
 80070cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070d0:	4285      	cmp	r5, r0
 80070d2:	f84c 1b04 	str.w	r1, [ip], #4
 80070d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070da:	dcec      	bgt.n	80070b6 <__multadd+0x12>
 80070dc:	b30e      	cbz	r6, 8007122 <__multadd+0x7e>
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	42ab      	cmp	r3, r5
 80070e2:	dc19      	bgt.n	8007118 <__multadd+0x74>
 80070e4:	6861      	ldr	r1, [r4, #4]
 80070e6:	4638      	mov	r0, r7
 80070e8:	3101      	adds	r1, #1
 80070ea:	f7ff ff79 	bl	8006fe0 <_Balloc>
 80070ee:	4680      	mov	r8, r0
 80070f0:	b928      	cbnz	r0, 80070fe <__multadd+0x5a>
 80070f2:	4602      	mov	r2, r0
 80070f4:	4b0c      	ldr	r3, [pc, #48]	; (8007128 <__multadd+0x84>)
 80070f6:	480d      	ldr	r0, [pc, #52]	; (800712c <__multadd+0x88>)
 80070f8:	21b5      	movs	r1, #181	; 0xb5
 80070fa:	f001 fce1 	bl	8008ac0 <__assert_func>
 80070fe:	6922      	ldr	r2, [r4, #16]
 8007100:	3202      	adds	r2, #2
 8007102:	f104 010c 	add.w	r1, r4, #12
 8007106:	0092      	lsls	r2, r2, #2
 8007108:	300c      	adds	r0, #12
 800710a:	f7ff ff5b 	bl	8006fc4 <memcpy>
 800710e:	4621      	mov	r1, r4
 8007110:	4638      	mov	r0, r7
 8007112:	f7ff ffa5 	bl	8007060 <_Bfree>
 8007116:	4644      	mov	r4, r8
 8007118:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800711c:	3501      	adds	r5, #1
 800711e:	615e      	str	r6, [r3, #20]
 8007120:	6125      	str	r5, [r4, #16]
 8007122:	4620      	mov	r0, r4
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	08009208 	.word	0x08009208
 800712c:	080092f8 	.word	0x080092f8

08007130 <__s2b>:
 8007130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007134:	460c      	mov	r4, r1
 8007136:	4615      	mov	r5, r2
 8007138:	461f      	mov	r7, r3
 800713a:	2209      	movs	r2, #9
 800713c:	3308      	adds	r3, #8
 800713e:	4606      	mov	r6, r0
 8007140:	fb93 f3f2 	sdiv	r3, r3, r2
 8007144:	2100      	movs	r1, #0
 8007146:	2201      	movs	r2, #1
 8007148:	429a      	cmp	r2, r3
 800714a:	db09      	blt.n	8007160 <__s2b+0x30>
 800714c:	4630      	mov	r0, r6
 800714e:	f7ff ff47 	bl	8006fe0 <_Balloc>
 8007152:	b940      	cbnz	r0, 8007166 <__s2b+0x36>
 8007154:	4602      	mov	r2, r0
 8007156:	4b19      	ldr	r3, [pc, #100]	; (80071bc <__s2b+0x8c>)
 8007158:	4819      	ldr	r0, [pc, #100]	; (80071c0 <__s2b+0x90>)
 800715a:	21ce      	movs	r1, #206	; 0xce
 800715c:	f001 fcb0 	bl	8008ac0 <__assert_func>
 8007160:	0052      	lsls	r2, r2, #1
 8007162:	3101      	adds	r1, #1
 8007164:	e7f0      	b.n	8007148 <__s2b+0x18>
 8007166:	9b08      	ldr	r3, [sp, #32]
 8007168:	6143      	str	r3, [r0, #20]
 800716a:	2d09      	cmp	r5, #9
 800716c:	f04f 0301 	mov.w	r3, #1
 8007170:	6103      	str	r3, [r0, #16]
 8007172:	dd16      	ble.n	80071a2 <__s2b+0x72>
 8007174:	f104 0909 	add.w	r9, r4, #9
 8007178:	46c8      	mov	r8, r9
 800717a:	442c      	add	r4, r5
 800717c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007180:	4601      	mov	r1, r0
 8007182:	3b30      	subs	r3, #48	; 0x30
 8007184:	220a      	movs	r2, #10
 8007186:	4630      	mov	r0, r6
 8007188:	f7ff ff8c 	bl	80070a4 <__multadd>
 800718c:	45a0      	cmp	r8, r4
 800718e:	d1f5      	bne.n	800717c <__s2b+0x4c>
 8007190:	f1a5 0408 	sub.w	r4, r5, #8
 8007194:	444c      	add	r4, r9
 8007196:	1b2d      	subs	r5, r5, r4
 8007198:	1963      	adds	r3, r4, r5
 800719a:	42bb      	cmp	r3, r7
 800719c:	db04      	blt.n	80071a8 <__s2b+0x78>
 800719e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071a2:	340a      	adds	r4, #10
 80071a4:	2509      	movs	r5, #9
 80071a6:	e7f6      	b.n	8007196 <__s2b+0x66>
 80071a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80071ac:	4601      	mov	r1, r0
 80071ae:	3b30      	subs	r3, #48	; 0x30
 80071b0:	220a      	movs	r2, #10
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff ff76 	bl	80070a4 <__multadd>
 80071b8:	e7ee      	b.n	8007198 <__s2b+0x68>
 80071ba:	bf00      	nop
 80071bc:	08009208 	.word	0x08009208
 80071c0:	080092f8 	.word	0x080092f8

080071c4 <__hi0bits>:
 80071c4:	0c03      	lsrs	r3, r0, #16
 80071c6:	041b      	lsls	r3, r3, #16
 80071c8:	b9d3      	cbnz	r3, 8007200 <__hi0bits+0x3c>
 80071ca:	0400      	lsls	r0, r0, #16
 80071cc:	2310      	movs	r3, #16
 80071ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80071d2:	bf04      	itt	eq
 80071d4:	0200      	lsleq	r0, r0, #8
 80071d6:	3308      	addeq	r3, #8
 80071d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80071dc:	bf04      	itt	eq
 80071de:	0100      	lsleq	r0, r0, #4
 80071e0:	3304      	addeq	r3, #4
 80071e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80071e6:	bf04      	itt	eq
 80071e8:	0080      	lsleq	r0, r0, #2
 80071ea:	3302      	addeq	r3, #2
 80071ec:	2800      	cmp	r0, #0
 80071ee:	db05      	blt.n	80071fc <__hi0bits+0x38>
 80071f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80071f4:	f103 0301 	add.w	r3, r3, #1
 80071f8:	bf08      	it	eq
 80071fa:	2320      	moveq	r3, #32
 80071fc:	4618      	mov	r0, r3
 80071fe:	4770      	bx	lr
 8007200:	2300      	movs	r3, #0
 8007202:	e7e4      	b.n	80071ce <__hi0bits+0xa>

08007204 <__lo0bits>:
 8007204:	6803      	ldr	r3, [r0, #0]
 8007206:	f013 0207 	ands.w	r2, r3, #7
 800720a:	4601      	mov	r1, r0
 800720c:	d00b      	beq.n	8007226 <__lo0bits+0x22>
 800720e:	07da      	lsls	r2, r3, #31
 8007210:	d423      	bmi.n	800725a <__lo0bits+0x56>
 8007212:	0798      	lsls	r0, r3, #30
 8007214:	bf49      	itett	mi
 8007216:	085b      	lsrmi	r3, r3, #1
 8007218:	089b      	lsrpl	r3, r3, #2
 800721a:	2001      	movmi	r0, #1
 800721c:	600b      	strmi	r3, [r1, #0]
 800721e:	bf5c      	itt	pl
 8007220:	600b      	strpl	r3, [r1, #0]
 8007222:	2002      	movpl	r0, #2
 8007224:	4770      	bx	lr
 8007226:	b298      	uxth	r0, r3
 8007228:	b9a8      	cbnz	r0, 8007256 <__lo0bits+0x52>
 800722a:	0c1b      	lsrs	r3, r3, #16
 800722c:	2010      	movs	r0, #16
 800722e:	b2da      	uxtb	r2, r3
 8007230:	b90a      	cbnz	r2, 8007236 <__lo0bits+0x32>
 8007232:	3008      	adds	r0, #8
 8007234:	0a1b      	lsrs	r3, r3, #8
 8007236:	071a      	lsls	r2, r3, #28
 8007238:	bf04      	itt	eq
 800723a:	091b      	lsreq	r3, r3, #4
 800723c:	3004      	addeq	r0, #4
 800723e:	079a      	lsls	r2, r3, #30
 8007240:	bf04      	itt	eq
 8007242:	089b      	lsreq	r3, r3, #2
 8007244:	3002      	addeq	r0, #2
 8007246:	07da      	lsls	r2, r3, #31
 8007248:	d403      	bmi.n	8007252 <__lo0bits+0x4e>
 800724a:	085b      	lsrs	r3, r3, #1
 800724c:	f100 0001 	add.w	r0, r0, #1
 8007250:	d005      	beq.n	800725e <__lo0bits+0x5a>
 8007252:	600b      	str	r3, [r1, #0]
 8007254:	4770      	bx	lr
 8007256:	4610      	mov	r0, r2
 8007258:	e7e9      	b.n	800722e <__lo0bits+0x2a>
 800725a:	2000      	movs	r0, #0
 800725c:	4770      	bx	lr
 800725e:	2020      	movs	r0, #32
 8007260:	4770      	bx	lr
	...

08007264 <__i2b>:
 8007264:	b510      	push	{r4, lr}
 8007266:	460c      	mov	r4, r1
 8007268:	2101      	movs	r1, #1
 800726a:	f7ff feb9 	bl	8006fe0 <_Balloc>
 800726e:	4602      	mov	r2, r0
 8007270:	b928      	cbnz	r0, 800727e <__i2b+0x1a>
 8007272:	4b05      	ldr	r3, [pc, #20]	; (8007288 <__i2b+0x24>)
 8007274:	4805      	ldr	r0, [pc, #20]	; (800728c <__i2b+0x28>)
 8007276:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800727a:	f001 fc21 	bl	8008ac0 <__assert_func>
 800727e:	2301      	movs	r3, #1
 8007280:	6144      	str	r4, [r0, #20]
 8007282:	6103      	str	r3, [r0, #16]
 8007284:	bd10      	pop	{r4, pc}
 8007286:	bf00      	nop
 8007288:	08009208 	.word	0x08009208
 800728c:	080092f8 	.word	0x080092f8

08007290 <__multiply>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	4691      	mov	r9, r2
 8007296:	690a      	ldr	r2, [r1, #16]
 8007298:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800729c:	429a      	cmp	r2, r3
 800729e:	bfb8      	it	lt
 80072a0:	460b      	movlt	r3, r1
 80072a2:	460c      	mov	r4, r1
 80072a4:	bfbc      	itt	lt
 80072a6:	464c      	movlt	r4, r9
 80072a8:	4699      	movlt	r9, r3
 80072aa:	6927      	ldr	r7, [r4, #16]
 80072ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80072b0:	68a3      	ldr	r3, [r4, #8]
 80072b2:	6861      	ldr	r1, [r4, #4]
 80072b4:	eb07 060a 	add.w	r6, r7, sl
 80072b8:	42b3      	cmp	r3, r6
 80072ba:	b085      	sub	sp, #20
 80072bc:	bfb8      	it	lt
 80072be:	3101      	addlt	r1, #1
 80072c0:	f7ff fe8e 	bl	8006fe0 <_Balloc>
 80072c4:	b930      	cbnz	r0, 80072d4 <__multiply+0x44>
 80072c6:	4602      	mov	r2, r0
 80072c8:	4b44      	ldr	r3, [pc, #272]	; (80073dc <__multiply+0x14c>)
 80072ca:	4845      	ldr	r0, [pc, #276]	; (80073e0 <__multiply+0x150>)
 80072cc:	f240 115d 	movw	r1, #349	; 0x15d
 80072d0:	f001 fbf6 	bl	8008ac0 <__assert_func>
 80072d4:	f100 0514 	add.w	r5, r0, #20
 80072d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80072dc:	462b      	mov	r3, r5
 80072de:	2200      	movs	r2, #0
 80072e0:	4543      	cmp	r3, r8
 80072e2:	d321      	bcc.n	8007328 <__multiply+0x98>
 80072e4:	f104 0314 	add.w	r3, r4, #20
 80072e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80072ec:	f109 0314 	add.w	r3, r9, #20
 80072f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80072f4:	9202      	str	r2, [sp, #8]
 80072f6:	1b3a      	subs	r2, r7, r4
 80072f8:	3a15      	subs	r2, #21
 80072fa:	f022 0203 	bic.w	r2, r2, #3
 80072fe:	3204      	adds	r2, #4
 8007300:	f104 0115 	add.w	r1, r4, #21
 8007304:	428f      	cmp	r7, r1
 8007306:	bf38      	it	cc
 8007308:	2204      	movcc	r2, #4
 800730a:	9201      	str	r2, [sp, #4]
 800730c:	9a02      	ldr	r2, [sp, #8]
 800730e:	9303      	str	r3, [sp, #12]
 8007310:	429a      	cmp	r2, r3
 8007312:	d80c      	bhi.n	800732e <__multiply+0x9e>
 8007314:	2e00      	cmp	r6, #0
 8007316:	dd03      	ble.n	8007320 <__multiply+0x90>
 8007318:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05a      	beq.n	80073d6 <__multiply+0x146>
 8007320:	6106      	str	r6, [r0, #16]
 8007322:	b005      	add	sp, #20
 8007324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007328:	f843 2b04 	str.w	r2, [r3], #4
 800732c:	e7d8      	b.n	80072e0 <__multiply+0x50>
 800732e:	f8b3 a000 	ldrh.w	sl, [r3]
 8007332:	f1ba 0f00 	cmp.w	sl, #0
 8007336:	d024      	beq.n	8007382 <__multiply+0xf2>
 8007338:	f104 0e14 	add.w	lr, r4, #20
 800733c:	46a9      	mov	r9, r5
 800733e:	f04f 0c00 	mov.w	ip, #0
 8007342:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007346:	f8d9 1000 	ldr.w	r1, [r9]
 800734a:	fa1f fb82 	uxth.w	fp, r2
 800734e:	b289      	uxth	r1, r1
 8007350:	fb0a 110b 	mla	r1, sl, fp, r1
 8007354:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007358:	f8d9 2000 	ldr.w	r2, [r9]
 800735c:	4461      	add	r1, ip
 800735e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007362:	fb0a c20b 	mla	r2, sl, fp, ip
 8007366:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800736a:	b289      	uxth	r1, r1
 800736c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007370:	4577      	cmp	r7, lr
 8007372:	f849 1b04 	str.w	r1, [r9], #4
 8007376:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800737a:	d8e2      	bhi.n	8007342 <__multiply+0xb2>
 800737c:	9a01      	ldr	r2, [sp, #4]
 800737e:	f845 c002 	str.w	ip, [r5, r2]
 8007382:	9a03      	ldr	r2, [sp, #12]
 8007384:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007388:	3304      	adds	r3, #4
 800738a:	f1b9 0f00 	cmp.w	r9, #0
 800738e:	d020      	beq.n	80073d2 <__multiply+0x142>
 8007390:	6829      	ldr	r1, [r5, #0]
 8007392:	f104 0c14 	add.w	ip, r4, #20
 8007396:	46ae      	mov	lr, r5
 8007398:	f04f 0a00 	mov.w	sl, #0
 800739c:	f8bc b000 	ldrh.w	fp, [ip]
 80073a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80073a4:	fb09 220b 	mla	r2, r9, fp, r2
 80073a8:	4492      	add	sl, r2
 80073aa:	b289      	uxth	r1, r1
 80073ac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80073b0:	f84e 1b04 	str.w	r1, [lr], #4
 80073b4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80073b8:	f8be 1000 	ldrh.w	r1, [lr]
 80073bc:	0c12      	lsrs	r2, r2, #16
 80073be:	fb09 1102 	mla	r1, r9, r2, r1
 80073c2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80073c6:	4567      	cmp	r7, ip
 80073c8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80073cc:	d8e6      	bhi.n	800739c <__multiply+0x10c>
 80073ce:	9a01      	ldr	r2, [sp, #4]
 80073d0:	50a9      	str	r1, [r5, r2]
 80073d2:	3504      	adds	r5, #4
 80073d4:	e79a      	b.n	800730c <__multiply+0x7c>
 80073d6:	3e01      	subs	r6, #1
 80073d8:	e79c      	b.n	8007314 <__multiply+0x84>
 80073da:	bf00      	nop
 80073dc:	08009208 	.word	0x08009208
 80073e0:	080092f8 	.word	0x080092f8

080073e4 <__pow5mult>:
 80073e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073e8:	4615      	mov	r5, r2
 80073ea:	f012 0203 	ands.w	r2, r2, #3
 80073ee:	4606      	mov	r6, r0
 80073f0:	460f      	mov	r7, r1
 80073f2:	d007      	beq.n	8007404 <__pow5mult+0x20>
 80073f4:	4c25      	ldr	r4, [pc, #148]	; (800748c <__pow5mult+0xa8>)
 80073f6:	3a01      	subs	r2, #1
 80073f8:	2300      	movs	r3, #0
 80073fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80073fe:	f7ff fe51 	bl	80070a4 <__multadd>
 8007402:	4607      	mov	r7, r0
 8007404:	10ad      	asrs	r5, r5, #2
 8007406:	d03d      	beq.n	8007484 <__pow5mult+0xa0>
 8007408:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800740a:	b97c      	cbnz	r4, 800742c <__pow5mult+0x48>
 800740c:	2010      	movs	r0, #16
 800740e:	f7ff fdbf 	bl	8006f90 <malloc>
 8007412:	4602      	mov	r2, r0
 8007414:	6270      	str	r0, [r6, #36]	; 0x24
 8007416:	b928      	cbnz	r0, 8007424 <__pow5mult+0x40>
 8007418:	4b1d      	ldr	r3, [pc, #116]	; (8007490 <__pow5mult+0xac>)
 800741a:	481e      	ldr	r0, [pc, #120]	; (8007494 <__pow5mult+0xb0>)
 800741c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007420:	f001 fb4e 	bl	8008ac0 <__assert_func>
 8007424:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007428:	6004      	str	r4, [r0, #0]
 800742a:	60c4      	str	r4, [r0, #12]
 800742c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007430:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007434:	b94c      	cbnz	r4, 800744a <__pow5mult+0x66>
 8007436:	f240 2171 	movw	r1, #625	; 0x271
 800743a:	4630      	mov	r0, r6
 800743c:	f7ff ff12 	bl	8007264 <__i2b>
 8007440:	2300      	movs	r3, #0
 8007442:	f8c8 0008 	str.w	r0, [r8, #8]
 8007446:	4604      	mov	r4, r0
 8007448:	6003      	str	r3, [r0, #0]
 800744a:	f04f 0900 	mov.w	r9, #0
 800744e:	07eb      	lsls	r3, r5, #31
 8007450:	d50a      	bpl.n	8007468 <__pow5mult+0x84>
 8007452:	4639      	mov	r1, r7
 8007454:	4622      	mov	r2, r4
 8007456:	4630      	mov	r0, r6
 8007458:	f7ff ff1a 	bl	8007290 <__multiply>
 800745c:	4639      	mov	r1, r7
 800745e:	4680      	mov	r8, r0
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff fdfd 	bl	8007060 <_Bfree>
 8007466:	4647      	mov	r7, r8
 8007468:	106d      	asrs	r5, r5, #1
 800746a:	d00b      	beq.n	8007484 <__pow5mult+0xa0>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	b938      	cbnz	r0, 8007480 <__pow5mult+0x9c>
 8007470:	4622      	mov	r2, r4
 8007472:	4621      	mov	r1, r4
 8007474:	4630      	mov	r0, r6
 8007476:	f7ff ff0b 	bl	8007290 <__multiply>
 800747a:	6020      	str	r0, [r4, #0]
 800747c:	f8c0 9000 	str.w	r9, [r0]
 8007480:	4604      	mov	r4, r0
 8007482:	e7e4      	b.n	800744e <__pow5mult+0x6a>
 8007484:	4638      	mov	r0, r7
 8007486:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800748a:	bf00      	nop
 800748c:	08009448 	.word	0x08009448
 8007490:	08009196 	.word	0x08009196
 8007494:	080092f8 	.word	0x080092f8

08007498 <__lshift>:
 8007498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800749c:	460c      	mov	r4, r1
 800749e:	6849      	ldr	r1, [r1, #4]
 80074a0:	6923      	ldr	r3, [r4, #16]
 80074a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074a6:	68a3      	ldr	r3, [r4, #8]
 80074a8:	4607      	mov	r7, r0
 80074aa:	4691      	mov	r9, r2
 80074ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074b0:	f108 0601 	add.w	r6, r8, #1
 80074b4:	42b3      	cmp	r3, r6
 80074b6:	db0b      	blt.n	80074d0 <__lshift+0x38>
 80074b8:	4638      	mov	r0, r7
 80074ba:	f7ff fd91 	bl	8006fe0 <_Balloc>
 80074be:	4605      	mov	r5, r0
 80074c0:	b948      	cbnz	r0, 80074d6 <__lshift+0x3e>
 80074c2:	4602      	mov	r2, r0
 80074c4:	4b2a      	ldr	r3, [pc, #168]	; (8007570 <__lshift+0xd8>)
 80074c6:	482b      	ldr	r0, [pc, #172]	; (8007574 <__lshift+0xdc>)
 80074c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80074cc:	f001 faf8 	bl	8008ac0 <__assert_func>
 80074d0:	3101      	adds	r1, #1
 80074d2:	005b      	lsls	r3, r3, #1
 80074d4:	e7ee      	b.n	80074b4 <__lshift+0x1c>
 80074d6:	2300      	movs	r3, #0
 80074d8:	f100 0114 	add.w	r1, r0, #20
 80074dc:	f100 0210 	add.w	r2, r0, #16
 80074e0:	4618      	mov	r0, r3
 80074e2:	4553      	cmp	r3, sl
 80074e4:	db37      	blt.n	8007556 <__lshift+0xbe>
 80074e6:	6920      	ldr	r0, [r4, #16]
 80074e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80074ec:	f104 0314 	add.w	r3, r4, #20
 80074f0:	f019 091f 	ands.w	r9, r9, #31
 80074f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80074f8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80074fc:	d02f      	beq.n	800755e <__lshift+0xc6>
 80074fe:	f1c9 0e20 	rsb	lr, r9, #32
 8007502:	468a      	mov	sl, r1
 8007504:	f04f 0c00 	mov.w	ip, #0
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	fa02 f209 	lsl.w	r2, r2, r9
 800750e:	ea42 020c 	orr.w	r2, r2, ip
 8007512:	f84a 2b04 	str.w	r2, [sl], #4
 8007516:	f853 2b04 	ldr.w	r2, [r3], #4
 800751a:	4298      	cmp	r0, r3
 800751c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007520:	d8f2      	bhi.n	8007508 <__lshift+0x70>
 8007522:	1b03      	subs	r3, r0, r4
 8007524:	3b15      	subs	r3, #21
 8007526:	f023 0303 	bic.w	r3, r3, #3
 800752a:	3304      	adds	r3, #4
 800752c:	f104 0215 	add.w	r2, r4, #21
 8007530:	4290      	cmp	r0, r2
 8007532:	bf38      	it	cc
 8007534:	2304      	movcc	r3, #4
 8007536:	f841 c003 	str.w	ip, [r1, r3]
 800753a:	f1bc 0f00 	cmp.w	ip, #0
 800753e:	d001      	beq.n	8007544 <__lshift+0xac>
 8007540:	f108 0602 	add.w	r6, r8, #2
 8007544:	3e01      	subs	r6, #1
 8007546:	4638      	mov	r0, r7
 8007548:	612e      	str	r6, [r5, #16]
 800754a:	4621      	mov	r1, r4
 800754c:	f7ff fd88 	bl	8007060 <_Bfree>
 8007550:	4628      	mov	r0, r5
 8007552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007556:	f842 0f04 	str.w	r0, [r2, #4]!
 800755a:	3301      	adds	r3, #1
 800755c:	e7c1      	b.n	80074e2 <__lshift+0x4a>
 800755e:	3904      	subs	r1, #4
 8007560:	f853 2b04 	ldr.w	r2, [r3], #4
 8007564:	f841 2f04 	str.w	r2, [r1, #4]!
 8007568:	4298      	cmp	r0, r3
 800756a:	d8f9      	bhi.n	8007560 <__lshift+0xc8>
 800756c:	e7ea      	b.n	8007544 <__lshift+0xac>
 800756e:	bf00      	nop
 8007570:	08009208 	.word	0x08009208
 8007574:	080092f8 	.word	0x080092f8

08007578 <__mcmp>:
 8007578:	b530      	push	{r4, r5, lr}
 800757a:	6902      	ldr	r2, [r0, #16]
 800757c:	690c      	ldr	r4, [r1, #16]
 800757e:	1b12      	subs	r2, r2, r4
 8007580:	d10e      	bne.n	80075a0 <__mcmp+0x28>
 8007582:	f100 0314 	add.w	r3, r0, #20
 8007586:	3114      	adds	r1, #20
 8007588:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800758c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007590:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007594:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007598:	42a5      	cmp	r5, r4
 800759a:	d003      	beq.n	80075a4 <__mcmp+0x2c>
 800759c:	d305      	bcc.n	80075aa <__mcmp+0x32>
 800759e:	2201      	movs	r2, #1
 80075a0:	4610      	mov	r0, r2
 80075a2:	bd30      	pop	{r4, r5, pc}
 80075a4:	4283      	cmp	r3, r0
 80075a6:	d3f3      	bcc.n	8007590 <__mcmp+0x18>
 80075a8:	e7fa      	b.n	80075a0 <__mcmp+0x28>
 80075aa:	f04f 32ff 	mov.w	r2, #4294967295
 80075ae:	e7f7      	b.n	80075a0 <__mcmp+0x28>

080075b0 <__mdiff>:
 80075b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075b4:	460c      	mov	r4, r1
 80075b6:	4606      	mov	r6, r0
 80075b8:	4611      	mov	r1, r2
 80075ba:	4620      	mov	r0, r4
 80075bc:	4690      	mov	r8, r2
 80075be:	f7ff ffdb 	bl	8007578 <__mcmp>
 80075c2:	1e05      	subs	r5, r0, #0
 80075c4:	d110      	bne.n	80075e8 <__mdiff+0x38>
 80075c6:	4629      	mov	r1, r5
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff fd09 	bl	8006fe0 <_Balloc>
 80075ce:	b930      	cbnz	r0, 80075de <__mdiff+0x2e>
 80075d0:	4b3a      	ldr	r3, [pc, #232]	; (80076bc <__mdiff+0x10c>)
 80075d2:	4602      	mov	r2, r0
 80075d4:	f240 2132 	movw	r1, #562	; 0x232
 80075d8:	4839      	ldr	r0, [pc, #228]	; (80076c0 <__mdiff+0x110>)
 80075da:	f001 fa71 	bl	8008ac0 <__assert_func>
 80075de:	2301      	movs	r3, #1
 80075e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80075e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	bfa4      	itt	ge
 80075ea:	4643      	movge	r3, r8
 80075ec:	46a0      	movge	r8, r4
 80075ee:	4630      	mov	r0, r6
 80075f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80075f4:	bfa6      	itte	ge
 80075f6:	461c      	movge	r4, r3
 80075f8:	2500      	movge	r5, #0
 80075fa:	2501      	movlt	r5, #1
 80075fc:	f7ff fcf0 	bl	8006fe0 <_Balloc>
 8007600:	b920      	cbnz	r0, 800760c <__mdiff+0x5c>
 8007602:	4b2e      	ldr	r3, [pc, #184]	; (80076bc <__mdiff+0x10c>)
 8007604:	4602      	mov	r2, r0
 8007606:	f44f 7110 	mov.w	r1, #576	; 0x240
 800760a:	e7e5      	b.n	80075d8 <__mdiff+0x28>
 800760c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007610:	6926      	ldr	r6, [r4, #16]
 8007612:	60c5      	str	r5, [r0, #12]
 8007614:	f104 0914 	add.w	r9, r4, #20
 8007618:	f108 0514 	add.w	r5, r8, #20
 800761c:	f100 0e14 	add.w	lr, r0, #20
 8007620:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007624:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007628:	f108 0210 	add.w	r2, r8, #16
 800762c:	46f2      	mov	sl, lr
 800762e:	2100      	movs	r1, #0
 8007630:	f859 3b04 	ldr.w	r3, [r9], #4
 8007634:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007638:	fa1f f883 	uxth.w	r8, r3
 800763c:	fa11 f18b 	uxtah	r1, r1, fp
 8007640:	0c1b      	lsrs	r3, r3, #16
 8007642:	eba1 0808 	sub.w	r8, r1, r8
 8007646:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800764a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800764e:	fa1f f888 	uxth.w	r8, r8
 8007652:	1419      	asrs	r1, r3, #16
 8007654:	454e      	cmp	r6, r9
 8007656:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800765a:	f84a 3b04 	str.w	r3, [sl], #4
 800765e:	d8e7      	bhi.n	8007630 <__mdiff+0x80>
 8007660:	1b33      	subs	r3, r6, r4
 8007662:	3b15      	subs	r3, #21
 8007664:	f023 0303 	bic.w	r3, r3, #3
 8007668:	3304      	adds	r3, #4
 800766a:	3415      	adds	r4, #21
 800766c:	42a6      	cmp	r6, r4
 800766e:	bf38      	it	cc
 8007670:	2304      	movcc	r3, #4
 8007672:	441d      	add	r5, r3
 8007674:	4473      	add	r3, lr
 8007676:	469e      	mov	lr, r3
 8007678:	462e      	mov	r6, r5
 800767a:	4566      	cmp	r6, ip
 800767c:	d30e      	bcc.n	800769c <__mdiff+0xec>
 800767e:	f10c 0203 	add.w	r2, ip, #3
 8007682:	1b52      	subs	r2, r2, r5
 8007684:	f022 0203 	bic.w	r2, r2, #3
 8007688:	3d03      	subs	r5, #3
 800768a:	45ac      	cmp	ip, r5
 800768c:	bf38      	it	cc
 800768e:	2200      	movcc	r2, #0
 8007690:	441a      	add	r2, r3
 8007692:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007696:	b17b      	cbz	r3, 80076b8 <__mdiff+0x108>
 8007698:	6107      	str	r7, [r0, #16]
 800769a:	e7a3      	b.n	80075e4 <__mdiff+0x34>
 800769c:	f856 8b04 	ldr.w	r8, [r6], #4
 80076a0:	fa11 f288 	uxtah	r2, r1, r8
 80076a4:	1414      	asrs	r4, r2, #16
 80076a6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80076aa:	b292      	uxth	r2, r2
 80076ac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80076b0:	f84e 2b04 	str.w	r2, [lr], #4
 80076b4:	1421      	asrs	r1, r4, #16
 80076b6:	e7e0      	b.n	800767a <__mdiff+0xca>
 80076b8:	3f01      	subs	r7, #1
 80076ba:	e7ea      	b.n	8007692 <__mdiff+0xe2>
 80076bc:	08009208 	.word	0x08009208
 80076c0:	080092f8 	.word	0x080092f8

080076c4 <__ulp>:
 80076c4:	b082      	sub	sp, #8
 80076c6:	ed8d 0b00 	vstr	d0, [sp]
 80076ca:	9b01      	ldr	r3, [sp, #4]
 80076cc:	4912      	ldr	r1, [pc, #72]	; (8007718 <__ulp+0x54>)
 80076ce:	4019      	ands	r1, r3
 80076d0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80076d4:	2900      	cmp	r1, #0
 80076d6:	dd05      	ble.n	80076e4 <__ulp+0x20>
 80076d8:	2200      	movs	r2, #0
 80076da:	460b      	mov	r3, r1
 80076dc:	ec43 2b10 	vmov	d0, r2, r3
 80076e0:	b002      	add	sp, #8
 80076e2:	4770      	bx	lr
 80076e4:	4249      	negs	r1, r1
 80076e6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80076ea:	ea4f 5021 	mov.w	r0, r1, asr #20
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	da04      	bge.n	8007702 <__ulp+0x3e>
 80076f8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80076fc:	fa41 f300 	asr.w	r3, r1, r0
 8007700:	e7ec      	b.n	80076dc <__ulp+0x18>
 8007702:	f1a0 0114 	sub.w	r1, r0, #20
 8007706:	291e      	cmp	r1, #30
 8007708:	bfda      	itte	le
 800770a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800770e:	fa20 f101 	lsrle.w	r1, r0, r1
 8007712:	2101      	movgt	r1, #1
 8007714:	460a      	mov	r2, r1
 8007716:	e7e1      	b.n	80076dc <__ulp+0x18>
 8007718:	7ff00000 	.word	0x7ff00000

0800771c <__b2d>:
 800771c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800771e:	6905      	ldr	r5, [r0, #16]
 8007720:	f100 0714 	add.w	r7, r0, #20
 8007724:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007728:	1f2e      	subs	r6, r5, #4
 800772a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800772e:	4620      	mov	r0, r4
 8007730:	f7ff fd48 	bl	80071c4 <__hi0bits>
 8007734:	f1c0 0320 	rsb	r3, r0, #32
 8007738:	280a      	cmp	r0, #10
 800773a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80077b8 <__b2d+0x9c>
 800773e:	600b      	str	r3, [r1, #0]
 8007740:	dc14      	bgt.n	800776c <__b2d+0x50>
 8007742:	f1c0 0e0b 	rsb	lr, r0, #11
 8007746:	fa24 f10e 	lsr.w	r1, r4, lr
 800774a:	42b7      	cmp	r7, r6
 800774c:	ea41 030c 	orr.w	r3, r1, ip
 8007750:	bf34      	ite	cc
 8007752:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007756:	2100      	movcs	r1, #0
 8007758:	3015      	adds	r0, #21
 800775a:	fa04 f000 	lsl.w	r0, r4, r0
 800775e:	fa21 f10e 	lsr.w	r1, r1, lr
 8007762:	ea40 0201 	orr.w	r2, r0, r1
 8007766:	ec43 2b10 	vmov	d0, r2, r3
 800776a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800776c:	42b7      	cmp	r7, r6
 800776e:	bf3a      	itte	cc
 8007770:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007774:	f1a5 0608 	subcc.w	r6, r5, #8
 8007778:	2100      	movcs	r1, #0
 800777a:	380b      	subs	r0, #11
 800777c:	d017      	beq.n	80077ae <__b2d+0x92>
 800777e:	f1c0 0c20 	rsb	ip, r0, #32
 8007782:	fa04 f500 	lsl.w	r5, r4, r0
 8007786:	42be      	cmp	r6, r7
 8007788:	fa21 f40c 	lsr.w	r4, r1, ip
 800778c:	ea45 0504 	orr.w	r5, r5, r4
 8007790:	bf8c      	ite	hi
 8007792:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007796:	2400      	movls	r4, #0
 8007798:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800779c:	fa01 f000 	lsl.w	r0, r1, r0
 80077a0:	fa24 f40c 	lsr.w	r4, r4, ip
 80077a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80077a8:	ea40 0204 	orr.w	r2, r0, r4
 80077ac:	e7db      	b.n	8007766 <__b2d+0x4a>
 80077ae:	ea44 030c 	orr.w	r3, r4, ip
 80077b2:	460a      	mov	r2, r1
 80077b4:	e7d7      	b.n	8007766 <__b2d+0x4a>
 80077b6:	bf00      	nop
 80077b8:	3ff00000 	.word	0x3ff00000

080077bc <__d2b>:
 80077bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077c0:	4689      	mov	r9, r1
 80077c2:	2101      	movs	r1, #1
 80077c4:	ec57 6b10 	vmov	r6, r7, d0
 80077c8:	4690      	mov	r8, r2
 80077ca:	f7ff fc09 	bl	8006fe0 <_Balloc>
 80077ce:	4604      	mov	r4, r0
 80077d0:	b930      	cbnz	r0, 80077e0 <__d2b+0x24>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <__d2b+0xb0>)
 80077d6:	4826      	ldr	r0, [pc, #152]	; (8007870 <__d2b+0xb4>)
 80077d8:	f240 310a 	movw	r1, #778	; 0x30a
 80077dc:	f001 f970 	bl	8008ac0 <__assert_func>
 80077e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80077e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80077e8:	bb35      	cbnz	r5, 8007838 <__d2b+0x7c>
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	9301      	str	r3, [sp, #4]
 80077ee:	d028      	beq.n	8007842 <__d2b+0x86>
 80077f0:	4668      	mov	r0, sp
 80077f2:	9600      	str	r6, [sp, #0]
 80077f4:	f7ff fd06 	bl	8007204 <__lo0bits>
 80077f8:	9900      	ldr	r1, [sp, #0]
 80077fa:	b300      	cbz	r0, 800783e <__d2b+0x82>
 80077fc:	9a01      	ldr	r2, [sp, #4]
 80077fe:	f1c0 0320 	rsb	r3, r0, #32
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	430b      	orrs	r3, r1
 8007808:	40c2      	lsrs	r2, r0
 800780a:	6163      	str	r3, [r4, #20]
 800780c:	9201      	str	r2, [sp, #4]
 800780e:	9b01      	ldr	r3, [sp, #4]
 8007810:	61a3      	str	r3, [r4, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	bf14      	ite	ne
 8007816:	2202      	movne	r2, #2
 8007818:	2201      	moveq	r2, #1
 800781a:	6122      	str	r2, [r4, #16]
 800781c:	b1d5      	cbz	r5, 8007854 <__d2b+0x98>
 800781e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007822:	4405      	add	r5, r0
 8007824:	f8c9 5000 	str.w	r5, [r9]
 8007828:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800782c:	f8c8 0000 	str.w	r0, [r8]
 8007830:	4620      	mov	r0, r4
 8007832:	b003      	add	sp, #12
 8007834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007838:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800783c:	e7d5      	b.n	80077ea <__d2b+0x2e>
 800783e:	6161      	str	r1, [r4, #20]
 8007840:	e7e5      	b.n	800780e <__d2b+0x52>
 8007842:	a801      	add	r0, sp, #4
 8007844:	f7ff fcde 	bl	8007204 <__lo0bits>
 8007848:	9b01      	ldr	r3, [sp, #4]
 800784a:	6163      	str	r3, [r4, #20]
 800784c:	2201      	movs	r2, #1
 800784e:	6122      	str	r2, [r4, #16]
 8007850:	3020      	adds	r0, #32
 8007852:	e7e3      	b.n	800781c <__d2b+0x60>
 8007854:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007858:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800785c:	f8c9 0000 	str.w	r0, [r9]
 8007860:	6918      	ldr	r0, [r3, #16]
 8007862:	f7ff fcaf 	bl	80071c4 <__hi0bits>
 8007866:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800786a:	e7df      	b.n	800782c <__d2b+0x70>
 800786c:	08009208 	.word	0x08009208
 8007870:	080092f8 	.word	0x080092f8

08007874 <__ratio>:
 8007874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007878:	4688      	mov	r8, r1
 800787a:	4669      	mov	r1, sp
 800787c:	4681      	mov	r9, r0
 800787e:	f7ff ff4d 	bl	800771c <__b2d>
 8007882:	a901      	add	r1, sp, #4
 8007884:	4640      	mov	r0, r8
 8007886:	ec55 4b10 	vmov	r4, r5, d0
 800788a:	f7ff ff47 	bl	800771c <__b2d>
 800788e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007892:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007896:	eba3 0c02 	sub.w	ip, r3, r2
 800789a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800789e:	1a9b      	subs	r3, r3, r2
 80078a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80078a4:	ec51 0b10 	vmov	r0, r1, d0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	bfd6      	itet	le
 80078ac:	460a      	movle	r2, r1
 80078ae:	462a      	movgt	r2, r5
 80078b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80078b4:	468b      	mov	fp, r1
 80078b6:	462f      	mov	r7, r5
 80078b8:	bfd4      	ite	le
 80078ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80078be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80078c2:	4620      	mov	r0, r4
 80078c4:	ee10 2a10 	vmov	r2, s0
 80078c8:	465b      	mov	r3, fp
 80078ca:	4639      	mov	r1, r7
 80078cc:	f7f8 ffce 	bl	800086c <__aeabi_ddiv>
 80078d0:	ec41 0b10 	vmov	d0, r0, r1
 80078d4:	b003      	add	sp, #12
 80078d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080078da <__copybits>:
 80078da:	3901      	subs	r1, #1
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	1149      	asrs	r1, r1, #5
 80078e0:	6914      	ldr	r4, [r2, #16]
 80078e2:	3101      	adds	r1, #1
 80078e4:	f102 0314 	add.w	r3, r2, #20
 80078e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80078ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80078f0:	1f05      	subs	r5, r0, #4
 80078f2:	42a3      	cmp	r3, r4
 80078f4:	d30c      	bcc.n	8007910 <__copybits+0x36>
 80078f6:	1aa3      	subs	r3, r4, r2
 80078f8:	3b11      	subs	r3, #17
 80078fa:	f023 0303 	bic.w	r3, r3, #3
 80078fe:	3211      	adds	r2, #17
 8007900:	42a2      	cmp	r2, r4
 8007902:	bf88      	it	hi
 8007904:	2300      	movhi	r3, #0
 8007906:	4418      	add	r0, r3
 8007908:	2300      	movs	r3, #0
 800790a:	4288      	cmp	r0, r1
 800790c:	d305      	bcc.n	800791a <__copybits+0x40>
 800790e:	bd70      	pop	{r4, r5, r6, pc}
 8007910:	f853 6b04 	ldr.w	r6, [r3], #4
 8007914:	f845 6f04 	str.w	r6, [r5, #4]!
 8007918:	e7eb      	b.n	80078f2 <__copybits+0x18>
 800791a:	f840 3b04 	str.w	r3, [r0], #4
 800791e:	e7f4      	b.n	800790a <__copybits+0x30>

08007920 <__any_on>:
 8007920:	f100 0214 	add.w	r2, r0, #20
 8007924:	6900      	ldr	r0, [r0, #16]
 8007926:	114b      	asrs	r3, r1, #5
 8007928:	4298      	cmp	r0, r3
 800792a:	b510      	push	{r4, lr}
 800792c:	db11      	blt.n	8007952 <__any_on+0x32>
 800792e:	dd0a      	ble.n	8007946 <__any_on+0x26>
 8007930:	f011 011f 	ands.w	r1, r1, #31
 8007934:	d007      	beq.n	8007946 <__any_on+0x26>
 8007936:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800793a:	fa24 f001 	lsr.w	r0, r4, r1
 800793e:	fa00 f101 	lsl.w	r1, r0, r1
 8007942:	428c      	cmp	r4, r1
 8007944:	d10b      	bne.n	800795e <__any_on+0x3e>
 8007946:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800794a:	4293      	cmp	r3, r2
 800794c:	d803      	bhi.n	8007956 <__any_on+0x36>
 800794e:	2000      	movs	r0, #0
 8007950:	bd10      	pop	{r4, pc}
 8007952:	4603      	mov	r3, r0
 8007954:	e7f7      	b.n	8007946 <__any_on+0x26>
 8007956:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800795a:	2900      	cmp	r1, #0
 800795c:	d0f5      	beq.n	800794a <__any_on+0x2a>
 800795e:	2001      	movs	r0, #1
 8007960:	e7f6      	b.n	8007950 <__any_on+0x30>

08007962 <_calloc_r>:
 8007962:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007964:	fba1 2402 	umull	r2, r4, r1, r2
 8007968:	b94c      	cbnz	r4, 800797e <_calloc_r+0x1c>
 800796a:	4611      	mov	r1, r2
 800796c:	9201      	str	r2, [sp, #4]
 800796e:	f000 f87b 	bl	8007a68 <_malloc_r>
 8007972:	9a01      	ldr	r2, [sp, #4]
 8007974:	4605      	mov	r5, r0
 8007976:	b930      	cbnz	r0, 8007986 <_calloc_r+0x24>
 8007978:	4628      	mov	r0, r5
 800797a:	b003      	add	sp, #12
 800797c:	bd30      	pop	{r4, r5, pc}
 800797e:	220c      	movs	r2, #12
 8007980:	6002      	str	r2, [r0, #0]
 8007982:	2500      	movs	r5, #0
 8007984:	e7f8      	b.n	8007978 <_calloc_r+0x16>
 8007986:	4621      	mov	r1, r4
 8007988:	f7fc f9f4 	bl	8003d74 <memset>
 800798c:	e7f4      	b.n	8007978 <_calloc_r+0x16>
	...

08007990 <_free_r>:
 8007990:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007992:	2900      	cmp	r1, #0
 8007994:	d044      	beq.n	8007a20 <_free_r+0x90>
 8007996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800799a:	9001      	str	r0, [sp, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f1a1 0404 	sub.w	r4, r1, #4
 80079a2:	bfb8      	it	lt
 80079a4:	18e4      	addlt	r4, r4, r3
 80079a6:	f001 f9fd 	bl	8008da4 <__malloc_lock>
 80079aa:	4a1e      	ldr	r2, [pc, #120]	; (8007a24 <_free_r+0x94>)
 80079ac:	9801      	ldr	r0, [sp, #4]
 80079ae:	6813      	ldr	r3, [r2, #0]
 80079b0:	b933      	cbnz	r3, 80079c0 <_free_r+0x30>
 80079b2:	6063      	str	r3, [r4, #4]
 80079b4:	6014      	str	r4, [r2, #0]
 80079b6:	b003      	add	sp, #12
 80079b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079bc:	f001 b9f8 	b.w	8008db0 <__malloc_unlock>
 80079c0:	42a3      	cmp	r3, r4
 80079c2:	d908      	bls.n	80079d6 <_free_r+0x46>
 80079c4:	6825      	ldr	r5, [r4, #0]
 80079c6:	1961      	adds	r1, r4, r5
 80079c8:	428b      	cmp	r3, r1
 80079ca:	bf01      	itttt	eq
 80079cc:	6819      	ldreq	r1, [r3, #0]
 80079ce:	685b      	ldreq	r3, [r3, #4]
 80079d0:	1949      	addeq	r1, r1, r5
 80079d2:	6021      	streq	r1, [r4, #0]
 80079d4:	e7ed      	b.n	80079b2 <_free_r+0x22>
 80079d6:	461a      	mov	r2, r3
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	b10b      	cbz	r3, 80079e0 <_free_r+0x50>
 80079dc:	42a3      	cmp	r3, r4
 80079de:	d9fa      	bls.n	80079d6 <_free_r+0x46>
 80079e0:	6811      	ldr	r1, [r2, #0]
 80079e2:	1855      	adds	r5, r2, r1
 80079e4:	42a5      	cmp	r5, r4
 80079e6:	d10b      	bne.n	8007a00 <_free_r+0x70>
 80079e8:	6824      	ldr	r4, [r4, #0]
 80079ea:	4421      	add	r1, r4
 80079ec:	1854      	adds	r4, r2, r1
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	d1e0      	bne.n	80079b6 <_free_r+0x26>
 80079f4:	681c      	ldr	r4, [r3, #0]
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	6053      	str	r3, [r2, #4]
 80079fa:	4421      	add	r1, r4
 80079fc:	6011      	str	r1, [r2, #0]
 80079fe:	e7da      	b.n	80079b6 <_free_r+0x26>
 8007a00:	d902      	bls.n	8007a08 <_free_r+0x78>
 8007a02:	230c      	movs	r3, #12
 8007a04:	6003      	str	r3, [r0, #0]
 8007a06:	e7d6      	b.n	80079b6 <_free_r+0x26>
 8007a08:	6825      	ldr	r5, [r4, #0]
 8007a0a:	1961      	adds	r1, r4, r5
 8007a0c:	428b      	cmp	r3, r1
 8007a0e:	bf04      	itt	eq
 8007a10:	6819      	ldreq	r1, [r3, #0]
 8007a12:	685b      	ldreq	r3, [r3, #4]
 8007a14:	6063      	str	r3, [r4, #4]
 8007a16:	bf04      	itt	eq
 8007a18:	1949      	addeq	r1, r1, r5
 8007a1a:	6021      	streq	r1, [r4, #0]
 8007a1c:	6054      	str	r4, [r2, #4]
 8007a1e:	e7ca      	b.n	80079b6 <_free_r+0x26>
 8007a20:	b003      	add	sp, #12
 8007a22:	bd30      	pop	{r4, r5, pc}
 8007a24:	20000370 	.word	0x20000370

08007a28 <sbrk_aligned>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4e0e      	ldr	r6, [pc, #56]	; (8007a64 <sbrk_aligned+0x3c>)
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	6831      	ldr	r1, [r6, #0]
 8007a30:	4605      	mov	r5, r0
 8007a32:	b911      	cbnz	r1, 8007a3a <sbrk_aligned+0x12>
 8007a34:	f000 fe80 	bl	8008738 <_sbrk_r>
 8007a38:	6030      	str	r0, [r6, #0]
 8007a3a:	4621      	mov	r1, r4
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 fe7b 	bl	8008738 <_sbrk_r>
 8007a42:	1c43      	adds	r3, r0, #1
 8007a44:	d00a      	beq.n	8007a5c <sbrk_aligned+0x34>
 8007a46:	1cc4      	adds	r4, r0, #3
 8007a48:	f024 0403 	bic.w	r4, r4, #3
 8007a4c:	42a0      	cmp	r0, r4
 8007a4e:	d007      	beq.n	8007a60 <sbrk_aligned+0x38>
 8007a50:	1a21      	subs	r1, r4, r0
 8007a52:	4628      	mov	r0, r5
 8007a54:	f000 fe70 	bl	8008738 <_sbrk_r>
 8007a58:	3001      	adds	r0, #1
 8007a5a:	d101      	bne.n	8007a60 <sbrk_aligned+0x38>
 8007a5c:	f04f 34ff 	mov.w	r4, #4294967295
 8007a60:	4620      	mov	r0, r4
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	20000374 	.word	0x20000374

08007a68 <_malloc_r>:
 8007a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a6c:	1ccd      	adds	r5, r1, #3
 8007a6e:	f025 0503 	bic.w	r5, r5, #3
 8007a72:	3508      	adds	r5, #8
 8007a74:	2d0c      	cmp	r5, #12
 8007a76:	bf38      	it	cc
 8007a78:	250c      	movcc	r5, #12
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	4607      	mov	r7, r0
 8007a7e:	db01      	blt.n	8007a84 <_malloc_r+0x1c>
 8007a80:	42a9      	cmp	r1, r5
 8007a82:	d905      	bls.n	8007a90 <_malloc_r+0x28>
 8007a84:	230c      	movs	r3, #12
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	2600      	movs	r6, #0
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a90:	4e2e      	ldr	r6, [pc, #184]	; (8007b4c <_malloc_r+0xe4>)
 8007a92:	f001 f987 	bl	8008da4 <__malloc_lock>
 8007a96:	6833      	ldr	r3, [r6, #0]
 8007a98:	461c      	mov	r4, r3
 8007a9a:	bb34      	cbnz	r4, 8007aea <_malloc_r+0x82>
 8007a9c:	4629      	mov	r1, r5
 8007a9e:	4638      	mov	r0, r7
 8007aa0:	f7ff ffc2 	bl	8007a28 <sbrk_aligned>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	d14d      	bne.n	8007b46 <_malloc_r+0xde>
 8007aaa:	6834      	ldr	r4, [r6, #0]
 8007aac:	4626      	mov	r6, r4
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	d140      	bne.n	8007b34 <_malloc_r+0xcc>
 8007ab2:	6823      	ldr	r3, [r4, #0]
 8007ab4:	4631      	mov	r1, r6
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	eb04 0803 	add.w	r8, r4, r3
 8007abc:	f000 fe3c 	bl	8008738 <_sbrk_r>
 8007ac0:	4580      	cmp	r8, r0
 8007ac2:	d13a      	bne.n	8007b3a <_malloc_r+0xd2>
 8007ac4:	6821      	ldr	r1, [r4, #0]
 8007ac6:	3503      	adds	r5, #3
 8007ac8:	1a6d      	subs	r5, r5, r1
 8007aca:	f025 0503 	bic.w	r5, r5, #3
 8007ace:	3508      	adds	r5, #8
 8007ad0:	2d0c      	cmp	r5, #12
 8007ad2:	bf38      	it	cc
 8007ad4:	250c      	movcc	r5, #12
 8007ad6:	4629      	mov	r1, r5
 8007ad8:	4638      	mov	r0, r7
 8007ada:	f7ff ffa5 	bl	8007a28 <sbrk_aligned>
 8007ade:	3001      	adds	r0, #1
 8007ae0:	d02b      	beq.n	8007b3a <_malloc_r+0xd2>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	442b      	add	r3, r5
 8007ae6:	6023      	str	r3, [r4, #0]
 8007ae8:	e00e      	b.n	8007b08 <_malloc_r+0xa0>
 8007aea:	6822      	ldr	r2, [r4, #0]
 8007aec:	1b52      	subs	r2, r2, r5
 8007aee:	d41e      	bmi.n	8007b2e <_malloc_r+0xc6>
 8007af0:	2a0b      	cmp	r2, #11
 8007af2:	d916      	bls.n	8007b22 <_malloc_r+0xba>
 8007af4:	1961      	adds	r1, r4, r5
 8007af6:	42a3      	cmp	r3, r4
 8007af8:	6025      	str	r5, [r4, #0]
 8007afa:	bf18      	it	ne
 8007afc:	6059      	strne	r1, [r3, #4]
 8007afe:	6863      	ldr	r3, [r4, #4]
 8007b00:	bf08      	it	eq
 8007b02:	6031      	streq	r1, [r6, #0]
 8007b04:	5162      	str	r2, [r4, r5]
 8007b06:	604b      	str	r3, [r1, #4]
 8007b08:	4638      	mov	r0, r7
 8007b0a:	f104 060b 	add.w	r6, r4, #11
 8007b0e:	f001 f94f 	bl	8008db0 <__malloc_unlock>
 8007b12:	f026 0607 	bic.w	r6, r6, #7
 8007b16:	1d23      	adds	r3, r4, #4
 8007b18:	1af2      	subs	r2, r6, r3
 8007b1a:	d0b6      	beq.n	8007a8a <_malloc_r+0x22>
 8007b1c:	1b9b      	subs	r3, r3, r6
 8007b1e:	50a3      	str	r3, [r4, r2]
 8007b20:	e7b3      	b.n	8007a8a <_malloc_r+0x22>
 8007b22:	6862      	ldr	r2, [r4, #4]
 8007b24:	42a3      	cmp	r3, r4
 8007b26:	bf0c      	ite	eq
 8007b28:	6032      	streq	r2, [r6, #0]
 8007b2a:	605a      	strne	r2, [r3, #4]
 8007b2c:	e7ec      	b.n	8007b08 <_malloc_r+0xa0>
 8007b2e:	4623      	mov	r3, r4
 8007b30:	6864      	ldr	r4, [r4, #4]
 8007b32:	e7b2      	b.n	8007a9a <_malloc_r+0x32>
 8007b34:	4634      	mov	r4, r6
 8007b36:	6876      	ldr	r6, [r6, #4]
 8007b38:	e7b9      	b.n	8007aae <_malloc_r+0x46>
 8007b3a:	230c      	movs	r3, #12
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	4638      	mov	r0, r7
 8007b40:	f001 f936 	bl	8008db0 <__malloc_unlock>
 8007b44:	e7a1      	b.n	8007a8a <_malloc_r+0x22>
 8007b46:	6025      	str	r5, [r4, #0]
 8007b48:	e7de      	b.n	8007b08 <_malloc_r+0xa0>
 8007b4a:	bf00      	nop
 8007b4c:	20000370 	.word	0x20000370

08007b50 <__ssputs_r>:
 8007b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b54:	688e      	ldr	r6, [r1, #8]
 8007b56:	429e      	cmp	r6, r3
 8007b58:	4682      	mov	sl, r0
 8007b5a:	460c      	mov	r4, r1
 8007b5c:	4690      	mov	r8, r2
 8007b5e:	461f      	mov	r7, r3
 8007b60:	d838      	bhi.n	8007bd4 <__ssputs_r+0x84>
 8007b62:	898a      	ldrh	r2, [r1, #12]
 8007b64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007b68:	d032      	beq.n	8007bd0 <__ssputs_r+0x80>
 8007b6a:	6825      	ldr	r5, [r4, #0]
 8007b6c:	6909      	ldr	r1, [r1, #16]
 8007b6e:	eba5 0901 	sub.w	r9, r5, r1
 8007b72:	6965      	ldr	r5, [r4, #20]
 8007b74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007b78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	444b      	add	r3, r9
 8007b80:	106d      	asrs	r5, r5, #1
 8007b82:	429d      	cmp	r5, r3
 8007b84:	bf38      	it	cc
 8007b86:	461d      	movcc	r5, r3
 8007b88:	0553      	lsls	r3, r2, #21
 8007b8a:	d531      	bpl.n	8007bf0 <__ssputs_r+0xa0>
 8007b8c:	4629      	mov	r1, r5
 8007b8e:	f7ff ff6b 	bl	8007a68 <_malloc_r>
 8007b92:	4606      	mov	r6, r0
 8007b94:	b950      	cbnz	r0, 8007bac <__ssputs_r+0x5c>
 8007b96:	230c      	movs	r3, #12
 8007b98:	f8ca 3000 	str.w	r3, [sl]
 8007b9c:	89a3      	ldrh	r3, [r4, #12]
 8007b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ba2:	81a3      	strh	r3, [r4, #12]
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bac:	6921      	ldr	r1, [r4, #16]
 8007bae:	464a      	mov	r2, r9
 8007bb0:	f7ff fa08 	bl	8006fc4 <memcpy>
 8007bb4:	89a3      	ldrh	r3, [r4, #12]
 8007bb6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bbe:	81a3      	strh	r3, [r4, #12]
 8007bc0:	6126      	str	r6, [r4, #16]
 8007bc2:	6165      	str	r5, [r4, #20]
 8007bc4:	444e      	add	r6, r9
 8007bc6:	eba5 0509 	sub.w	r5, r5, r9
 8007bca:	6026      	str	r6, [r4, #0]
 8007bcc:	60a5      	str	r5, [r4, #8]
 8007bce:	463e      	mov	r6, r7
 8007bd0:	42be      	cmp	r6, r7
 8007bd2:	d900      	bls.n	8007bd6 <__ssputs_r+0x86>
 8007bd4:	463e      	mov	r6, r7
 8007bd6:	6820      	ldr	r0, [r4, #0]
 8007bd8:	4632      	mov	r2, r6
 8007bda:	4641      	mov	r1, r8
 8007bdc:	f001 f8c8 	bl	8008d70 <memmove>
 8007be0:	68a3      	ldr	r3, [r4, #8]
 8007be2:	1b9b      	subs	r3, r3, r6
 8007be4:	60a3      	str	r3, [r4, #8]
 8007be6:	6823      	ldr	r3, [r4, #0]
 8007be8:	4433      	add	r3, r6
 8007bea:	6023      	str	r3, [r4, #0]
 8007bec:	2000      	movs	r0, #0
 8007bee:	e7db      	b.n	8007ba8 <__ssputs_r+0x58>
 8007bf0:	462a      	mov	r2, r5
 8007bf2:	f001 f8e3 	bl	8008dbc <_realloc_r>
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	d1e1      	bne.n	8007bc0 <__ssputs_r+0x70>
 8007bfc:	6921      	ldr	r1, [r4, #16]
 8007bfe:	4650      	mov	r0, sl
 8007c00:	f7ff fec6 	bl	8007990 <_free_r>
 8007c04:	e7c7      	b.n	8007b96 <__ssputs_r+0x46>
	...

08007c08 <_svfiprintf_r>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	4698      	mov	r8, r3
 8007c0e:	898b      	ldrh	r3, [r1, #12]
 8007c10:	061b      	lsls	r3, r3, #24
 8007c12:	b09d      	sub	sp, #116	; 0x74
 8007c14:	4607      	mov	r7, r0
 8007c16:	460d      	mov	r5, r1
 8007c18:	4614      	mov	r4, r2
 8007c1a:	d50e      	bpl.n	8007c3a <_svfiprintf_r+0x32>
 8007c1c:	690b      	ldr	r3, [r1, #16]
 8007c1e:	b963      	cbnz	r3, 8007c3a <_svfiprintf_r+0x32>
 8007c20:	2140      	movs	r1, #64	; 0x40
 8007c22:	f7ff ff21 	bl	8007a68 <_malloc_r>
 8007c26:	6028      	str	r0, [r5, #0]
 8007c28:	6128      	str	r0, [r5, #16]
 8007c2a:	b920      	cbnz	r0, 8007c36 <_svfiprintf_r+0x2e>
 8007c2c:	230c      	movs	r3, #12
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	f04f 30ff 	mov.w	r0, #4294967295
 8007c34:	e0d1      	b.n	8007dda <_svfiprintf_r+0x1d2>
 8007c36:	2340      	movs	r3, #64	; 0x40
 8007c38:	616b      	str	r3, [r5, #20]
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	9309      	str	r3, [sp, #36]	; 0x24
 8007c3e:	2320      	movs	r3, #32
 8007c40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c44:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c48:	2330      	movs	r3, #48	; 0x30
 8007c4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007df4 <_svfiprintf_r+0x1ec>
 8007c4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c52:	f04f 0901 	mov.w	r9, #1
 8007c56:	4623      	mov	r3, r4
 8007c58:	469a      	mov	sl, r3
 8007c5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c5e:	b10a      	cbz	r2, 8007c64 <_svfiprintf_r+0x5c>
 8007c60:	2a25      	cmp	r2, #37	; 0x25
 8007c62:	d1f9      	bne.n	8007c58 <_svfiprintf_r+0x50>
 8007c64:	ebba 0b04 	subs.w	fp, sl, r4
 8007c68:	d00b      	beq.n	8007c82 <_svfiprintf_r+0x7a>
 8007c6a:	465b      	mov	r3, fp
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4638      	mov	r0, r7
 8007c72:	f7ff ff6d 	bl	8007b50 <__ssputs_r>
 8007c76:	3001      	adds	r0, #1
 8007c78:	f000 80aa 	beq.w	8007dd0 <_svfiprintf_r+0x1c8>
 8007c7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c7e:	445a      	add	r2, fp
 8007c80:	9209      	str	r2, [sp, #36]	; 0x24
 8007c82:	f89a 3000 	ldrb.w	r3, [sl]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	f000 80a2 	beq.w	8007dd0 <_svfiprintf_r+0x1c8>
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c96:	f10a 0a01 	add.w	sl, sl, #1
 8007c9a:	9304      	str	r3, [sp, #16]
 8007c9c:	9307      	str	r3, [sp, #28]
 8007c9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ca2:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca4:	4654      	mov	r4, sl
 8007ca6:	2205      	movs	r2, #5
 8007ca8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cac:	4851      	ldr	r0, [pc, #324]	; (8007df4 <_svfiprintf_r+0x1ec>)
 8007cae:	f7f8 faa7 	bl	8000200 <memchr>
 8007cb2:	9a04      	ldr	r2, [sp, #16]
 8007cb4:	b9d8      	cbnz	r0, 8007cee <_svfiprintf_r+0xe6>
 8007cb6:	06d0      	lsls	r0, r2, #27
 8007cb8:	bf44      	itt	mi
 8007cba:	2320      	movmi	r3, #32
 8007cbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc0:	0711      	lsls	r1, r2, #28
 8007cc2:	bf44      	itt	mi
 8007cc4:	232b      	movmi	r3, #43	; 0x2b
 8007cc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cca:	f89a 3000 	ldrb.w	r3, [sl]
 8007cce:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd0:	d015      	beq.n	8007cfe <_svfiprintf_r+0xf6>
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	4654      	mov	r4, sl
 8007cd6:	2000      	movs	r0, #0
 8007cd8:	f04f 0c0a 	mov.w	ip, #10
 8007cdc:	4621      	mov	r1, r4
 8007cde:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce2:	3b30      	subs	r3, #48	; 0x30
 8007ce4:	2b09      	cmp	r3, #9
 8007ce6:	d94e      	bls.n	8007d86 <_svfiprintf_r+0x17e>
 8007ce8:	b1b0      	cbz	r0, 8007d18 <_svfiprintf_r+0x110>
 8007cea:	9207      	str	r2, [sp, #28]
 8007cec:	e014      	b.n	8007d18 <_svfiprintf_r+0x110>
 8007cee:	eba0 0308 	sub.w	r3, r0, r8
 8007cf2:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	9304      	str	r3, [sp, #16]
 8007cfa:	46a2      	mov	sl, r4
 8007cfc:	e7d2      	b.n	8007ca4 <_svfiprintf_r+0x9c>
 8007cfe:	9b03      	ldr	r3, [sp, #12]
 8007d00:	1d19      	adds	r1, r3, #4
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	9103      	str	r1, [sp, #12]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	bfbb      	ittet	lt
 8007d0a:	425b      	neglt	r3, r3
 8007d0c:	f042 0202 	orrlt.w	r2, r2, #2
 8007d10:	9307      	strge	r3, [sp, #28]
 8007d12:	9307      	strlt	r3, [sp, #28]
 8007d14:	bfb8      	it	lt
 8007d16:	9204      	strlt	r2, [sp, #16]
 8007d18:	7823      	ldrb	r3, [r4, #0]
 8007d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8007d1c:	d10c      	bne.n	8007d38 <_svfiprintf_r+0x130>
 8007d1e:	7863      	ldrb	r3, [r4, #1]
 8007d20:	2b2a      	cmp	r3, #42	; 0x2a
 8007d22:	d135      	bne.n	8007d90 <_svfiprintf_r+0x188>
 8007d24:	9b03      	ldr	r3, [sp, #12]
 8007d26:	1d1a      	adds	r2, r3, #4
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	9203      	str	r2, [sp, #12]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	bfb8      	it	lt
 8007d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d34:	3402      	adds	r4, #2
 8007d36:	9305      	str	r3, [sp, #20]
 8007d38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007e04 <_svfiprintf_r+0x1fc>
 8007d3c:	7821      	ldrb	r1, [r4, #0]
 8007d3e:	2203      	movs	r2, #3
 8007d40:	4650      	mov	r0, sl
 8007d42:	f7f8 fa5d 	bl	8000200 <memchr>
 8007d46:	b140      	cbz	r0, 8007d5a <_svfiprintf_r+0x152>
 8007d48:	2340      	movs	r3, #64	; 0x40
 8007d4a:	eba0 000a 	sub.w	r0, r0, sl
 8007d4e:	fa03 f000 	lsl.w	r0, r3, r0
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	4303      	orrs	r3, r0
 8007d56:	3401      	adds	r4, #1
 8007d58:	9304      	str	r3, [sp, #16]
 8007d5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d5e:	4826      	ldr	r0, [pc, #152]	; (8007df8 <_svfiprintf_r+0x1f0>)
 8007d60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d64:	2206      	movs	r2, #6
 8007d66:	f7f8 fa4b 	bl	8000200 <memchr>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d038      	beq.n	8007de0 <_svfiprintf_r+0x1d8>
 8007d6e:	4b23      	ldr	r3, [pc, #140]	; (8007dfc <_svfiprintf_r+0x1f4>)
 8007d70:	bb1b      	cbnz	r3, 8007dba <_svfiprintf_r+0x1b2>
 8007d72:	9b03      	ldr	r3, [sp, #12]
 8007d74:	3307      	adds	r3, #7
 8007d76:	f023 0307 	bic.w	r3, r3, #7
 8007d7a:	3308      	adds	r3, #8
 8007d7c:	9303      	str	r3, [sp, #12]
 8007d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d80:	4433      	add	r3, r6
 8007d82:	9309      	str	r3, [sp, #36]	; 0x24
 8007d84:	e767      	b.n	8007c56 <_svfiprintf_r+0x4e>
 8007d86:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	2001      	movs	r0, #1
 8007d8e:	e7a5      	b.n	8007cdc <_svfiprintf_r+0xd4>
 8007d90:	2300      	movs	r3, #0
 8007d92:	3401      	adds	r4, #1
 8007d94:	9305      	str	r3, [sp, #20]
 8007d96:	4619      	mov	r1, r3
 8007d98:	f04f 0c0a 	mov.w	ip, #10
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da2:	3a30      	subs	r2, #48	; 0x30
 8007da4:	2a09      	cmp	r2, #9
 8007da6:	d903      	bls.n	8007db0 <_svfiprintf_r+0x1a8>
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d0c5      	beq.n	8007d38 <_svfiprintf_r+0x130>
 8007dac:	9105      	str	r1, [sp, #20]
 8007dae:	e7c3      	b.n	8007d38 <_svfiprintf_r+0x130>
 8007db0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db4:	4604      	mov	r4, r0
 8007db6:	2301      	movs	r3, #1
 8007db8:	e7f0      	b.n	8007d9c <_svfiprintf_r+0x194>
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	; (8007e00 <_svfiprintf_r+0x1f8>)
 8007dc2:	a904      	add	r1, sp, #16
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	f7fc f87d 	bl	8003ec4 <_printf_float>
 8007dca:	1c42      	adds	r2, r0, #1
 8007dcc:	4606      	mov	r6, r0
 8007dce:	d1d6      	bne.n	8007d7e <_svfiprintf_r+0x176>
 8007dd0:	89ab      	ldrh	r3, [r5, #12]
 8007dd2:	065b      	lsls	r3, r3, #25
 8007dd4:	f53f af2c 	bmi.w	8007c30 <_svfiprintf_r+0x28>
 8007dd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dda:	b01d      	add	sp, #116	; 0x74
 8007ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de0:	ab03      	add	r3, sp, #12
 8007de2:	9300      	str	r3, [sp, #0]
 8007de4:	462a      	mov	r2, r5
 8007de6:	4b06      	ldr	r3, [pc, #24]	; (8007e00 <_svfiprintf_r+0x1f8>)
 8007de8:	a904      	add	r1, sp, #16
 8007dea:	4638      	mov	r0, r7
 8007dec:	f7fc fb0e 	bl	800440c <_printf_i>
 8007df0:	e7eb      	b.n	8007dca <_svfiprintf_r+0x1c2>
 8007df2:	bf00      	nop
 8007df4:	08009454 	.word	0x08009454
 8007df8:	0800945e 	.word	0x0800945e
 8007dfc:	08003ec5 	.word	0x08003ec5
 8007e00:	08007b51 	.word	0x08007b51
 8007e04:	0800945a 	.word	0x0800945a

08007e08 <_sungetc_r>:
 8007e08:	b538      	push	{r3, r4, r5, lr}
 8007e0a:	1c4b      	adds	r3, r1, #1
 8007e0c:	4614      	mov	r4, r2
 8007e0e:	d103      	bne.n	8007e18 <_sungetc_r+0x10>
 8007e10:	f04f 35ff 	mov.w	r5, #4294967295
 8007e14:	4628      	mov	r0, r5
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	8993      	ldrh	r3, [r2, #12]
 8007e1a:	f023 0320 	bic.w	r3, r3, #32
 8007e1e:	8193      	strh	r3, [r2, #12]
 8007e20:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e22:	6852      	ldr	r2, [r2, #4]
 8007e24:	b2cd      	uxtb	r5, r1
 8007e26:	b18b      	cbz	r3, 8007e4c <_sungetc_r+0x44>
 8007e28:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	dd08      	ble.n	8007e40 <_sungetc_r+0x38>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	1e5a      	subs	r2, r3, #1
 8007e32:	6022      	str	r2, [r4, #0]
 8007e34:	f803 5c01 	strb.w	r5, [r3, #-1]
 8007e38:	6863      	ldr	r3, [r4, #4]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	6063      	str	r3, [r4, #4]
 8007e3e:	e7e9      	b.n	8007e14 <_sungetc_r+0xc>
 8007e40:	4621      	mov	r1, r4
 8007e42:	f000 fd35 	bl	80088b0 <__submore>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	d0f1      	beq.n	8007e2e <_sungetc_r+0x26>
 8007e4a:	e7e1      	b.n	8007e10 <_sungetc_r+0x8>
 8007e4c:	6921      	ldr	r1, [r4, #16]
 8007e4e:	6823      	ldr	r3, [r4, #0]
 8007e50:	b151      	cbz	r1, 8007e68 <_sungetc_r+0x60>
 8007e52:	4299      	cmp	r1, r3
 8007e54:	d208      	bcs.n	8007e68 <_sungetc_r+0x60>
 8007e56:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007e5a:	42a9      	cmp	r1, r5
 8007e5c:	d104      	bne.n	8007e68 <_sungetc_r+0x60>
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	3201      	adds	r2, #1
 8007e62:	6023      	str	r3, [r4, #0]
 8007e64:	6062      	str	r2, [r4, #4]
 8007e66:	e7d5      	b.n	8007e14 <_sungetc_r+0xc>
 8007e68:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007e6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e70:	6363      	str	r3, [r4, #52]	; 0x34
 8007e72:	2303      	movs	r3, #3
 8007e74:	63a3      	str	r3, [r4, #56]	; 0x38
 8007e76:	4623      	mov	r3, r4
 8007e78:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e7dc      	b.n	8007e3c <_sungetc_r+0x34>

08007e82 <__ssrefill_r>:
 8007e82:	b510      	push	{r4, lr}
 8007e84:	460c      	mov	r4, r1
 8007e86:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007e88:	b169      	cbz	r1, 8007ea6 <__ssrefill_r+0x24>
 8007e8a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e8e:	4299      	cmp	r1, r3
 8007e90:	d001      	beq.n	8007e96 <__ssrefill_r+0x14>
 8007e92:	f7ff fd7d 	bl	8007990 <_free_r>
 8007e96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e98:	6063      	str	r3, [r4, #4]
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	6360      	str	r0, [r4, #52]	; 0x34
 8007e9e:	b113      	cbz	r3, 8007ea6 <__ssrefill_r+0x24>
 8007ea0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007ea2:	6023      	str	r3, [r4, #0]
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	6923      	ldr	r3, [r4, #16]
 8007ea8:	6023      	str	r3, [r4, #0]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6063      	str	r3, [r4, #4]
 8007eae:	89a3      	ldrh	r3, [r4, #12]
 8007eb0:	f043 0320 	orr.w	r3, r3, #32
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8007eba:	e7f3      	b.n	8007ea4 <__ssrefill_r+0x22>

08007ebc <__ssvfiscanf_r>:
 8007ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	460c      	mov	r4, r1
 8007ec2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8007ec6:	2100      	movs	r1, #0
 8007ec8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8007ecc:	49a6      	ldr	r1, [pc, #664]	; (8008168 <__ssvfiscanf_r+0x2ac>)
 8007ece:	91a0      	str	r1, [sp, #640]	; 0x280
 8007ed0:	f10d 0804 	add.w	r8, sp, #4
 8007ed4:	49a5      	ldr	r1, [pc, #660]	; (800816c <__ssvfiscanf_r+0x2b0>)
 8007ed6:	4fa6      	ldr	r7, [pc, #664]	; (8008170 <__ssvfiscanf_r+0x2b4>)
 8007ed8:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008174 <__ssvfiscanf_r+0x2b8>
 8007edc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007ee0:	4606      	mov	r6, r0
 8007ee2:	91a1      	str	r1, [sp, #644]	; 0x284
 8007ee4:	9300      	str	r3, [sp, #0]
 8007ee6:	7813      	ldrb	r3, [r2, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f000 815a 	beq.w	80081a2 <__ssvfiscanf_r+0x2e6>
 8007eee:	5dd9      	ldrb	r1, [r3, r7]
 8007ef0:	f011 0108 	ands.w	r1, r1, #8
 8007ef4:	f102 0501 	add.w	r5, r2, #1
 8007ef8:	d019      	beq.n	8007f2e <__ssvfiscanf_r+0x72>
 8007efa:	6863      	ldr	r3, [r4, #4]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	dd0f      	ble.n	8007f20 <__ssvfiscanf_r+0x64>
 8007f00:	6823      	ldr	r3, [r4, #0]
 8007f02:	781a      	ldrb	r2, [r3, #0]
 8007f04:	5cba      	ldrb	r2, [r7, r2]
 8007f06:	0712      	lsls	r2, r2, #28
 8007f08:	d401      	bmi.n	8007f0e <__ssvfiscanf_r+0x52>
 8007f0a:	462a      	mov	r2, r5
 8007f0c:	e7eb      	b.n	8007ee6 <__ssvfiscanf_r+0x2a>
 8007f0e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8007f10:	3201      	adds	r2, #1
 8007f12:	9245      	str	r2, [sp, #276]	; 0x114
 8007f14:	6862      	ldr	r2, [r4, #4]
 8007f16:	3301      	adds	r3, #1
 8007f18:	3a01      	subs	r2, #1
 8007f1a:	6062      	str	r2, [r4, #4]
 8007f1c:	6023      	str	r3, [r4, #0]
 8007f1e:	e7ec      	b.n	8007efa <__ssvfiscanf_r+0x3e>
 8007f20:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007f22:	4621      	mov	r1, r4
 8007f24:	4630      	mov	r0, r6
 8007f26:	4798      	blx	r3
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	d0e9      	beq.n	8007f00 <__ssvfiscanf_r+0x44>
 8007f2c:	e7ed      	b.n	8007f0a <__ssvfiscanf_r+0x4e>
 8007f2e:	2b25      	cmp	r3, #37	; 0x25
 8007f30:	d012      	beq.n	8007f58 <__ssvfiscanf_r+0x9c>
 8007f32:	469a      	mov	sl, r3
 8007f34:	6863      	ldr	r3, [r4, #4]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	f340 8091 	ble.w	800805e <__ssvfiscanf_r+0x1a2>
 8007f3c:	6822      	ldr	r2, [r4, #0]
 8007f3e:	7813      	ldrb	r3, [r2, #0]
 8007f40:	4553      	cmp	r3, sl
 8007f42:	f040 812e 	bne.w	80081a2 <__ssvfiscanf_r+0x2e6>
 8007f46:	6863      	ldr	r3, [r4, #4]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	6063      	str	r3, [r4, #4]
 8007f4c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8007f4e:	3201      	adds	r2, #1
 8007f50:	3301      	adds	r3, #1
 8007f52:	6022      	str	r2, [r4, #0]
 8007f54:	9345      	str	r3, [sp, #276]	; 0x114
 8007f56:	e7d8      	b.n	8007f0a <__ssvfiscanf_r+0x4e>
 8007f58:	9141      	str	r1, [sp, #260]	; 0x104
 8007f5a:	9143      	str	r1, [sp, #268]	; 0x10c
 8007f5c:	7853      	ldrb	r3, [r2, #1]
 8007f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8007f60:	bf02      	ittt	eq
 8007f62:	2310      	moveq	r3, #16
 8007f64:	1c95      	addeq	r5, r2, #2
 8007f66:	9341      	streq	r3, [sp, #260]	; 0x104
 8007f68:	220a      	movs	r2, #10
 8007f6a:	46aa      	mov	sl, r5
 8007f6c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8007f70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8007f74:	2b09      	cmp	r3, #9
 8007f76:	d91d      	bls.n	8007fb4 <__ssvfiscanf_r+0xf8>
 8007f78:	487e      	ldr	r0, [pc, #504]	; (8008174 <__ssvfiscanf_r+0x2b8>)
 8007f7a:	2203      	movs	r2, #3
 8007f7c:	f7f8 f940 	bl	8000200 <memchr>
 8007f80:	b140      	cbz	r0, 8007f94 <__ssvfiscanf_r+0xd8>
 8007f82:	2301      	movs	r3, #1
 8007f84:	eba0 0009 	sub.w	r0, r0, r9
 8007f88:	fa03 f000 	lsl.w	r0, r3, r0
 8007f8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007f8e:	4318      	orrs	r0, r3
 8007f90:	9041      	str	r0, [sp, #260]	; 0x104
 8007f92:	4655      	mov	r5, sl
 8007f94:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007f98:	2b78      	cmp	r3, #120	; 0x78
 8007f9a:	d806      	bhi.n	8007faa <__ssvfiscanf_r+0xee>
 8007f9c:	2b57      	cmp	r3, #87	; 0x57
 8007f9e:	d810      	bhi.n	8007fc2 <__ssvfiscanf_r+0x106>
 8007fa0:	2b25      	cmp	r3, #37	; 0x25
 8007fa2:	d0c6      	beq.n	8007f32 <__ssvfiscanf_r+0x76>
 8007fa4:	d856      	bhi.n	8008054 <__ssvfiscanf_r+0x198>
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d064      	beq.n	8008074 <__ssvfiscanf_r+0x1b8>
 8007faa:	2303      	movs	r3, #3
 8007fac:	9347      	str	r3, [sp, #284]	; 0x11c
 8007fae:	230a      	movs	r3, #10
 8007fb0:	9342      	str	r3, [sp, #264]	; 0x108
 8007fb2:	e071      	b.n	8008098 <__ssvfiscanf_r+0x1dc>
 8007fb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8007fb6:	fb02 1103 	mla	r1, r2, r3, r1
 8007fba:	3930      	subs	r1, #48	; 0x30
 8007fbc:	9143      	str	r1, [sp, #268]	; 0x10c
 8007fbe:	4655      	mov	r5, sl
 8007fc0:	e7d3      	b.n	8007f6a <__ssvfiscanf_r+0xae>
 8007fc2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8007fc6:	2a20      	cmp	r2, #32
 8007fc8:	d8ef      	bhi.n	8007faa <__ssvfiscanf_r+0xee>
 8007fca:	a101      	add	r1, pc, #4	; (adr r1, 8007fd0 <__ssvfiscanf_r+0x114>)
 8007fcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fd0:	08008083 	.word	0x08008083
 8007fd4:	08007fab 	.word	0x08007fab
 8007fd8:	08007fab 	.word	0x08007fab
 8007fdc:	080080e1 	.word	0x080080e1
 8007fe0:	08007fab 	.word	0x08007fab
 8007fe4:	08007fab 	.word	0x08007fab
 8007fe8:	08007fab 	.word	0x08007fab
 8007fec:	08007fab 	.word	0x08007fab
 8007ff0:	08007fab 	.word	0x08007fab
 8007ff4:	08007fab 	.word	0x08007fab
 8007ff8:	08007fab 	.word	0x08007fab
 8007ffc:	080080f7 	.word	0x080080f7
 8008000:	080080cd 	.word	0x080080cd
 8008004:	0800805b 	.word	0x0800805b
 8008008:	0800805b 	.word	0x0800805b
 800800c:	0800805b 	.word	0x0800805b
 8008010:	08007fab 	.word	0x08007fab
 8008014:	080080d1 	.word	0x080080d1
 8008018:	08007fab 	.word	0x08007fab
 800801c:	08007fab 	.word	0x08007fab
 8008020:	08007fab 	.word	0x08007fab
 8008024:	08007fab 	.word	0x08007fab
 8008028:	08008107 	.word	0x08008107
 800802c:	080080d9 	.word	0x080080d9
 8008030:	0800807b 	.word	0x0800807b
 8008034:	08007fab 	.word	0x08007fab
 8008038:	08007fab 	.word	0x08007fab
 800803c:	08008103 	.word	0x08008103
 8008040:	08007fab 	.word	0x08007fab
 8008044:	080080cd 	.word	0x080080cd
 8008048:	08007fab 	.word	0x08007fab
 800804c:	08007fab 	.word	0x08007fab
 8008050:	08008083 	.word	0x08008083
 8008054:	3b45      	subs	r3, #69	; 0x45
 8008056:	2b02      	cmp	r3, #2
 8008058:	d8a7      	bhi.n	8007faa <__ssvfiscanf_r+0xee>
 800805a:	2305      	movs	r3, #5
 800805c:	e01b      	b.n	8008096 <__ssvfiscanf_r+0x1da>
 800805e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008060:	4621      	mov	r1, r4
 8008062:	4630      	mov	r0, r6
 8008064:	4798      	blx	r3
 8008066:	2800      	cmp	r0, #0
 8008068:	f43f af68 	beq.w	8007f3c <__ssvfiscanf_r+0x80>
 800806c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800806e:	2800      	cmp	r0, #0
 8008070:	f040 808d 	bne.w	800818e <__ssvfiscanf_r+0x2d2>
 8008074:	f04f 30ff 	mov.w	r0, #4294967295
 8008078:	e08f      	b.n	800819a <__ssvfiscanf_r+0x2de>
 800807a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800807c:	f042 0220 	orr.w	r2, r2, #32
 8008080:	9241      	str	r2, [sp, #260]	; 0x104
 8008082:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008084:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008088:	9241      	str	r2, [sp, #260]	; 0x104
 800808a:	2210      	movs	r2, #16
 800808c:	2b6f      	cmp	r3, #111	; 0x6f
 800808e:	9242      	str	r2, [sp, #264]	; 0x108
 8008090:	bf34      	ite	cc
 8008092:	2303      	movcc	r3, #3
 8008094:	2304      	movcs	r3, #4
 8008096:	9347      	str	r3, [sp, #284]	; 0x11c
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	2b00      	cmp	r3, #0
 800809c:	dd42      	ble.n	8008124 <__ssvfiscanf_r+0x268>
 800809e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080a0:	0659      	lsls	r1, r3, #25
 80080a2:	d404      	bmi.n	80080ae <__ssvfiscanf_r+0x1f2>
 80080a4:	6823      	ldr	r3, [r4, #0]
 80080a6:	781a      	ldrb	r2, [r3, #0]
 80080a8:	5cba      	ldrb	r2, [r7, r2]
 80080aa:	0712      	lsls	r2, r2, #28
 80080ac:	d441      	bmi.n	8008132 <__ssvfiscanf_r+0x276>
 80080ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	dc50      	bgt.n	8008156 <__ssvfiscanf_r+0x29a>
 80080b4:	466b      	mov	r3, sp
 80080b6:	4622      	mov	r2, r4
 80080b8:	a941      	add	r1, sp, #260	; 0x104
 80080ba:	4630      	mov	r0, r6
 80080bc:	f000 f9d0 	bl	8008460 <_scanf_chars>
 80080c0:	2801      	cmp	r0, #1
 80080c2:	d06e      	beq.n	80081a2 <__ssvfiscanf_r+0x2e6>
 80080c4:	2802      	cmp	r0, #2
 80080c6:	f47f af20 	bne.w	8007f0a <__ssvfiscanf_r+0x4e>
 80080ca:	e7cf      	b.n	800806c <__ssvfiscanf_r+0x1b0>
 80080cc:	220a      	movs	r2, #10
 80080ce:	e7dd      	b.n	800808c <__ssvfiscanf_r+0x1d0>
 80080d0:	2300      	movs	r3, #0
 80080d2:	9342      	str	r3, [sp, #264]	; 0x108
 80080d4:	2303      	movs	r3, #3
 80080d6:	e7de      	b.n	8008096 <__ssvfiscanf_r+0x1da>
 80080d8:	2308      	movs	r3, #8
 80080da:	9342      	str	r3, [sp, #264]	; 0x108
 80080dc:	2304      	movs	r3, #4
 80080de:	e7da      	b.n	8008096 <__ssvfiscanf_r+0x1da>
 80080e0:	4629      	mov	r1, r5
 80080e2:	4640      	mov	r0, r8
 80080e4:	f000 fb38 	bl	8008758 <__sccl>
 80080e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080ee:	9341      	str	r3, [sp, #260]	; 0x104
 80080f0:	4605      	mov	r5, r0
 80080f2:	2301      	movs	r3, #1
 80080f4:	e7cf      	b.n	8008096 <__ssvfiscanf_r+0x1da>
 80080f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80080f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80080fc:	9341      	str	r3, [sp, #260]	; 0x104
 80080fe:	2300      	movs	r3, #0
 8008100:	e7c9      	b.n	8008096 <__ssvfiscanf_r+0x1da>
 8008102:	2302      	movs	r3, #2
 8008104:	e7c7      	b.n	8008096 <__ssvfiscanf_r+0x1da>
 8008106:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008108:	06c3      	lsls	r3, r0, #27
 800810a:	f53f aefe 	bmi.w	8007f0a <__ssvfiscanf_r+0x4e>
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008112:	1d19      	adds	r1, r3, #4
 8008114:	9100      	str	r1, [sp, #0]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f010 0f01 	tst.w	r0, #1
 800811c:	bf14      	ite	ne
 800811e:	801a      	strhne	r2, [r3, #0]
 8008120:	601a      	streq	r2, [r3, #0]
 8008122:	e6f2      	b.n	8007f0a <__ssvfiscanf_r+0x4e>
 8008124:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008126:	4621      	mov	r1, r4
 8008128:	4630      	mov	r0, r6
 800812a:	4798      	blx	r3
 800812c:	2800      	cmp	r0, #0
 800812e:	d0b6      	beq.n	800809e <__ssvfiscanf_r+0x1e2>
 8008130:	e79c      	b.n	800806c <__ssvfiscanf_r+0x1b0>
 8008132:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008134:	3201      	adds	r2, #1
 8008136:	9245      	str	r2, [sp, #276]	; 0x114
 8008138:	6862      	ldr	r2, [r4, #4]
 800813a:	3a01      	subs	r2, #1
 800813c:	2a00      	cmp	r2, #0
 800813e:	6062      	str	r2, [r4, #4]
 8008140:	dd02      	ble.n	8008148 <__ssvfiscanf_r+0x28c>
 8008142:	3301      	adds	r3, #1
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	e7ad      	b.n	80080a4 <__ssvfiscanf_r+0x1e8>
 8008148:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800814a:	4621      	mov	r1, r4
 800814c:	4630      	mov	r0, r6
 800814e:	4798      	blx	r3
 8008150:	2800      	cmp	r0, #0
 8008152:	d0a7      	beq.n	80080a4 <__ssvfiscanf_r+0x1e8>
 8008154:	e78a      	b.n	800806c <__ssvfiscanf_r+0x1b0>
 8008156:	2b04      	cmp	r3, #4
 8008158:	dc0e      	bgt.n	8008178 <__ssvfiscanf_r+0x2bc>
 800815a:	466b      	mov	r3, sp
 800815c:	4622      	mov	r2, r4
 800815e:	a941      	add	r1, sp, #260	; 0x104
 8008160:	4630      	mov	r0, r6
 8008162:	f000 f9d7 	bl	8008514 <_scanf_i>
 8008166:	e7ab      	b.n	80080c0 <__ssvfiscanf_r+0x204>
 8008168:	08007e09 	.word	0x08007e09
 800816c:	08007e83 	.word	0x08007e83
 8008170:	08009089 	.word	0x08009089
 8008174:	0800945a 	.word	0x0800945a
 8008178:	4b0b      	ldr	r3, [pc, #44]	; (80081a8 <__ssvfiscanf_r+0x2ec>)
 800817a:	2b00      	cmp	r3, #0
 800817c:	f43f aec5 	beq.w	8007f0a <__ssvfiscanf_r+0x4e>
 8008180:	466b      	mov	r3, sp
 8008182:	4622      	mov	r2, r4
 8008184:	a941      	add	r1, sp, #260	; 0x104
 8008186:	4630      	mov	r0, r6
 8008188:	f7fc fa66 	bl	8004658 <_scanf_float>
 800818c:	e798      	b.n	80080c0 <__ssvfiscanf_r+0x204>
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008194:	bf18      	it	ne
 8008196:	f04f 30ff 	movne.w	r0, #4294967295
 800819a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	9844      	ldr	r0, [sp, #272]	; 0x110
 80081a4:	e7f9      	b.n	800819a <__ssvfiscanf_r+0x2de>
 80081a6:	bf00      	nop
 80081a8:	08004659 	.word	0x08004659

080081ac <__sfputc_r>:
 80081ac:	6893      	ldr	r3, [r2, #8]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	b410      	push	{r4}
 80081b4:	6093      	str	r3, [r2, #8]
 80081b6:	da08      	bge.n	80081ca <__sfputc_r+0x1e>
 80081b8:	6994      	ldr	r4, [r2, #24]
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	db01      	blt.n	80081c2 <__sfputc_r+0x16>
 80081be:	290a      	cmp	r1, #10
 80081c0:	d103      	bne.n	80081ca <__sfputc_r+0x1e>
 80081c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c6:	f000 bbad 	b.w	8008924 <__swbuf_r>
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	1c58      	adds	r0, r3, #1
 80081ce:	6010      	str	r0, [r2, #0]
 80081d0:	7019      	strb	r1, [r3, #0]
 80081d2:	4608      	mov	r0, r1
 80081d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d8:	4770      	bx	lr

080081da <__sfputs_r>:
 80081da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081dc:	4606      	mov	r6, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	18d5      	adds	r5, r2, r3
 80081e4:	42ac      	cmp	r4, r5
 80081e6:	d101      	bne.n	80081ec <__sfputs_r+0x12>
 80081e8:	2000      	movs	r0, #0
 80081ea:	e007      	b.n	80081fc <__sfputs_r+0x22>
 80081ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f0:	463a      	mov	r2, r7
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ffda 	bl	80081ac <__sfputc_r>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d1f3      	bne.n	80081e4 <__sfputs_r+0xa>
 80081fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008200 <_vfiprintf_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	460d      	mov	r5, r1
 8008206:	b09d      	sub	sp, #116	; 0x74
 8008208:	4614      	mov	r4, r2
 800820a:	4698      	mov	r8, r3
 800820c:	4606      	mov	r6, r0
 800820e:	b118      	cbz	r0, 8008218 <_vfiprintf_r+0x18>
 8008210:	6983      	ldr	r3, [r0, #24]
 8008212:	b90b      	cbnz	r3, 8008218 <_vfiprintf_r+0x18>
 8008214:	f7fe fa96 	bl	8006744 <__sinit>
 8008218:	4b89      	ldr	r3, [pc, #548]	; (8008440 <_vfiprintf_r+0x240>)
 800821a:	429d      	cmp	r5, r3
 800821c:	d11b      	bne.n	8008256 <_vfiprintf_r+0x56>
 800821e:	6875      	ldr	r5, [r6, #4]
 8008220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008222:	07d9      	lsls	r1, r3, #31
 8008224:	d405      	bmi.n	8008232 <_vfiprintf_r+0x32>
 8008226:	89ab      	ldrh	r3, [r5, #12]
 8008228:	059a      	lsls	r2, r3, #22
 800822a:	d402      	bmi.n	8008232 <_vfiprintf_r+0x32>
 800822c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800822e:	f7fe fe9a 	bl	8006f66 <__retarget_lock_acquire_recursive>
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	071b      	lsls	r3, r3, #28
 8008236:	d501      	bpl.n	800823c <_vfiprintf_r+0x3c>
 8008238:	692b      	ldr	r3, [r5, #16]
 800823a:	b9eb      	cbnz	r3, 8008278 <_vfiprintf_r+0x78>
 800823c:	4629      	mov	r1, r5
 800823e:	4630      	mov	r0, r6
 8008240:	f000 fbd0 	bl	80089e4 <__swsetup_r>
 8008244:	b1c0      	cbz	r0, 8008278 <_vfiprintf_r+0x78>
 8008246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008248:	07dc      	lsls	r4, r3, #31
 800824a:	d50e      	bpl.n	800826a <_vfiprintf_r+0x6a>
 800824c:	f04f 30ff 	mov.w	r0, #4294967295
 8008250:	b01d      	add	sp, #116	; 0x74
 8008252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008256:	4b7b      	ldr	r3, [pc, #492]	; (8008444 <_vfiprintf_r+0x244>)
 8008258:	429d      	cmp	r5, r3
 800825a:	d101      	bne.n	8008260 <_vfiprintf_r+0x60>
 800825c:	68b5      	ldr	r5, [r6, #8]
 800825e:	e7df      	b.n	8008220 <_vfiprintf_r+0x20>
 8008260:	4b79      	ldr	r3, [pc, #484]	; (8008448 <_vfiprintf_r+0x248>)
 8008262:	429d      	cmp	r5, r3
 8008264:	bf08      	it	eq
 8008266:	68f5      	ldreq	r5, [r6, #12]
 8008268:	e7da      	b.n	8008220 <_vfiprintf_r+0x20>
 800826a:	89ab      	ldrh	r3, [r5, #12]
 800826c:	0598      	lsls	r0, r3, #22
 800826e:	d4ed      	bmi.n	800824c <_vfiprintf_r+0x4c>
 8008270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008272:	f7fe fe79 	bl	8006f68 <__retarget_lock_release_recursive>
 8008276:	e7e9      	b.n	800824c <_vfiprintf_r+0x4c>
 8008278:	2300      	movs	r3, #0
 800827a:	9309      	str	r3, [sp, #36]	; 0x24
 800827c:	2320      	movs	r3, #32
 800827e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008282:	f8cd 800c 	str.w	r8, [sp, #12]
 8008286:	2330      	movs	r3, #48	; 0x30
 8008288:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800844c <_vfiprintf_r+0x24c>
 800828c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008290:	f04f 0901 	mov.w	r9, #1
 8008294:	4623      	mov	r3, r4
 8008296:	469a      	mov	sl, r3
 8008298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800829c:	b10a      	cbz	r2, 80082a2 <_vfiprintf_r+0xa2>
 800829e:	2a25      	cmp	r2, #37	; 0x25
 80082a0:	d1f9      	bne.n	8008296 <_vfiprintf_r+0x96>
 80082a2:	ebba 0b04 	subs.w	fp, sl, r4
 80082a6:	d00b      	beq.n	80082c0 <_vfiprintf_r+0xc0>
 80082a8:	465b      	mov	r3, fp
 80082aa:	4622      	mov	r2, r4
 80082ac:	4629      	mov	r1, r5
 80082ae:	4630      	mov	r0, r6
 80082b0:	f7ff ff93 	bl	80081da <__sfputs_r>
 80082b4:	3001      	adds	r0, #1
 80082b6:	f000 80aa 	beq.w	800840e <_vfiprintf_r+0x20e>
 80082ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082bc:	445a      	add	r2, fp
 80082be:	9209      	str	r2, [sp, #36]	; 0x24
 80082c0:	f89a 3000 	ldrb.w	r3, [sl]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	f000 80a2 	beq.w	800840e <_vfiprintf_r+0x20e>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f04f 32ff 	mov.w	r2, #4294967295
 80082d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d4:	f10a 0a01 	add.w	sl, sl, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	9307      	str	r3, [sp, #28]
 80082dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082e0:	931a      	str	r3, [sp, #104]	; 0x68
 80082e2:	4654      	mov	r4, sl
 80082e4:	2205      	movs	r2, #5
 80082e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ea:	4858      	ldr	r0, [pc, #352]	; (800844c <_vfiprintf_r+0x24c>)
 80082ec:	f7f7 ff88 	bl	8000200 <memchr>
 80082f0:	9a04      	ldr	r2, [sp, #16]
 80082f2:	b9d8      	cbnz	r0, 800832c <_vfiprintf_r+0x12c>
 80082f4:	06d1      	lsls	r1, r2, #27
 80082f6:	bf44      	itt	mi
 80082f8:	2320      	movmi	r3, #32
 80082fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082fe:	0713      	lsls	r3, r2, #28
 8008300:	bf44      	itt	mi
 8008302:	232b      	movmi	r3, #43	; 0x2b
 8008304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008308:	f89a 3000 	ldrb.w	r3, [sl]
 800830c:	2b2a      	cmp	r3, #42	; 0x2a
 800830e:	d015      	beq.n	800833c <_vfiprintf_r+0x13c>
 8008310:	9a07      	ldr	r2, [sp, #28]
 8008312:	4654      	mov	r4, sl
 8008314:	2000      	movs	r0, #0
 8008316:	f04f 0c0a 	mov.w	ip, #10
 800831a:	4621      	mov	r1, r4
 800831c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008320:	3b30      	subs	r3, #48	; 0x30
 8008322:	2b09      	cmp	r3, #9
 8008324:	d94e      	bls.n	80083c4 <_vfiprintf_r+0x1c4>
 8008326:	b1b0      	cbz	r0, 8008356 <_vfiprintf_r+0x156>
 8008328:	9207      	str	r2, [sp, #28]
 800832a:	e014      	b.n	8008356 <_vfiprintf_r+0x156>
 800832c:	eba0 0308 	sub.w	r3, r0, r8
 8008330:	fa09 f303 	lsl.w	r3, r9, r3
 8008334:	4313      	orrs	r3, r2
 8008336:	9304      	str	r3, [sp, #16]
 8008338:	46a2      	mov	sl, r4
 800833a:	e7d2      	b.n	80082e2 <_vfiprintf_r+0xe2>
 800833c:	9b03      	ldr	r3, [sp, #12]
 800833e:	1d19      	adds	r1, r3, #4
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	9103      	str	r1, [sp, #12]
 8008344:	2b00      	cmp	r3, #0
 8008346:	bfbb      	ittet	lt
 8008348:	425b      	neglt	r3, r3
 800834a:	f042 0202 	orrlt.w	r2, r2, #2
 800834e:	9307      	strge	r3, [sp, #28]
 8008350:	9307      	strlt	r3, [sp, #28]
 8008352:	bfb8      	it	lt
 8008354:	9204      	strlt	r2, [sp, #16]
 8008356:	7823      	ldrb	r3, [r4, #0]
 8008358:	2b2e      	cmp	r3, #46	; 0x2e
 800835a:	d10c      	bne.n	8008376 <_vfiprintf_r+0x176>
 800835c:	7863      	ldrb	r3, [r4, #1]
 800835e:	2b2a      	cmp	r3, #42	; 0x2a
 8008360:	d135      	bne.n	80083ce <_vfiprintf_r+0x1ce>
 8008362:	9b03      	ldr	r3, [sp, #12]
 8008364:	1d1a      	adds	r2, r3, #4
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	9203      	str	r2, [sp, #12]
 800836a:	2b00      	cmp	r3, #0
 800836c:	bfb8      	it	lt
 800836e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008372:	3402      	adds	r4, #2
 8008374:	9305      	str	r3, [sp, #20]
 8008376:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800845c <_vfiprintf_r+0x25c>
 800837a:	7821      	ldrb	r1, [r4, #0]
 800837c:	2203      	movs	r2, #3
 800837e:	4650      	mov	r0, sl
 8008380:	f7f7 ff3e 	bl	8000200 <memchr>
 8008384:	b140      	cbz	r0, 8008398 <_vfiprintf_r+0x198>
 8008386:	2340      	movs	r3, #64	; 0x40
 8008388:	eba0 000a 	sub.w	r0, r0, sl
 800838c:	fa03 f000 	lsl.w	r0, r3, r0
 8008390:	9b04      	ldr	r3, [sp, #16]
 8008392:	4303      	orrs	r3, r0
 8008394:	3401      	adds	r4, #1
 8008396:	9304      	str	r3, [sp, #16]
 8008398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800839c:	482c      	ldr	r0, [pc, #176]	; (8008450 <_vfiprintf_r+0x250>)
 800839e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083a2:	2206      	movs	r2, #6
 80083a4:	f7f7 ff2c 	bl	8000200 <memchr>
 80083a8:	2800      	cmp	r0, #0
 80083aa:	d03f      	beq.n	800842c <_vfiprintf_r+0x22c>
 80083ac:	4b29      	ldr	r3, [pc, #164]	; (8008454 <_vfiprintf_r+0x254>)
 80083ae:	bb1b      	cbnz	r3, 80083f8 <_vfiprintf_r+0x1f8>
 80083b0:	9b03      	ldr	r3, [sp, #12]
 80083b2:	3307      	adds	r3, #7
 80083b4:	f023 0307 	bic.w	r3, r3, #7
 80083b8:	3308      	adds	r3, #8
 80083ba:	9303      	str	r3, [sp, #12]
 80083bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083be:	443b      	add	r3, r7
 80083c0:	9309      	str	r3, [sp, #36]	; 0x24
 80083c2:	e767      	b.n	8008294 <_vfiprintf_r+0x94>
 80083c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80083c8:	460c      	mov	r4, r1
 80083ca:	2001      	movs	r0, #1
 80083cc:	e7a5      	b.n	800831a <_vfiprintf_r+0x11a>
 80083ce:	2300      	movs	r3, #0
 80083d0:	3401      	adds	r4, #1
 80083d2:	9305      	str	r3, [sp, #20]
 80083d4:	4619      	mov	r1, r3
 80083d6:	f04f 0c0a 	mov.w	ip, #10
 80083da:	4620      	mov	r0, r4
 80083dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083e0:	3a30      	subs	r2, #48	; 0x30
 80083e2:	2a09      	cmp	r2, #9
 80083e4:	d903      	bls.n	80083ee <_vfiprintf_r+0x1ee>
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0c5      	beq.n	8008376 <_vfiprintf_r+0x176>
 80083ea:	9105      	str	r1, [sp, #20]
 80083ec:	e7c3      	b.n	8008376 <_vfiprintf_r+0x176>
 80083ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80083f2:	4604      	mov	r4, r0
 80083f4:	2301      	movs	r3, #1
 80083f6:	e7f0      	b.n	80083da <_vfiprintf_r+0x1da>
 80083f8:	ab03      	add	r3, sp, #12
 80083fa:	9300      	str	r3, [sp, #0]
 80083fc:	462a      	mov	r2, r5
 80083fe:	4b16      	ldr	r3, [pc, #88]	; (8008458 <_vfiprintf_r+0x258>)
 8008400:	a904      	add	r1, sp, #16
 8008402:	4630      	mov	r0, r6
 8008404:	f7fb fd5e 	bl	8003ec4 <_printf_float>
 8008408:	4607      	mov	r7, r0
 800840a:	1c78      	adds	r0, r7, #1
 800840c:	d1d6      	bne.n	80083bc <_vfiprintf_r+0x1bc>
 800840e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008410:	07d9      	lsls	r1, r3, #31
 8008412:	d405      	bmi.n	8008420 <_vfiprintf_r+0x220>
 8008414:	89ab      	ldrh	r3, [r5, #12]
 8008416:	059a      	lsls	r2, r3, #22
 8008418:	d402      	bmi.n	8008420 <_vfiprintf_r+0x220>
 800841a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800841c:	f7fe fda4 	bl	8006f68 <__retarget_lock_release_recursive>
 8008420:	89ab      	ldrh	r3, [r5, #12]
 8008422:	065b      	lsls	r3, r3, #25
 8008424:	f53f af12 	bmi.w	800824c <_vfiprintf_r+0x4c>
 8008428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842a:	e711      	b.n	8008250 <_vfiprintf_r+0x50>
 800842c:	ab03      	add	r3, sp, #12
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	462a      	mov	r2, r5
 8008432:	4b09      	ldr	r3, [pc, #36]	; (8008458 <_vfiprintf_r+0x258>)
 8008434:	a904      	add	r1, sp, #16
 8008436:	4630      	mov	r0, r6
 8008438:	f7fb ffe8 	bl	800440c <_printf_i>
 800843c:	e7e4      	b.n	8008408 <_vfiprintf_r+0x208>
 800843e:	bf00      	nop
 8008440:	0800923c 	.word	0x0800923c
 8008444:	0800925c 	.word	0x0800925c
 8008448:	0800921c 	.word	0x0800921c
 800844c:	08009454 	.word	0x08009454
 8008450:	0800945e 	.word	0x0800945e
 8008454:	08003ec5 	.word	0x08003ec5
 8008458:	080081db 	.word	0x080081db
 800845c:	0800945a 	.word	0x0800945a

08008460 <_scanf_chars>:
 8008460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008464:	4615      	mov	r5, r2
 8008466:	688a      	ldr	r2, [r1, #8]
 8008468:	4680      	mov	r8, r0
 800846a:	460c      	mov	r4, r1
 800846c:	b932      	cbnz	r2, 800847c <_scanf_chars+0x1c>
 800846e:	698a      	ldr	r2, [r1, #24]
 8008470:	2a00      	cmp	r2, #0
 8008472:	bf0c      	ite	eq
 8008474:	2201      	moveq	r2, #1
 8008476:	f04f 32ff 	movne.w	r2, #4294967295
 800847a:	608a      	str	r2, [r1, #8]
 800847c:	6822      	ldr	r2, [r4, #0]
 800847e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008510 <_scanf_chars+0xb0>
 8008482:	06d1      	lsls	r1, r2, #27
 8008484:	bf5f      	itttt	pl
 8008486:	681a      	ldrpl	r2, [r3, #0]
 8008488:	1d11      	addpl	r1, r2, #4
 800848a:	6019      	strpl	r1, [r3, #0]
 800848c:	6816      	ldrpl	r6, [r2, #0]
 800848e:	2700      	movs	r7, #0
 8008490:	69a0      	ldr	r0, [r4, #24]
 8008492:	b188      	cbz	r0, 80084b8 <_scanf_chars+0x58>
 8008494:	2801      	cmp	r0, #1
 8008496:	d107      	bne.n	80084a8 <_scanf_chars+0x48>
 8008498:	682a      	ldr	r2, [r5, #0]
 800849a:	7811      	ldrb	r1, [r2, #0]
 800849c:	6962      	ldr	r2, [r4, #20]
 800849e:	5c52      	ldrb	r2, [r2, r1]
 80084a0:	b952      	cbnz	r2, 80084b8 <_scanf_chars+0x58>
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	d031      	beq.n	800850a <_scanf_chars+0xaa>
 80084a6:	e022      	b.n	80084ee <_scanf_chars+0x8e>
 80084a8:	2802      	cmp	r0, #2
 80084aa:	d120      	bne.n	80084ee <_scanf_chars+0x8e>
 80084ac:	682b      	ldr	r3, [r5, #0]
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f813 3009 	ldrb.w	r3, [r3, r9]
 80084b4:	071b      	lsls	r3, r3, #28
 80084b6:	d41a      	bmi.n	80084ee <_scanf_chars+0x8e>
 80084b8:	6823      	ldr	r3, [r4, #0]
 80084ba:	06da      	lsls	r2, r3, #27
 80084bc:	bf5e      	ittt	pl
 80084be:	682b      	ldrpl	r3, [r5, #0]
 80084c0:	781b      	ldrbpl	r3, [r3, #0]
 80084c2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80084c6:	682a      	ldr	r2, [r5, #0]
 80084c8:	686b      	ldr	r3, [r5, #4]
 80084ca:	3201      	adds	r2, #1
 80084cc:	602a      	str	r2, [r5, #0]
 80084ce:	68a2      	ldr	r2, [r4, #8]
 80084d0:	3b01      	subs	r3, #1
 80084d2:	3a01      	subs	r2, #1
 80084d4:	606b      	str	r3, [r5, #4]
 80084d6:	3701      	adds	r7, #1
 80084d8:	60a2      	str	r2, [r4, #8]
 80084da:	b142      	cbz	r2, 80084ee <_scanf_chars+0x8e>
 80084dc:	2b00      	cmp	r3, #0
 80084de:	dcd7      	bgt.n	8008490 <_scanf_chars+0x30>
 80084e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084e4:	4629      	mov	r1, r5
 80084e6:	4640      	mov	r0, r8
 80084e8:	4798      	blx	r3
 80084ea:	2800      	cmp	r0, #0
 80084ec:	d0d0      	beq.n	8008490 <_scanf_chars+0x30>
 80084ee:	6823      	ldr	r3, [r4, #0]
 80084f0:	f013 0310 	ands.w	r3, r3, #16
 80084f4:	d105      	bne.n	8008502 <_scanf_chars+0xa2>
 80084f6:	68e2      	ldr	r2, [r4, #12]
 80084f8:	3201      	adds	r2, #1
 80084fa:	60e2      	str	r2, [r4, #12]
 80084fc:	69a2      	ldr	r2, [r4, #24]
 80084fe:	b102      	cbz	r2, 8008502 <_scanf_chars+0xa2>
 8008500:	7033      	strb	r3, [r6, #0]
 8008502:	6923      	ldr	r3, [r4, #16]
 8008504:	443b      	add	r3, r7
 8008506:	6123      	str	r3, [r4, #16]
 8008508:	2000      	movs	r0, #0
 800850a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800850e:	bf00      	nop
 8008510:	08009089 	.word	0x08009089

08008514 <_scanf_i>:
 8008514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008518:	4698      	mov	r8, r3
 800851a:	4b76      	ldr	r3, [pc, #472]	; (80086f4 <_scanf_i+0x1e0>)
 800851c:	460c      	mov	r4, r1
 800851e:	4682      	mov	sl, r0
 8008520:	4616      	mov	r6, r2
 8008522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008526:	b087      	sub	sp, #28
 8008528:	ab03      	add	r3, sp, #12
 800852a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800852e:	4b72      	ldr	r3, [pc, #456]	; (80086f8 <_scanf_i+0x1e4>)
 8008530:	69a1      	ldr	r1, [r4, #24]
 8008532:	4a72      	ldr	r2, [pc, #456]	; (80086fc <_scanf_i+0x1e8>)
 8008534:	2903      	cmp	r1, #3
 8008536:	bf18      	it	ne
 8008538:	461a      	movne	r2, r3
 800853a:	68a3      	ldr	r3, [r4, #8]
 800853c:	9201      	str	r2, [sp, #4]
 800853e:	1e5a      	subs	r2, r3, #1
 8008540:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008544:	bf88      	it	hi
 8008546:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800854a:	4627      	mov	r7, r4
 800854c:	bf82      	ittt	hi
 800854e:	eb03 0905 	addhi.w	r9, r3, r5
 8008552:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008556:	60a3      	strhi	r3, [r4, #8]
 8008558:	f857 3b1c 	ldr.w	r3, [r7], #28
 800855c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008560:	bf98      	it	ls
 8008562:	f04f 0900 	movls.w	r9, #0
 8008566:	6023      	str	r3, [r4, #0]
 8008568:	463d      	mov	r5, r7
 800856a:	f04f 0b00 	mov.w	fp, #0
 800856e:	6831      	ldr	r1, [r6, #0]
 8008570:	ab03      	add	r3, sp, #12
 8008572:	7809      	ldrb	r1, [r1, #0]
 8008574:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008578:	2202      	movs	r2, #2
 800857a:	f7f7 fe41 	bl	8000200 <memchr>
 800857e:	b328      	cbz	r0, 80085cc <_scanf_i+0xb8>
 8008580:	f1bb 0f01 	cmp.w	fp, #1
 8008584:	d159      	bne.n	800863a <_scanf_i+0x126>
 8008586:	6862      	ldr	r2, [r4, #4]
 8008588:	b92a      	cbnz	r2, 8008596 <_scanf_i+0x82>
 800858a:	6822      	ldr	r2, [r4, #0]
 800858c:	2308      	movs	r3, #8
 800858e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008592:	6063      	str	r3, [r4, #4]
 8008594:	6022      	str	r2, [r4, #0]
 8008596:	6822      	ldr	r2, [r4, #0]
 8008598:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800859c:	6022      	str	r2, [r4, #0]
 800859e:	68a2      	ldr	r2, [r4, #8]
 80085a0:	1e51      	subs	r1, r2, #1
 80085a2:	60a1      	str	r1, [r4, #8]
 80085a4:	b192      	cbz	r2, 80085cc <_scanf_i+0xb8>
 80085a6:	6832      	ldr	r2, [r6, #0]
 80085a8:	1c51      	adds	r1, r2, #1
 80085aa:	6031      	str	r1, [r6, #0]
 80085ac:	7812      	ldrb	r2, [r2, #0]
 80085ae:	f805 2b01 	strb.w	r2, [r5], #1
 80085b2:	6872      	ldr	r2, [r6, #4]
 80085b4:	3a01      	subs	r2, #1
 80085b6:	2a00      	cmp	r2, #0
 80085b8:	6072      	str	r2, [r6, #4]
 80085ba:	dc07      	bgt.n	80085cc <_scanf_i+0xb8>
 80085bc:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80085c0:	4631      	mov	r1, r6
 80085c2:	4650      	mov	r0, sl
 80085c4:	4790      	blx	r2
 80085c6:	2800      	cmp	r0, #0
 80085c8:	f040 8085 	bne.w	80086d6 <_scanf_i+0x1c2>
 80085cc:	f10b 0b01 	add.w	fp, fp, #1
 80085d0:	f1bb 0f03 	cmp.w	fp, #3
 80085d4:	d1cb      	bne.n	800856e <_scanf_i+0x5a>
 80085d6:	6863      	ldr	r3, [r4, #4]
 80085d8:	b90b      	cbnz	r3, 80085de <_scanf_i+0xca>
 80085da:	230a      	movs	r3, #10
 80085dc:	6063      	str	r3, [r4, #4]
 80085de:	6863      	ldr	r3, [r4, #4]
 80085e0:	4947      	ldr	r1, [pc, #284]	; (8008700 <_scanf_i+0x1ec>)
 80085e2:	6960      	ldr	r0, [r4, #20]
 80085e4:	1ac9      	subs	r1, r1, r3
 80085e6:	f000 f8b7 	bl	8008758 <__sccl>
 80085ea:	f04f 0b00 	mov.w	fp, #0
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	6822      	ldr	r2, [r4, #0]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d03d      	beq.n	8008672 <_scanf_i+0x15e>
 80085f6:	6831      	ldr	r1, [r6, #0]
 80085f8:	6960      	ldr	r0, [r4, #20]
 80085fa:	f891 c000 	ldrb.w	ip, [r1]
 80085fe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008602:	2800      	cmp	r0, #0
 8008604:	d035      	beq.n	8008672 <_scanf_i+0x15e>
 8008606:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800860a:	d124      	bne.n	8008656 <_scanf_i+0x142>
 800860c:	0510      	lsls	r0, r2, #20
 800860e:	d522      	bpl.n	8008656 <_scanf_i+0x142>
 8008610:	f10b 0b01 	add.w	fp, fp, #1
 8008614:	f1b9 0f00 	cmp.w	r9, #0
 8008618:	d003      	beq.n	8008622 <_scanf_i+0x10e>
 800861a:	3301      	adds	r3, #1
 800861c:	f109 39ff 	add.w	r9, r9, #4294967295
 8008620:	60a3      	str	r3, [r4, #8]
 8008622:	6873      	ldr	r3, [r6, #4]
 8008624:	3b01      	subs	r3, #1
 8008626:	2b00      	cmp	r3, #0
 8008628:	6073      	str	r3, [r6, #4]
 800862a:	dd1b      	ble.n	8008664 <_scanf_i+0x150>
 800862c:	6833      	ldr	r3, [r6, #0]
 800862e:	3301      	adds	r3, #1
 8008630:	6033      	str	r3, [r6, #0]
 8008632:	68a3      	ldr	r3, [r4, #8]
 8008634:	3b01      	subs	r3, #1
 8008636:	60a3      	str	r3, [r4, #8]
 8008638:	e7d9      	b.n	80085ee <_scanf_i+0xda>
 800863a:	f1bb 0f02 	cmp.w	fp, #2
 800863e:	d1ae      	bne.n	800859e <_scanf_i+0x8a>
 8008640:	6822      	ldr	r2, [r4, #0]
 8008642:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008646:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800864a:	d1bf      	bne.n	80085cc <_scanf_i+0xb8>
 800864c:	2310      	movs	r3, #16
 800864e:	6063      	str	r3, [r4, #4]
 8008650:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008654:	e7a2      	b.n	800859c <_scanf_i+0x88>
 8008656:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800865a:	6022      	str	r2, [r4, #0]
 800865c:	780b      	ldrb	r3, [r1, #0]
 800865e:	f805 3b01 	strb.w	r3, [r5], #1
 8008662:	e7de      	b.n	8008622 <_scanf_i+0x10e>
 8008664:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008668:	4631      	mov	r1, r6
 800866a:	4650      	mov	r0, sl
 800866c:	4798      	blx	r3
 800866e:	2800      	cmp	r0, #0
 8008670:	d0df      	beq.n	8008632 <_scanf_i+0x11e>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	05db      	lsls	r3, r3, #23
 8008676:	d50d      	bpl.n	8008694 <_scanf_i+0x180>
 8008678:	42bd      	cmp	r5, r7
 800867a:	d909      	bls.n	8008690 <_scanf_i+0x17c>
 800867c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008680:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008684:	4632      	mov	r2, r6
 8008686:	4650      	mov	r0, sl
 8008688:	4798      	blx	r3
 800868a:	f105 39ff 	add.w	r9, r5, #4294967295
 800868e:	464d      	mov	r5, r9
 8008690:	42bd      	cmp	r5, r7
 8008692:	d02d      	beq.n	80086f0 <_scanf_i+0x1dc>
 8008694:	6822      	ldr	r2, [r4, #0]
 8008696:	f012 0210 	ands.w	r2, r2, #16
 800869a:	d113      	bne.n	80086c4 <_scanf_i+0x1b0>
 800869c:	702a      	strb	r2, [r5, #0]
 800869e:	6863      	ldr	r3, [r4, #4]
 80086a0:	9e01      	ldr	r6, [sp, #4]
 80086a2:	4639      	mov	r1, r7
 80086a4:	4650      	mov	r0, sl
 80086a6:	47b0      	blx	r6
 80086a8:	6821      	ldr	r1, [r4, #0]
 80086aa:	f8d8 3000 	ldr.w	r3, [r8]
 80086ae:	f011 0f20 	tst.w	r1, #32
 80086b2:	d013      	beq.n	80086dc <_scanf_i+0x1c8>
 80086b4:	1d1a      	adds	r2, r3, #4
 80086b6:	f8c8 2000 	str.w	r2, [r8]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6018      	str	r0, [r3, #0]
 80086be:	68e3      	ldr	r3, [r4, #12]
 80086c0:	3301      	adds	r3, #1
 80086c2:	60e3      	str	r3, [r4, #12]
 80086c4:	1bed      	subs	r5, r5, r7
 80086c6:	44ab      	add	fp, r5
 80086c8:	6925      	ldr	r5, [r4, #16]
 80086ca:	445d      	add	r5, fp
 80086cc:	6125      	str	r5, [r4, #16]
 80086ce:	2000      	movs	r0, #0
 80086d0:	b007      	add	sp, #28
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	f04f 0b00 	mov.w	fp, #0
 80086da:	e7ca      	b.n	8008672 <_scanf_i+0x15e>
 80086dc:	1d1a      	adds	r2, r3, #4
 80086de:	f8c8 2000 	str.w	r2, [r8]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f011 0f01 	tst.w	r1, #1
 80086e8:	bf14      	ite	ne
 80086ea:	8018      	strhne	r0, [r3, #0]
 80086ec:	6018      	streq	r0, [r3, #0]
 80086ee:	e7e6      	b.n	80086be <_scanf_i+0x1aa>
 80086f0:	2001      	movs	r0, #1
 80086f2:	e7ed      	b.n	80086d0 <_scanf_i+0x1bc>
 80086f4:	08008fd8 	.word	0x08008fd8
 80086f8:	080088ad 	.word	0x080088ad
 80086fc:	08005955 	.word	0x08005955
 8008700:	0800947e 	.word	0x0800947e

08008704 <_read_r>:
 8008704:	b538      	push	{r3, r4, r5, lr}
 8008706:	4d07      	ldr	r5, [pc, #28]	; (8008724 <_read_r+0x20>)
 8008708:	4604      	mov	r4, r0
 800870a:	4608      	mov	r0, r1
 800870c:	4611      	mov	r1, r2
 800870e:	2200      	movs	r2, #0
 8008710:	602a      	str	r2, [r5, #0]
 8008712:	461a      	mov	r2, r3
 8008714:	f7f9 f83c 	bl	8001790 <_read>
 8008718:	1c43      	adds	r3, r0, #1
 800871a:	d102      	bne.n	8008722 <_read_r+0x1e>
 800871c:	682b      	ldr	r3, [r5, #0]
 800871e:	b103      	cbz	r3, 8008722 <_read_r+0x1e>
 8008720:	6023      	str	r3, [r4, #0]
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	20000378 	.word	0x20000378

08008728 <nan>:
 8008728:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008730 <nan+0x8>
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	00000000 	.word	0x00000000
 8008734:	7ff80000 	.word	0x7ff80000

08008738 <_sbrk_r>:
 8008738:	b538      	push	{r3, r4, r5, lr}
 800873a:	4d06      	ldr	r5, [pc, #24]	; (8008754 <_sbrk_r+0x1c>)
 800873c:	2300      	movs	r3, #0
 800873e:	4604      	mov	r4, r0
 8008740:	4608      	mov	r0, r1
 8008742:	602b      	str	r3, [r5, #0]
 8008744:	f7f9 f892 	bl	800186c <_sbrk>
 8008748:	1c43      	adds	r3, r0, #1
 800874a:	d102      	bne.n	8008752 <_sbrk_r+0x1a>
 800874c:	682b      	ldr	r3, [r5, #0]
 800874e:	b103      	cbz	r3, 8008752 <_sbrk_r+0x1a>
 8008750:	6023      	str	r3, [r4, #0]
 8008752:	bd38      	pop	{r3, r4, r5, pc}
 8008754:	20000378 	.word	0x20000378

08008758 <__sccl>:
 8008758:	b570      	push	{r4, r5, r6, lr}
 800875a:	780b      	ldrb	r3, [r1, #0]
 800875c:	4604      	mov	r4, r0
 800875e:	2b5e      	cmp	r3, #94	; 0x5e
 8008760:	bf0b      	itete	eq
 8008762:	784b      	ldrbeq	r3, [r1, #1]
 8008764:	1c48      	addne	r0, r1, #1
 8008766:	1c88      	addeq	r0, r1, #2
 8008768:	2200      	movne	r2, #0
 800876a:	bf08      	it	eq
 800876c:	2201      	moveq	r2, #1
 800876e:	1e61      	subs	r1, r4, #1
 8008770:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008774:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008778:	42a9      	cmp	r1, r5
 800877a:	d1fb      	bne.n	8008774 <__sccl+0x1c>
 800877c:	b90b      	cbnz	r3, 8008782 <__sccl+0x2a>
 800877e:	3801      	subs	r0, #1
 8008780:	bd70      	pop	{r4, r5, r6, pc}
 8008782:	f082 0201 	eor.w	r2, r2, #1
 8008786:	54e2      	strb	r2, [r4, r3]
 8008788:	4605      	mov	r5, r0
 800878a:	4628      	mov	r0, r5
 800878c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008790:	292d      	cmp	r1, #45	; 0x2d
 8008792:	d006      	beq.n	80087a2 <__sccl+0x4a>
 8008794:	295d      	cmp	r1, #93	; 0x5d
 8008796:	d0f3      	beq.n	8008780 <__sccl+0x28>
 8008798:	b909      	cbnz	r1, 800879e <__sccl+0x46>
 800879a:	4628      	mov	r0, r5
 800879c:	e7f0      	b.n	8008780 <__sccl+0x28>
 800879e:	460b      	mov	r3, r1
 80087a0:	e7f1      	b.n	8008786 <__sccl+0x2e>
 80087a2:	786e      	ldrb	r6, [r5, #1]
 80087a4:	2e5d      	cmp	r6, #93	; 0x5d
 80087a6:	d0fa      	beq.n	800879e <__sccl+0x46>
 80087a8:	42b3      	cmp	r3, r6
 80087aa:	dcf8      	bgt.n	800879e <__sccl+0x46>
 80087ac:	3502      	adds	r5, #2
 80087ae:	4619      	mov	r1, r3
 80087b0:	3101      	adds	r1, #1
 80087b2:	428e      	cmp	r6, r1
 80087b4:	5462      	strb	r2, [r4, r1]
 80087b6:	dcfb      	bgt.n	80087b0 <__sccl+0x58>
 80087b8:	1af1      	subs	r1, r6, r3
 80087ba:	3901      	subs	r1, #1
 80087bc:	1c58      	adds	r0, r3, #1
 80087be:	42b3      	cmp	r3, r6
 80087c0:	bfa8      	it	ge
 80087c2:	2100      	movge	r1, #0
 80087c4:	1843      	adds	r3, r0, r1
 80087c6:	e7e0      	b.n	800878a <__sccl+0x32>

080087c8 <_strtoul_l.constprop.0>:
 80087c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80087cc:	4f36      	ldr	r7, [pc, #216]	; (80088a8 <_strtoul_l.constprop.0+0xe0>)
 80087ce:	4686      	mov	lr, r0
 80087d0:	460d      	mov	r5, r1
 80087d2:	4628      	mov	r0, r5
 80087d4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087d8:	5de6      	ldrb	r6, [r4, r7]
 80087da:	f016 0608 	ands.w	r6, r6, #8
 80087de:	d1f8      	bne.n	80087d2 <_strtoul_l.constprop.0+0xa>
 80087e0:	2c2d      	cmp	r4, #45	; 0x2d
 80087e2:	d12f      	bne.n	8008844 <_strtoul_l.constprop.0+0x7c>
 80087e4:	782c      	ldrb	r4, [r5, #0]
 80087e6:	2601      	movs	r6, #1
 80087e8:	1c85      	adds	r5, r0, #2
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d057      	beq.n	800889e <_strtoul_l.constprop.0+0xd6>
 80087ee:	2b10      	cmp	r3, #16
 80087f0:	d109      	bne.n	8008806 <_strtoul_l.constprop.0+0x3e>
 80087f2:	2c30      	cmp	r4, #48	; 0x30
 80087f4:	d107      	bne.n	8008806 <_strtoul_l.constprop.0+0x3e>
 80087f6:	7828      	ldrb	r0, [r5, #0]
 80087f8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80087fc:	2858      	cmp	r0, #88	; 0x58
 80087fe:	d149      	bne.n	8008894 <_strtoul_l.constprop.0+0xcc>
 8008800:	786c      	ldrb	r4, [r5, #1]
 8008802:	2310      	movs	r3, #16
 8008804:	3502      	adds	r5, #2
 8008806:	f04f 38ff 	mov.w	r8, #4294967295
 800880a:	2700      	movs	r7, #0
 800880c:	fbb8 f8f3 	udiv	r8, r8, r3
 8008810:	fb03 f908 	mul.w	r9, r3, r8
 8008814:	ea6f 0909 	mvn.w	r9, r9
 8008818:	4638      	mov	r0, r7
 800881a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800881e:	f1bc 0f09 	cmp.w	ip, #9
 8008822:	d814      	bhi.n	800884e <_strtoul_l.constprop.0+0x86>
 8008824:	4664      	mov	r4, ip
 8008826:	42a3      	cmp	r3, r4
 8008828:	dd22      	ble.n	8008870 <_strtoul_l.constprop.0+0xa8>
 800882a:	2f00      	cmp	r7, #0
 800882c:	db1d      	blt.n	800886a <_strtoul_l.constprop.0+0xa2>
 800882e:	4580      	cmp	r8, r0
 8008830:	d31b      	bcc.n	800886a <_strtoul_l.constprop.0+0xa2>
 8008832:	d101      	bne.n	8008838 <_strtoul_l.constprop.0+0x70>
 8008834:	45a1      	cmp	r9, r4
 8008836:	db18      	blt.n	800886a <_strtoul_l.constprop.0+0xa2>
 8008838:	fb00 4003 	mla	r0, r0, r3, r4
 800883c:	2701      	movs	r7, #1
 800883e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008842:	e7ea      	b.n	800881a <_strtoul_l.constprop.0+0x52>
 8008844:	2c2b      	cmp	r4, #43	; 0x2b
 8008846:	bf04      	itt	eq
 8008848:	782c      	ldrbeq	r4, [r5, #0]
 800884a:	1c85      	addeq	r5, r0, #2
 800884c:	e7cd      	b.n	80087ea <_strtoul_l.constprop.0+0x22>
 800884e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008852:	f1bc 0f19 	cmp.w	ip, #25
 8008856:	d801      	bhi.n	800885c <_strtoul_l.constprop.0+0x94>
 8008858:	3c37      	subs	r4, #55	; 0x37
 800885a:	e7e4      	b.n	8008826 <_strtoul_l.constprop.0+0x5e>
 800885c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008860:	f1bc 0f19 	cmp.w	ip, #25
 8008864:	d804      	bhi.n	8008870 <_strtoul_l.constprop.0+0xa8>
 8008866:	3c57      	subs	r4, #87	; 0x57
 8008868:	e7dd      	b.n	8008826 <_strtoul_l.constprop.0+0x5e>
 800886a:	f04f 37ff 	mov.w	r7, #4294967295
 800886e:	e7e6      	b.n	800883e <_strtoul_l.constprop.0+0x76>
 8008870:	2f00      	cmp	r7, #0
 8008872:	da07      	bge.n	8008884 <_strtoul_l.constprop.0+0xbc>
 8008874:	2322      	movs	r3, #34	; 0x22
 8008876:	f8ce 3000 	str.w	r3, [lr]
 800887a:	f04f 30ff 	mov.w	r0, #4294967295
 800887e:	b932      	cbnz	r2, 800888e <_strtoul_l.constprop.0+0xc6>
 8008880:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008884:	b106      	cbz	r6, 8008888 <_strtoul_l.constprop.0+0xc0>
 8008886:	4240      	negs	r0, r0
 8008888:	2a00      	cmp	r2, #0
 800888a:	d0f9      	beq.n	8008880 <_strtoul_l.constprop.0+0xb8>
 800888c:	b107      	cbz	r7, 8008890 <_strtoul_l.constprop.0+0xc8>
 800888e:	1e69      	subs	r1, r5, #1
 8008890:	6011      	str	r1, [r2, #0]
 8008892:	e7f5      	b.n	8008880 <_strtoul_l.constprop.0+0xb8>
 8008894:	2430      	movs	r4, #48	; 0x30
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1b5      	bne.n	8008806 <_strtoul_l.constprop.0+0x3e>
 800889a:	2308      	movs	r3, #8
 800889c:	e7b3      	b.n	8008806 <_strtoul_l.constprop.0+0x3e>
 800889e:	2c30      	cmp	r4, #48	; 0x30
 80088a0:	d0a9      	beq.n	80087f6 <_strtoul_l.constprop.0+0x2e>
 80088a2:	230a      	movs	r3, #10
 80088a4:	e7af      	b.n	8008806 <_strtoul_l.constprop.0+0x3e>
 80088a6:	bf00      	nop
 80088a8:	08009089 	.word	0x08009089

080088ac <_strtoul_r>:
 80088ac:	f7ff bf8c 	b.w	80087c8 <_strtoul_l.constprop.0>

080088b0 <__submore>:
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	460c      	mov	r4, r1
 80088b6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80088b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088bc:	4299      	cmp	r1, r3
 80088be:	d11d      	bne.n	80088fc <__submore+0x4c>
 80088c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80088c4:	f7ff f8d0 	bl	8007a68 <_malloc_r>
 80088c8:	b918      	cbnz	r0, 80088d2 <__submore+0x22>
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295
 80088ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80088d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80088dc:	6360      	str	r0, [r4, #52]	; 0x34
 80088de:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80088e2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088e6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80088ea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088ee:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80088f2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80088f6:	6020      	str	r0, [r4, #0]
 80088f8:	2000      	movs	r0, #0
 80088fa:	e7e8      	b.n	80088ce <__submore+0x1e>
 80088fc:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80088fe:	0077      	lsls	r7, r6, #1
 8008900:	463a      	mov	r2, r7
 8008902:	f000 fa5b 	bl	8008dbc <_realloc_r>
 8008906:	4605      	mov	r5, r0
 8008908:	2800      	cmp	r0, #0
 800890a:	d0de      	beq.n	80088ca <__submore+0x1a>
 800890c:	eb00 0806 	add.w	r8, r0, r6
 8008910:	4601      	mov	r1, r0
 8008912:	4632      	mov	r2, r6
 8008914:	4640      	mov	r0, r8
 8008916:	f7fe fb55 	bl	8006fc4 <memcpy>
 800891a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800891e:	f8c4 8000 	str.w	r8, [r4]
 8008922:	e7e9      	b.n	80088f8 <__submore+0x48>

08008924 <__swbuf_r>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	460e      	mov	r6, r1
 8008928:	4614      	mov	r4, r2
 800892a:	4605      	mov	r5, r0
 800892c:	b118      	cbz	r0, 8008936 <__swbuf_r+0x12>
 800892e:	6983      	ldr	r3, [r0, #24]
 8008930:	b90b      	cbnz	r3, 8008936 <__swbuf_r+0x12>
 8008932:	f7fd ff07 	bl	8006744 <__sinit>
 8008936:	4b21      	ldr	r3, [pc, #132]	; (80089bc <__swbuf_r+0x98>)
 8008938:	429c      	cmp	r4, r3
 800893a:	d12b      	bne.n	8008994 <__swbuf_r+0x70>
 800893c:	686c      	ldr	r4, [r5, #4]
 800893e:	69a3      	ldr	r3, [r4, #24]
 8008940:	60a3      	str	r3, [r4, #8]
 8008942:	89a3      	ldrh	r3, [r4, #12]
 8008944:	071a      	lsls	r2, r3, #28
 8008946:	d52f      	bpl.n	80089a8 <__swbuf_r+0x84>
 8008948:	6923      	ldr	r3, [r4, #16]
 800894a:	b36b      	cbz	r3, 80089a8 <__swbuf_r+0x84>
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	6820      	ldr	r0, [r4, #0]
 8008950:	1ac0      	subs	r0, r0, r3
 8008952:	6963      	ldr	r3, [r4, #20]
 8008954:	b2f6      	uxtb	r6, r6
 8008956:	4283      	cmp	r3, r0
 8008958:	4637      	mov	r7, r6
 800895a:	dc04      	bgt.n	8008966 <__swbuf_r+0x42>
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f952 	bl	8008c08 <_fflush_r>
 8008964:	bb30      	cbnz	r0, 80089b4 <__swbuf_r+0x90>
 8008966:	68a3      	ldr	r3, [r4, #8]
 8008968:	3b01      	subs	r3, #1
 800896a:	60a3      	str	r3, [r4, #8]
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	6022      	str	r2, [r4, #0]
 8008972:	701e      	strb	r6, [r3, #0]
 8008974:	6963      	ldr	r3, [r4, #20]
 8008976:	3001      	adds	r0, #1
 8008978:	4283      	cmp	r3, r0
 800897a:	d004      	beq.n	8008986 <__swbuf_r+0x62>
 800897c:	89a3      	ldrh	r3, [r4, #12]
 800897e:	07db      	lsls	r3, r3, #31
 8008980:	d506      	bpl.n	8008990 <__swbuf_r+0x6c>
 8008982:	2e0a      	cmp	r6, #10
 8008984:	d104      	bne.n	8008990 <__swbuf_r+0x6c>
 8008986:	4621      	mov	r1, r4
 8008988:	4628      	mov	r0, r5
 800898a:	f000 f93d 	bl	8008c08 <_fflush_r>
 800898e:	b988      	cbnz	r0, 80089b4 <__swbuf_r+0x90>
 8008990:	4638      	mov	r0, r7
 8008992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008994:	4b0a      	ldr	r3, [pc, #40]	; (80089c0 <__swbuf_r+0x9c>)
 8008996:	429c      	cmp	r4, r3
 8008998:	d101      	bne.n	800899e <__swbuf_r+0x7a>
 800899a:	68ac      	ldr	r4, [r5, #8]
 800899c:	e7cf      	b.n	800893e <__swbuf_r+0x1a>
 800899e:	4b09      	ldr	r3, [pc, #36]	; (80089c4 <__swbuf_r+0xa0>)
 80089a0:	429c      	cmp	r4, r3
 80089a2:	bf08      	it	eq
 80089a4:	68ec      	ldreq	r4, [r5, #12]
 80089a6:	e7ca      	b.n	800893e <__swbuf_r+0x1a>
 80089a8:	4621      	mov	r1, r4
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f81a 	bl	80089e4 <__swsetup_r>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	d0cb      	beq.n	800894c <__swbuf_r+0x28>
 80089b4:	f04f 37ff 	mov.w	r7, #4294967295
 80089b8:	e7ea      	b.n	8008990 <__swbuf_r+0x6c>
 80089ba:	bf00      	nop
 80089bc:	0800923c 	.word	0x0800923c
 80089c0:	0800925c 	.word	0x0800925c
 80089c4:	0800921c 	.word	0x0800921c

080089c8 <__ascii_wctomb>:
 80089c8:	b149      	cbz	r1, 80089de <__ascii_wctomb+0x16>
 80089ca:	2aff      	cmp	r2, #255	; 0xff
 80089cc:	bf85      	ittet	hi
 80089ce:	238a      	movhi	r3, #138	; 0x8a
 80089d0:	6003      	strhi	r3, [r0, #0]
 80089d2:	700a      	strbls	r2, [r1, #0]
 80089d4:	f04f 30ff 	movhi.w	r0, #4294967295
 80089d8:	bf98      	it	ls
 80089da:	2001      	movls	r0, #1
 80089dc:	4770      	bx	lr
 80089de:	4608      	mov	r0, r1
 80089e0:	4770      	bx	lr
	...

080089e4 <__swsetup_r>:
 80089e4:	4b32      	ldr	r3, [pc, #200]	; (8008ab0 <__swsetup_r+0xcc>)
 80089e6:	b570      	push	{r4, r5, r6, lr}
 80089e8:	681d      	ldr	r5, [r3, #0]
 80089ea:	4606      	mov	r6, r0
 80089ec:	460c      	mov	r4, r1
 80089ee:	b125      	cbz	r5, 80089fa <__swsetup_r+0x16>
 80089f0:	69ab      	ldr	r3, [r5, #24]
 80089f2:	b913      	cbnz	r3, 80089fa <__swsetup_r+0x16>
 80089f4:	4628      	mov	r0, r5
 80089f6:	f7fd fea5 	bl	8006744 <__sinit>
 80089fa:	4b2e      	ldr	r3, [pc, #184]	; (8008ab4 <__swsetup_r+0xd0>)
 80089fc:	429c      	cmp	r4, r3
 80089fe:	d10f      	bne.n	8008a20 <__swsetup_r+0x3c>
 8008a00:	686c      	ldr	r4, [r5, #4]
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a08:	0719      	lsls	r1, r3, #28
 8008a0a:	d42c      	bmi.n	8008a66 <__swsetup_r+0x82>
 8008a0c:	06dd      	lsls	r5, r3, #27
 8008a0e:	d411      	bmi.n	8008a34 <__swsetup_r+0x50>
 8008a10:	2309      	movs	r3, #9
 8008a12:	6033      	str	r3, [r6, #0]
 8008a14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a18:	81a3      	strh	r3, [r4, #12]
 8008a1a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1e:	e03e      	b.n	8008a9e <__swsetup_r+0xba>
 8008a20:	4b25      	ldr	r3, [pc, #148]	; (8008ab8 <__swsetup_r+0xd4>)
 8008a22:	429c      	cmp	r4, r3
 8008a24:	d101      	bne.n	8008a2a <__swsetup_r+0x46>
 8008a26:	68ac      	ldr	r4, [r5, #8]
 8008a28:	e7eb      	b.n	8008a02 <__swsetup_r+0x1e>
 8008a2a:	4b24      	ldr	r3, [pc, #144]	; (8008abc <__swsetup_r+0xd8>)
 8008a2c:	429c      	cmp	r4, r3
 8008a2e:	bf08      	it	eq
 8008a30:	68ec      	ldreq	r4, [r5, #12]
 8008a32:	e7e6      	b.n	8008a02 <__swsetup_r+0x1e>
 8008a34:	0758      	lsls	r0, r3, #29
 8008a36:	d512      	bpl.n	8008a5e <__swsetup_r+0x7a>
 8008a38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a3a:	b141      	cbz	r1, 8008a4e <__swsetup_r+0x6a>
 8008a3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a40:	4299      	cmp	r1, r3
 8008a42:	d002      	beq.n	8008a4a <__swsetup_r+0x66>
 8008a44:	4630      	mov	r0, r6
 8008a46:	f7fe ffa3 	bl	8007990 <_free_r>
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	6363      	str	r3, [r4, #52]	; 0x34
 8008a4e:	89a3      	ldrh	r3, [r4, #12]
 8008a50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a54:	81a3      	strh	r3, [r4, #12]
 8008a56:	2300      	movs	r3, #0
 8008a58:	6063      	str	r3, [r4, #4]
 8008a5a:	6923      	ldr	r3, [r4, #16]
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	89a3      	ldrh	r3, [r4, #12]
 8008a60:	f043 0308 	orr.w	r3, r3, #8
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	b94b      	cbnz	r3, 8008a7e <__swsetup_r+0x9a>
 8008a6a:	89a3      	ldrh	r3, [r4, #12]
 8008a6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a74:	d003      	beq.n	8008a7e <__swsetup_r+0x9a>
 8008a76:	4621      	mov	r1, r4
 8008a78:	4630      	mov	r0, r6
 8008a7a:	f000 f939 	bl	8008cf0 <__smakebuf_r>
 8008a7e:	89a0      	ldrh	r0, [r4, #12]
 8008a80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a84:	f010 0301 	ands.w	r3, r0, #1
 8008a88:	d00a      	beq.n	8008aa0 <__swsetup_r+0xbc>
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	60a3      	str	r3, [r4, #8]
 8008a8e:	6963      	ldr	r3, [r4, #20]
 8008a90:	425b      	negs	r3, r3
 8008a92:	61a3      	str	r3, [r4, #24]
 8008a94:	6923      	ldr	r3, [r4, #16]
 8008a96:	b943      	cbnz	r3, 8008aaa <__swsetup_r+0xc6>
 8008a98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008a9c:	d1ba      	bne.n	8008a14 <__swsetup_r+0x30>
 8008a9e:	bd70      	pop	{r4, r5, r6, pc}
 8008aa0:	0781      	lsls	r1, r0, #30
 8008aa2:	bf58      	it	pl
 8008aa4:	6963      	ldrpl	r3, [r4, #20]
 8008aa6:	60a3      	str	r3, [r4, #8]
 8008aa8:	e7f4      	b.n	8008a94 <__swsetup_r+0xb0>
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e7f7      	b.n	8008a9e <__swsetup_r+0xba>
 8008aae:	bf00      	nop
 8008ab0:	2000000c 	.word	0x2000000c
 8008ab4:	0800923c 	.word	0x0800923c
 8008ab8:	0800925c 	.word	0x0800925c
 8008abc:	0800921c 	.word	0x0800921c

08008ac0 <__assert_func>:
 8008ac0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ac2:	4614      	mov	r4, r2
 8008ac4:	461a      	mov	r2, r3
 8008ac6:	4b09      	ldr	r3, [pc, #36]	; (8008aec <__assert_func+0x2c>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4605      	mov	r5, r0
 8008acc:	68d8      	ldr	r0, [r3, #12]
 8008ace:	b14c      	cbz	r4, 8008ae4 <__assert_func+0x24>
 8008ad0:	4b07      	ldr	r3, [pc, #28]	; (8008af0 <__assert_func+0x30>)
 8008ad2:	9100      	str	r1, [sp, #0]
 8008ad4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008ad8:	4906      	ldr	r1, [pc, #24]	; (8008af4 <__assert_func+0x34>)
 8008ada:	462b      	mov	r3, r5
 8008adc:	f000 f8d0 	bl	8008c80 <fiprintf>
 8008ae0:	f000 f99b 	bl	8008e1a <abort>
 8008ae4:	4b04      	ldr	r3, [pc, #16]	; (8008af8 <__assert_func+0x38>)
 8008ae6:	461c      	mov	r4, r3
 8008ae8:	e7f3      	b.n	8008ad2 <__assert_func+0x12>
 8008aea:	bf00      	nop
 8008aec:	2000000c 	.word	0x2000000c
 8008af0:	08009480 	.word	0x08009480
 8008af4:	0800948d 	.word	0x0800948d
 8008af8:	080094bb 	.word	0x080094bb

08008afc <__sflush_r>:
 8008afc:	898a      	ldrh	r2, [r1, #12]
 8008afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b02:	4605      	mov	r5, r0
 8008b04:	0710      	lsls	r0, r2, #28
 8008b06:	460c      	mov	r4, r1
 8008b08:	d458      	bmi.n	8008bbc <__sflush_r+0xc0>
 8008b0a:	684b      	ldr	r3, [r1, #4]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	dc05      	bgt.n	8008b1c <__sflush_r+0x20>
 8008b10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	dc02      	bgt.n	8008b1c <__sflush_r+0x20>
 8008b16:	2000      	movs	r0, #0
 8008b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b1e:	2e00      	cmp	r6, #0
 8008b20:	d0f9      	beq.n	8008b16 <__sflush_r+0x1a>
 8008b22:	2300      	movs	r3, #0
 8008b24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b28:	682f      	ldr	r7, [r5, #0]
 8008b2a:	602b      	str	r3, [r5, #0]
 8008b2c:	d032      	beq.n	8008b94 <__sflush_r+0x98>
 8008b2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b30:	89a3      	ldrh	r3, [r4, #12]
 8008b32:	075a      	lsls	r2, r3, #29
 8008b34:	d505      	bpl.n	8008b42 <__sflush_r+0x46>
 8008b36:	6863      	ldr	r3, [r4, #4]
 8008b38:	1ac0      	subs	r0, r0, r3
 8008b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b3c:	b10b      	cbz	r3, 8008b42 <__sflush_r+0x46>
 8008b3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b40:	1ac0      	subs	r0, r0, r3
 8008b42:	2300      	movs	r3, #0
 8008b44:	4602      	mov	r2, r0
 8008b46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b48:	6a21      	ldr	r1, [r4, #32]
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	47b0      	blx	r6
 8008b4e:	1c43      	adds	r3, r0, #1
 8008b50:	89a3      	ldrh	r3, [r4, #12]
 8008b52:	d106      	bne.n	8008b62 <__sflush_r+0x66>
 8008b54:	6829      	ldr	r1, [r5, #0]
 8008b56:	291d      	cmp	r1, #29
 8008b58:	d82c      	bhi.n	8008bb4 <__sflush_r+0xb8>
 8008b5a:	4a2a      	ldr	r2, [pc, #168]	; (8008c04 <__sflush_r+0x108>)
 8008b5c:	40ca      	lsrs	r2, r1
 8008b5e:	07d6      	lsls	r6, r2, #31
 8008b60:	d528      	bpl.n	8008bb4 <__sflush_r+0xb8>
 8008b62:	2200      	movs	r2, #0
 8008b64:	6062      	str	r2, [r4, #4]
 8008b66:	04d9      	lsls	r1, r3, #19
 8008b68:	6922      	ldr	r2, [r4, #16]
 8008b6a:	6022      	str	r2, [r4, #0]
 8008b6c:	d504      	bpl.n	8008b78 <__sflush_r+0x7c>
 8008b6e:	1c42      	adds	r2, r0, #1
 8008b70:	d101      	bne.n	8008b76 <__sflush_r+0x7a>
 8008b72:	682b      	ldr	r3, [r5, #0]
 8008b74:	b903      	cbnz	r3, 8008b78 <__sflush_r+0x7c>
 8008b76:	6560      	str	r0, [r4, #84]	; 0x54
 8008b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b7a:	602f      	str	r7, [r5, #0]
 8008b7c:	2900      	cmp	r1, #0
 8008b7e:	d0ca      	beq.n	8008b16 <__sflush_r+0x1a>
 8008b80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b84:	4299      	cmp	r1, r3
 8008b86:	d002      	beq.n	8008b8e <__sflush_r+0x92>
 8008b88:	4628      	mov	r0, r5
 8008b8a:	f7fe ff01 	bl	8007990 <_free_r>
 8008b8e:	2000      	movs	r0, #0
 8008b90:	6360      	str	r0, [r4, #52]	; 0x34
 8008b92:	e7c1      	b.n	8008b18 <__sflush_r+0x1c>
 8008b94:	6a21      	ldr	r1, [r4, #32]
 8008b96:	2301      	movs	r3, #1
 8008b98:	4628      	mov	r0, r5
 8008b9a:	47b0      	blx	r6
 8008b9c:	1c41      	adds	r1, r0, #1
 8008b9e:	d1c7      	bne.n	8008b30 <__sflush_r+0x34>
 8008ba0:	682b      	ldr	r3, [r5, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d0c4      	beq.n	8008b30 <__sflush_r+0x34>
 8008ba6:	2b1d      	cmp	r3, #29
 8008ba8:	d001      	beq.n	8008bae <__sflush_r+0xb2>
 8008baa:	2b16      	cmp	r3, #22
 8008bac:	d101      	bne.n	8008bb2 <__sflush_r+0xb6>
 8008bae:	602f      	str	r7, [r5, #0]
 8008bb0:	e7b1      	b.n	8008b16 <__sflush_r+0x1a>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	e7ad      	b.n	8008b18 <__sflush_r+0x1c>
 8008bbc:	690f      	ldr	r7, [r1, #16]
 8008bbe:	2f00      	cmp	r7, #0
 8008bc0:	d0a9      	beq.n	8008b16 <__sflush_r+0x1a>
 8008bc2:	0793      	lsls	r3, r2, #30
 8008bc4:	680e      	ldr	r6, [r1, #0]
 8008bc6:	bf08      	it	eq
 8008bc8:	694b      	ldreq	r3, [r1, #20]
 8008bca:	600f      	str	r7, [r1, #0]
 8008bcc:	bf18      	it	ne
 8008bce:	2300      	movne	r3, #0
 8008bd0:	eba6 0807 	sub.w	r8, r6, r7
 8008bd4:	608b      	str	r3, [r1, #8]
 8008bd6:	f1b8 0f00 	cmp.w	r8, #0
 8008bda:	dd9c      	ble.n	8008b16 <__sflush_r+0x1a>
 8008bdc:	6a21      	ldr	r1, [r4, #32]
 8008bde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008be0:	4643      	mov	r3, r8
 8008be2:	463a      	mov	r2, r7
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b0      	blx	r6
 8008be8:	2800      	cmp	r0, #0
 8008bea:	dc06      	bgt.n	8008bfa <__sflush_r+0xfe>
 8008bec:	89a3      	ldrh	r3, [r4, #12]
 8008bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bf2:	81a3      	strh	r3, [r4, #12]
 8008bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008bf8:	e78e      	b.n	8008b18 <__sflush_r+0x1c>
 8008bfa:	4407      	add	r7, r0
 8008bfc:	eba8 0800 	sub.w	r8, r8, r0
 8008c00:	e7e9      	b.n	8008bd6 <__sflush_r+0xda>
 8008c02:	bf00      	nop
 8008c04:	20400001 	.word	0x20400001

08008c08 <_fflush_r>:
 8008c08:	b538      	push	{r3, r4, r5, lr}
 8008c0a:	690b      	ldr	r3, [r1, #16]
 8008c0c:	4605      	mov	r5, r0
 8008c0e:	460c      	mov	r4, r1
 8008c10:	b913      	cbnz	r3, 8008c18 <_fflush_r+0x10>
 8008c12:	2500      	movs	r5, #0
 8008c14:	4628      	mov	r0, r5
 8008c16:	bd38      	pop	{r3, r4, r5, pc}
 8008c18:	b118      	cbz	r0, 8008c22 <_fflush_r+0x1a>
 8008c1a:	6983      	ldr	r3, [r0, #24]
 8008c1c:	b90b      	cbnz	r3, 8008c22 <_fflush_r+0x1a>
 8008c1e:	f7fd fd91 	bl	8006744 <__sinit>
 8008c22:	4b14      	ldr	r3, [pc, #80]	; (8008c74 <_fflush_r+0x6c>)
 8008c24:	429c      	cmp	r4, r3
 8008c26:	d11b      	bne.n	8008c60 <_fflush_r+0x58>
 8008c28:	686c      	ldr	r4, [r5, #4]
 8008c2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d0ef      	beq.n	8008c12 <_fflush_r+0xa>
 8008c32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c34:	07d0      	lsls	r0, r2, #31
 8008c36:	d404      	bmi.n	8008c42 <_fflush_r+0x3a>
 8008c38:	0599      	lsls	r1, r3, #22
 8008c3a:	d402      	bmi.n	8008c42 <_fflush_r+0x3a>
 8008c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c3e:	f7fe f992 	bl	8006f66 <__retarget_lock_acquire_recursive>
 8008c42:	4628      	mov	r0, r5
 8008c44:	4621      	mov	r1, r4
 8008c46:	f7ff ff59 	bl	8008afc <__sflush_r>
 8008c4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c4c:	07da      	lsls	r2, r3, #31
 8008c4e:	4605      	mov	r5, r0
 8008c50:	d4e0      	bmi.n	8008c14 <_fflush_r+0xc>
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	059b      	lsls	r3, r3, #22
 8008c56:	d4dd      	bmi.n	8008c14 <_fflush_r+0xc>
 8008c58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c5a:	f7fe f985 	bl	8006f68 <__retarget_lock_release_recursive>
 8008c5e:	e7d9      	b.n	8008c14 <_fflush_r+0xc>
 8008c60:	4b05      	ldr	r3, [pc, #20]	; (8008c78 <_fflush_r+0x70>)
 8008c62:	429c      	cmp	r4, r3
 8008c64:	d101      	bne.n	8008c6a <_fflush_r+0x62>
 8008c66:	68ac      	ldr	r4, [r5, #8]
 8008c68:	e7df      	b.n	8008c2a <_fflush_r+0x22>
 8008c6a:	4b04      	ldr	r3, [pc, #16]	; (8008c7c <_fflush_r+0x74>)
 8008c6c:	429c      	cmp	r4, r3
 8008c6e:	bf08      	it	eq
 8008c70:	68ec      	ldreq	r4, [r5, #12]
 8008c72:	e7da      	b.n	8008c2a <_fflush_r+0x22>
 8008c74:	0800923c 	.word	0x0800923c
 8008c78:	0800925c 	.word	0x0800925c
 8008c7c:	0800921c 	.word	0x0800921c

08008c80 <fiprintf>:
 8008c80:	b40e      	push	{r1, r2, r3}
 8008c82:	b503      	push	{r0, r1, lr}
 8008c84:	4601      	mov	r1, r0
 8008c86:	ab03      	add	r3, sp, #12
 8008c88:	4805      	ldr	r0, [pc, #20]	; (8008ca0 <fiprintf+0x20>)
 8008c8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c8e:	6800      	ldr	r0, [r0, #0]
 8008c90:	9301      	str	r3, [sp, #4]
 8008c92:	f7ff fab5 	bl	8008200 <_vfiprintf_r>
 8008c96:	b002      	add	sp, #8
 8008c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c9c:	b003      	add	sp, #12
 8008c9e:	4770      	bx	lr
 8008ca0:	2000000c 	.word	0x2000000c

08008ca4 <__swhatbuf_r>:
 8008ca4:	b570      	push	{r4, r5, r6, lr}
 8008ca6:	460e      	mov	r6, r1
 8008ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cac:	2900      	cmp	r1, #0
 8008cae:	b096      	sub	sp, #88	; 0x58
 8008cb0:	4614      	mov	r4, r2
 8008cb2:	461d      	mov	r5, r3
 8008cb4:	da08      	bge.n	8008cc8 <__swhatbuf_r+0x24>
 8008cb6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	602a      	str	r2, [r5, #0]
 8008cbe:	061a      	lsls	r2, r3, #24
 8008cc0:	d410      	bmi.n	8008ce4 <__swhatbuf_r+0x40>
 8008cc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc6:	e00e      	b.n	8008ce6 <__swhatbuf_r+0x42>
 8008cc8:	466a      	mov	r2, sp
 8008cca:	f000 f8ad 	bl	8008e28 <_fstat_r>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	dbf1      	blt.n	8008cb6 <__swhatbuf_r+0x12>
 8008cd2:	9a01      	ldr	r2, [sp, #4]
 8008cd4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cd8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cdc:	425a      	negs	r2, r3
 8008cde:	415a      	adcs	r2, r3
 8008ce0:	602a      	str	r2, [r5, #0]
 8008ce2:	e7ee      	b.n	8008cc2 <__swhatbuf_r+0x1e>
 8008ce4:	2340      	movs	r3, #64	; 0x40
 8008ce6:	2000      	movs	r0, #0
 8008ce8:	6023      	str	r3, [r4, #0]
 8008cea:	b016      	add	sp, #88	; 0x58
 8008cec:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cf0 <__smakebuf_r>:
 8008cf0:	898b      	ldrh	r3, [r1, #12]
 8008cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cf4:	079d      	lsls	r5, r3, #30
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	d507      	bpl.n	8008d0c <__smakebuf_r+0x1c>
 8008cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	6123      	str	r3, [r4, #16]
 8008d04:	2301      	movs	r3, #1
 8008d06:	6163      	str	r3, [r4, #20]
 8008d08:	b002      	add	sp, #8
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	ab01      	add	r3, sp, #4
 8008d0e:	466a      	mov	r2, sp
 8008d10:	f7ff ffc8 	bl	8008ca4 <__swhatbuf_r>
 8008d14:	9900      	ldr	r1, [sp, #0]
 8008d16:	4605      	mov	r5, r0
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7fe fea5 	bl	8007a68 <_malloc_r>
 8008d1e:	b948      	cbnz	r0, 8008d34 <__smakebuf_r+0x44>
 8008d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d24:	059a      	lsls	r2, r3, #22
 8008d26:	d4ef      	bmi.n	8008d08 <__smakebuf_r+0x18>
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	e7e3      	b.n	8008cfc <__smakebuf_r+0xc>
 8008d34:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <__smakebuf_r+0x7c>)
 8008d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	9b00      	ldr	r3, [sp, #0]
 8008d44:	6163      	str	r3, [r4, #20]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	6120      	str	r0, [r4, #16]
 8008d4a:	b15b      	cbz	r3, 8008d64 <__smakebuf_r+0x74>
 8008d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f87b 	bl	8008e4c <_isatty_r>
 8008d56:	b128      	cbz	r0, 8008d64 <__smakebuf_r+0x74>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	89a0      	ldrh	r0, [r4, #12]
 8008d66:	4305      	orrs	r5, r0
 8008d68:	81a5      	strh	r5, [r4, #12]
 8008d6a:	e7cd      	b.n	8008d08 <__smakebuf_r+0x18>
 8008d6c:	080066dd 	.word	0x080066dd

08008d70 <memmove>:
 8008d70:	4288      	cmp	r0, r1
 8008d72:	b510      	push	{r4, lr}
 8008d74:	eb01 0402 	add.w	r4, r1, r2
 8008d78:	d902      	bls.n	8008d80 <memmove+0x10>
 8008d7a:	4284      	cmp	r4, r0
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	d807      	bhi.n	8008d90 <memmove+0x20>
 8008d80:	1e43      	subs	r3, r0, #1
 8008d82:	42a1      	cmp	r1, r4
 8008d84:	d008      	beq.n	8008d98 <memmove+0x28>
 8008d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d8e:	e7f8      	b.n	8008d82 <memmove+0x12>
 8008d90:	4402      	add	r2, r0
 8008d92:	4601      	mov	r1, r0
 8008d94:	428a      	cmp	r2, r1
 8008d96:	d100      	bne.n	8008d9a <memmove+0x2a>
 8008d98:	bd10      	pop	{r4, pc}
 8008d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da2:	e7f7      	b.n	8008d94 <memmove+0x24>

08008da4 <__malloc_lock>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__malloc_lock+0x8>)
 8008da6:	f7fe b8de 	b.w	8006f66 <__retarget_lock_acquire_recursive>
 8008daa:	bf00      	nop
 8008dac:	2000036c 	.word	0x2000036c

08008db0 <__malloc_unlock>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__malloc_unlock+0x8>)
 8008db2:	f7fe b8d9 	b.w	8006f68 <__retarget_lock_release_recursive>
 8008db6:	bf00      	nop
 8008db8:	2000036c 	.word	0x2000036c

08008dbc <_realloc_r>:
 8008dbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dc0:	4680      	mov	r8, r0
 8008dc2:	4614      	mov	r4, r2
 8008dc4:	460e      	mov	r6, r1
 8008dc6:	b921      	cbnz	r1, 8008dd2 <_realloc_r+0x16>
 8008dc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008dcc:	4611      	mov	r1, r2
 8008dce:	f7fe be4b 	b.w	8007a68 <_malloc_r>
 8008dd2:	b92a      	cbnz	r2, 8008de0 <_realloc_r+0x24>
 8008dd4:	f7fe fddc 	bl	8007990 <_free_r>
 8008dd8:	4625      	mov	r5, r4
 8008dda:	4628      	mov	r0, r5
 8008ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008de0:	f000 f844 	bl	8008e6c <_malloc_usable_size_r>
 8008de4:	4284      	cmp	r4, r0
 8008de6:	4607      	mov	r7, r0
 8008de8:	d802      	bhi.n	8008df0 <_realloc_r+0x34>
 8008dea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008dee:	d812      	bhi.n	8008e16 <_realloc_r+0x5a>
 8008df0:	4621      	mov	r1, r4
 8008df2:	4640      	mov	r0, r8
 8008df4:	f7fe fe38 	bl	8007a68 <_malloc_r>
 8008df8:	4605      	mov	r5, r0
 8008dfa:	2800      	cmp	r0, #0
 8008dfc:	d0ed      	beq.n	8008dda <_realloc_r+0x1e>
 8008dfe:	42bc      	cmp	r4, r7
 8008e00:	4622      	mov	r2, r4
 8008e02:	4631      	mov	r1, r6
 8008e04:	bf28      	it	cs
 8008e06:	463a      	movcs	r2, r7
 8008e08:	f7fe f8dc 	bl	8006fc4 <memcpy>
 8008e0c:	4631      	mov	r1, r6
 8008e0e:	4640      	mov	r0, r8
 8008e10:	f7fe fdbe 	bl	8007990 <_free_r>
 8008e14:	e7e1      	b.n	8008dda <_realloc_r+0x1e>
 8008e16:	4635      	mov	r5, r6
 8008e18:	e7df      	b.n	8008dda <_realloc_r+0x1e>

08008e1a <abort>:
 8008e1a:	b508      	push	{r3, lr}
 8008e1c:	2006      	movs	r0, #6
 8008e1e:	f000 f855 	bl	8008ecc <raise>
 8008e22:	2001      	movs	r0, #1
 8008e24:	f7f8 fcaa 	bl	800177c <_exit>

08008e28 <_fstat_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4d07      	ldr	r5, [pc, #28]	; (8008e48 <_fstat_r+0x20>)
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4604      	mov	r4, r0
 8008e30:	4608      	mov	r0, r1
 8008e32:	4611      	mov	r1, r2
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	f7f8 fcf0 	bl	800181a <_fstat>
 8008e3a:	1c43      	adds	r3, r0, #1
 8008e3c:	d102      	bne.n	8008e44 <_fstat_r+0x1c>
 8008e3e:	682b      	ldr	r3, [r5, #0]
 8008e40:	b103      	cbz	r3, 8008e44 <_fstat_r+0x1c>
 8008e42:	6023      	str	r3, [r4, #0]
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
 8008e46:	bf00      	nop
 8008e48:	20000378 	.word	0x20000378

08008e4c <_isatty_r>:
 8008e4c:	b538      	push	{r3, r4, r5, lr}
 8008e4e:	4d06      	ldr	r5, [pc, #24]	; (8008e68 <_isatty_r+0x1c>)
 8008e50:	2300      	movs	r3, #0
 8008e52:	4604      	mov	r4, r0
 8008e54:	4608      	mov	r0, r1
 8008e56:	602b      	str	r3, [r5, #0]
 8008e58:	f7f8 fcef 	bl	800183a <_isatty>
 8008e5c:	1c43      	adds	r3, r0, #1
 8008e5e:	d102      	bne.n	8008e66 <_isatty_r+0x1a>
 8008e60:	682b      	ldr	r3, [r5, #0]
 8008e62:	b103      	cbz	r3, 8008e66 <_isatty_r+0x1a>
 8008e64:	6023      	str	r3, [r4, #0]
 8008e66:	bd38      	pop	{r3, r4, r5, pc}
 8008e68:	20000378 	.word	0x20000378

08008e6c <_malloc_usable_size_r>:
 8008e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e70:	1f18      	subs	r0, r3, #4
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bfbc      	itt	lt
 8008e76:	580b      	ldrlt	r3, [r1, r0]
 8008e78:	18c0      	addlt	r0, r0, r3
 8008e7a:	4770      	bx	lr

08008e7c <_raise_r>:
 8008e7c:	291f      	cmp	r1, #31
 8008e7e:	b538      	push	{r3, r4, r5, lr}
 8008e80:	4604      	mov	r4, r0
 8008e82:	460d      	mov	r5, r1
 8008e84:	d904      	bls.n	8008e90 <_raise_r+0x14>
 8008e86:	2316      	movs	r3, #22
 8008e88:	6003      	str	r3, [r0, #0]
 8008e8a:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008e92:	b112      	cbz	r2, 8008e9a <_raise_r+0x1e>
 8008e94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e98:	b94b      	cbnz	r3, 8008eae <_raise_r+0x32>
 8008e9a:	4620      	mov	r0, r4
 8008e9c:	f000 f830 	bl	8008f00 <_getpid_r>
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	4601      	mov	r1, r0
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eaa:	f000 b817 	b.w	8008edc <_kill_r>
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d00a      	beq.n	8008ec8 <_raise_r+0x4c>
 8008eb2:	1c59      	adds	r1, r3, #1
 8008eb4:	d103      	bne.n	8008ebe <_raise_r+0x42>
 8008eb6:	2316      	movs	r3, #22
 8008eb8:	6003      	str	r3, [r0, #0]
 8008eba:	2001      	movs	r0, #1
 8008ebc:	e7e7      	b.n	8008e8e <_raise_r+0x12>
 8008ebe:	2400      	movs	r4, #0
 8008ec0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	4798      	blx	r3
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e7e0      	b.n	8008e8e <_raise_r+0x12>

08008ecc <raise>:
 8008ecc:	4b02      	ldr	r3, [pc, #8]	; (8008ed8 <raise+0xc>)
 8008ece:	4601      	mov	r1, r0
 8008ed0:	6818      	ldr	r0, [r3, #0]
 8008ed2:	f7ff bfd3 	b.w	8008e7c <_raise_r>
 8008ed6:	bf00      	nop
 8008ed8:	2000000c 	.word	0x2000000c

08008edc <_kill_r>:
 8008edc:	b538      	push	{r3, r4, r5, lr}
 8008ede:	4d07      	ldr	r5, [pc, #28]	; (8008efc <_kill_r+0x20>)
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	4604      	mov	r4, r0
 8008ee4:	4608      	mov	r0, r1
 8008ee6:	4611      	mov	r1, r2
 8008ee8:	602b      	str	r3, [r5, #0]
 8008eea:	f7f8 fc37 	bl	800175c <_kill>
 8008eee:	1c43      	adds	r3, r0, #1
 8008ef0:	d102      	bne.n	8008ef8 <_kill_r+0x1c>
 8008ef2:	682b      	ldr	r3, [r5, #0]
 8008ef4:	b103      	cbz	r3, 8008ef8 <_kill_r+0x1c>
 8008ef6:	6023      	str	r3, [r4, #0]
 8008ef8:	bd38      	pop	{r3, r4, r5, pc}
 8008efa:	bf00      	nop
 8008efc:	20000378 	.word	0x20000378

08008f00 <_getpid_r>:
 8008f00:	f7f8 bc24 	b.w	800174c <_getpid>

08008f04 <_init>:
 8008f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f06:	bf00      	nop
 8008f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f0a:	bc08      	pop	{r3}
 8008f0c:	469e      	mov	lr, r3
 8008f0e:	4770      	bx	lr

08008f10 <_fini>:
 8008f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f12:	bf00      	nop
 8008f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f16:	bc08      	pop	{r3}
 8008f18:	469e      	mov	lr, r3
 8008f1a:	4770      	bx	lr
